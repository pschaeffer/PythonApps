Possible variable $
    builder.addLine("      let searchIndex = searchInner.indexOf('$');");
    builder.addLine("    inStr = inStr.replace(/\\$/g,'\u0ed1');");
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("      let searchIndex = searchInner.indexOf('$');");
    builder.addLine("    inStr = inStr.replace(/\\$/g,'\u0ed1');");
Possible variable A
    builder.addLine("    inStr = inStr.replace(/A/g,'\u0e81');");
    builder.addLine("    inStr = inStr.replace(/A/g,'\u0e81');");
Possible variable Add
        "        \"Change Add To Cart\"" +
        "        \"Change Add To Cart\"" +
Possible variable Array
    builder.addLine("    if (Array.isArray(curMod.find) &&");
    builder.addLine("        if (Array.isArray(nodeAttributeValue) &&");
    builder.addLine("    if (Array.isArray(curMod.find) &&");
    builder.addLine("        if (Array.isArray(nodeAttributeValue) &&");
Possible variable ArrayList
                                    ArrayList<HDLmMod> mods, 
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
                                    ArrayList<HDLmMod> mods, 
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
Possible variable Arrays
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
Possible variable B
    builder.addLine("    inStr = inStr.replace(/B/g,'\u0e82');");
    builder.addLine("    inStr = inStr.replace(/B/g,'\u0e82');");
Possible variable Banner
        "        \"Change Banner\"," +
        "        \"Change Banner\"," +
Possible variable C
    builder.addLine("    inStr = inStr.replace(/C/g,'\u0e84');");
    builder.addLine("    inStr = inStr.replace(/C/g,'\u0e84');");
Possible variable CSS
    builder.addLine("        postTrace.findtype = 'CSS Selector';");
    builder.addLine("        postTrace.findtype = 'CSS Selector';");
Possible variable Cart
        "        \"Change Add To Cart\"" +
        "        \"Change Add To Cart\"" +
Possible variable Change
        "        \"Change Banner\"," +
        "        \"Change Add To Cart\"" +
        "        \"Change Banner\"," +
        "        \"Change Add To Cart\"" +
Possible variable Content
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
Possible variable D
    builder.addLine("    inStr = inStr.replace(/D/g,'\u0e87');");
    builder.addLine("    inStr = inStr.replace(/D/g,'\u0e87');");
Possible variable Disabled
    builder.addLine("    var disabledStatus = sessionStorage.getItem(styleTitle + 'Disabled');");
    builder.addLine("    disabledStatus = sessionStorage.getItem(titleValue + 'Disabled');");
    builder.addLine("    sessionStorage.setItem(titleValue + 'Disabled', disabledStatus);");
    builder.addLine("    var disabledStatus = sessionStorage.getItem(styleTitle + 'Disabled');");
    builder.addLine("    disabledStatus = sessionStorage.getItem(titleValue + 'Disabled');");
    builder.addLine("    sessionStorage.setItem(titleValue + 'Disabled', disabledStatus);");
Possible variable Division
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
Possible variable Double
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
    Double   arrayEntry;
    	sessionIndexValue = Double.parseDouble(sessionIndexStr);    	 
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
    Double   arrayEntry;
    	sessionIndexValue = Double.parseDouble(sessionIndexStr);    	 
Possible variable E
    builder.addLine("    inStr = inStr.replace(/E/g,'\u0e88');");
    builder.addLine("    inStr = inStr.replace(/E/g,'\u0e88');");
Possible variable Element
    builder.addLine("    if (domObj.type != 'Element')");
    builder.addLine("    if (domObj.type != 'Element')");
Possible variable Error
    builder.addLine("            HDLmBuildError('Error', 'Mod', 16, errorText);");
    builder.addLine("          HDLmBuildError('Error', 'Mod', 31, errorText);");
    builder.addLine("        HDLmBuildError('Error', 'NodeIden', 40, errorText);");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("            HDLmBuildError('Error', 'Mod', 16, errorText);");
    builder.addLine("          HDLmBuildError('Error', 'Mod', 31, errorText);");
    builder.addLine("        HDLmBuildError('Error', 'NodeIden', 40, errorText);");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
Possible variable F
    builder.addLine("    inStr = inStr.replace(/F/g,'\u0e8a');");
    builder.addLine("    inStr = inStr.replace(/F/g,'\u0e8a');");
Possible variable FIXIFRAMESRC
    builder.addLine("            if (curModExtra.toUpperCase() !== 'FIXIFRAMESRC')");
    builder.addLine("            if (curModExtra.toUpperCase() !== 'FIXIFRAMESRC')");
Possible variable Finds
    builder.addLine("        postTrace.findtype = 'Finds';");
    builder.addLine("        postTrace.findtype = 'Finds';");
Possible variable Fired
    builder.addLine("            matchError = 'Fired';");
    builder.addLine("            matchError = 'Fired';");
Possible variable G
    builder.addLine("    inStr = inStr.replace(/G/g,'\u0e8d');");
    builder.addLine("    inStr = inStr.replace(/G/g,'\u0e8d');");
Possible variable H
    builder.addLine("    inStr = inStr.replace(/H/g,'\u0e94');");
    builder.addLine("    inStr = inStr.replace(/H/g,'\u0e94');");
Possible variable HDLMFIXEDFILENAME
    	fixedJSName = HDLmDefines.getString("HDLMFIXEDFILENAME");
    	fixedJSName = HDLmDefines.getString("HDLMFIXEDFILENAME");
Possible variable HDLMFORCEVALUE
    String   forceSelectString = HDLmDefines.getString("HDLMFORCEVALUE");
    String   forceSelectString = HDLmDefines.getString("HDLMFORCEVALUE");
Possible variable HDLMLOADPAGEMODNAME
    String  modificationName = HDLmDefines.getString("HDLMLOADPAGEMODNAME");
    String  modificationName = HDLmDefines.getString("HDLMLOADPAGEMODNAME");
Possible variable HDLMPOSTDATA
    builder.addLine("    dataStr = '" + HDLmDefines.getString("HDLMPOSTDATA") + "=" + "' + dataStr;");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
    builder.addLine("    dataStr = '" + HDLmDefines.getString("HDLMPOSTDATA") + "=" + "' + dataStr;");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
Possible variable HDLMPREFIX
    builder.addLine("    errorStr += '" + HDLmDefines.getString("HDLMPREFIX") + "' + ' ';");
    builder.addLine("    errorStr += '" + HDLmDefines.getString("HDLMPREFIX") + "' + ' ';");
Possible variable HDLmAssert
	 	  HDLmAssert.HDLmAssertAction(false, errorText);
    	 	  HDLmAssert.HDLmAssertAction(false, errorText);
    	 	  HDLmAssert.HDLmAssertAction(false, errorText);
      	 	  HDLmAssert.HDLmAssertAction(false, errorText);
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
	 	  HDLmAssert.HDLmAssertAction(false, errorText);
    	 	  HDLmAssert.HDLmAssertAction(false, errorText);
    	 	  HDLmAssert.HDLmAssertAction(false, errorText);
      	 	  HDLmAssert.HDLmAssertAction(false, errorText);
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
Possible variable HDLmBuildJs
class HDLmBuildJs {
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
	private HDLmBuildJs() {}
class HDLmBuildJs {
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
	private HDLmBuildJs() {}
Possible variable HDLmBuildJsOld
      actualJS = HDLmUtility.fileGetContents("HDLmBuildJsOld.txt");
      actualJS = HDLmUtility.fileGetContents("HDLmBuildJsOld.txt");
Possible variable HDLmBuildLines
    HDLmBuildLines  builder;
    builder = new HDLmBuildLines("JS");
    HDLmBuildLines  builder;
    builder = new HDLmBuildLines("JS");
Possible variable HDLmClassBackground
    builder.addLine("      HDLmClassAddEntry(curNode, 'HDLmClassBackground');");
    builder.addLine("      HDLmClassAddEntry(curNode, 'HDLmClassBackground');");
Possible variable HDLmClassPrimary
    builder.addLine("    HDLmClassAddEntry(curNode, 'HDLmClassPrimary');");
    builder.addLine("    HDLmClassAddEntry(curNode, 'HDLmClassPrimary');");
Possible variable HDLmConfigInfo
    builder.addLine("    let urlVal = '" + protocolStringGetPHash + "://' + serverNameValue + '/" + HDLmConfigInfo.getPHashName() + "';");
    builder.addLine("    let urlVal = '" + protocolStringGetPHash + "://' + serverNameValue + '/" + HDLmConfigInfo.getPHashName() + "';");
Possible variable HDLmDefines
    	fixedJSName = HDLmDefines.getString("HDLMFIXEDFILENAME");
    String   forceSelectString = HDLmDefines.getString("HDLMFORCEVALUE");
    builder.addLine("    errorStr += '" + HDLmDefines.getString("HDLMPREFIX") + "' + ' ';");
    builder.addLine("    dataStr = '" + HDLmDefines.getString("HDLMPOSTDATA") + "=" + "' + dataStr;");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
    String  modificationName = HDLmDefines.getString("HDLMLOADPAGEMODNAME");
    	fixedJSName = HDLmDefines.getString("HDLMFIXEDFILENAME");
    String   forceSelectString = HDLmDefines.getString("HDLMFORCEVALUE");
    builder.addLine("    errorStr += '" + HDLmDefines.getString("HDLMPREFIX") + "' + ' ';");
    builder.addLine("    dataStr = '" + HDLmDefines.getString("HDLMPOSTDATA") + "=" + "' + dataStr;");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
    String  modificationName = HDLmDefines.getString("HDLMLOADPAGEMODNAME");
Possible variable HDLmExecute
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
          newLine = "  function HDLmExecute" + newName + i + "() {";
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
          newLine = "  function HDLmExecute" + newName + i + "() {";
Possible variable HDLmJson
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
Possible variable HDLmLogMatchingTypes
                                    HDLmLogMatchingTypes logRuleMatching,
    if (logRuleMatching == HDLmLogMatchingTypes.LOGMATCHINGYES)
                                    HDLmLogMatchingTypes logRuleMatching,
    if (logRuleMatching == HDLmLogMatchingTypes.LOGMATCHINGYES)
Possible variable HDLmMain
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
Possible variable HDLmMod
                                    ArrayList<HDLmMod> mods, 
    for (HDLmMod mod: mods) {
    for (HDLmMod mod: mods) {
    	String  newName = HDLmMod.replaceInString(mod.getName());
                                    ArrayList<HDLmMod> mods, 
    for (HDLmMod mod: mods) {
    for (HDLmMod mod: mods) {
    	String  newName = HDLmMod.replaceInString(mod.getName());
Possible variable HDLmModTypes
    	if (mod.getType() != HDLmModTypes.SCRIPT)
    String  modificationType = HDLmModTypes.VISIT.toString().toLowerCase();
    	if (mod.getType() != HDLmModTypes.SCRIPT)
    String  modificationType = HDLmModTypes.VISIT.toString().toLowerCase();
Possible variable HDLmPHashCache
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
Possible variable HDLmProtocolTypes
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
Possible variable HDLmSession
                                    HDLmSession sessionObj,
                                    HDLmSession sessionObj,
Possible variable HDLmSessionClasses
    builder.addLine("    var styleTitle = 'HDLmSessionClasses';");
    builder.addLine("    var titleValue = 'HDLmSessionClasses';");
    builder.addLine("    var styleTitle = 'HDLmSessionClasses';");
    builder.addLine("    var titleValue = 'HDLmSessionClasses';");
Possible variable HDLmSessionDebugNodeIdenEnabled
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugNodeIdenEnabled\", 'all');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugNodeIdenEnabled\", 'all');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
Possible variable HDLmSessionDebugRulesEnabled
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugRulesEnabled\", 'true');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugRulesEnabled\", 'true');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
Possible variable HDLmSessionId
    builder.addLine("            let newText = nodeURL.href + '&HDLmSessionId=' + sessionIdJS;");
    builder.addLine("            let newText = nodeURL.href + '&HDLmSessionId=' + sessionIdJS;");
Possible variable HDLmSessionIgnoreProbability
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionIgnoreProbability\", 'true');");
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionIgnoreProbability\", 'true');");
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
Possible variable HDLmSessionPostRuleTracingEnabled
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionPostRuleTracingEnabled\", 'true');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionPostRuleTracingEnabled\", 'true');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
Possible variable HDLmSessionRuleInfoDivisionName
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoDivisionName\", divisionNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoDivisionName\", divisionNameValue);");
Possible variable HDLmSessionRuleInfoHostName
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoHostName\", hostNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoHostName\", hostNameValue);");
Possible variable HDLmSessionRuleInfoSiteName
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoSiteName\", siteNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoSiteName\", siteNameValue);");
Possible variable HDLmUpdateCount
    builder.addLine("    let updateName = 'HDLmUpdateCount' + curMod.name;");
    builder.addLine("    let updateName = 'HDLmUpdateCount' + curMod.name;");
Possible variable HDLmUtility
      actualJS = HDLmUtility.fileGetContents("HDLmBuildJsOld.txt");
    	boolean   fileExists = HDLmUtility.fileExists(fixedJSName);
        actualJS = HDLmUtility.fileGetContents(fixedJSName);
		  HDLmUtility.fileClearContents(fixedJSName);
		  HDLmUtility.filePutAppend(fixedJSName, 
      actualJS = HDLmUtility.fileGetContents("HDLmBuildJsOld.txt");
    	boolean   fileExists = HDLmUtility.fileExists(fixedJSName);
        actualJS = HDLmUtility.fileGetContents(fixedJSName);
		  HDLmUtility.fileClearContents(fixedJSName);
		  HDLmUtility.filePutAppend(fixedJSName, 
Possible variable Host
		  String  errorText = "Host name string passed to getJsBuildJs is null";
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
		  String  errorText = "Host name string passed to getJsBuildJs is null";
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
Possible variable I
    builder.addLine("    inStr = inStr.replace(/I/g,'\u0e97');");
    builder.addLine("    inStr = inStr.replace(/I/g,'\u0e97');");
Possible variable In
		  LOG.debug("In HDLmGetLookupIndex");
		  LOG.debug("In HDLmGetLookupIndex");
Possible variable Invalid
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
Possible variable J
    builder.addLine("    inStr = inStr.replace(/J/g,'\u0e99');");
    builder.addLine("    inStr = inStr.replace(/J/g,'\u0e99');");
Possible variable JS
    builder = new HDLmBuildLines("JS");
    builder = new HDLmBuildLines("JS");
Possible variable JSON
    builder.addLine("                let newNodeObj = JSON.parse(newText);");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("    return JSON.stringify(newObj);");
    builder.addLine("    let searchObj = JSON.parse(searchText);");
    builder.addLine("      searchText = JSON.stringify(searchObj);");
    builder.addLine("      localMod.nodeiden = JSON.parse(searchValue);");
    builder.addLine("    let jsonObj = JSON.parse(jsonStr);");
    builder.addLine("    jsonStr = JSON.stringify(jsonObj);");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
    builder.addLine("    let updateStr = JSON.stringify(savedUpdates);");
    builder.addLine("                let newNodeObj = JSON.parse(newText);");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("    return JSON.stringify(newObj);");
    builder.addLine("    let searchObj = JSON.parse(searchText);");
    builder.addLine("      searchText = JSON.stringify(searchObj);");
    builder.addLine("      localMod.nodeiden = JSON.parse(searchValue);");
    builder.addLine("    let jsonObj = JSON.parse(jsonStr);");
    builder.addLine("    jsonStr = JSON.stringify(jsonObj);");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
    builder.addLine("    let updateStr = JSON.stringify(savedUpdates);");
Possible variable JsonArray
    JsonArray   indexJsonArray = getIndexJsonArray(); 
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
    		JsonArray   choiceJsonArray = null;
        	choiceJsonArray = (JsonArray) choicesJsonArray.get(indexValueInt);
  public static JsonArray  getIndexJsonArray() {
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
    JsonArray   indexJsonArray = getIndexJsonArray(); 
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
    		JsonArray   choiceJsonArray = null;
        	choiceJsonArray = (JsonArray) choicesJsonArray.get(indexValueInt);
  public static JsonArray  getIndexJsonArray() {
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
Possible variable JsonElement
    	JsonElement   indexJsonElement = indexJsonArray.get(i);
        	JsonElement   ruleJsonElement = rulesJsonArray.get(j);
            JsonElement   choiceJsonElement = choiceJsonArray.get(j); 
    	JsonElement   indexJsonElement = indexJsonArray.get(i);
        	JsonElement   ruleJsonElement = rulesJsonArray.get(j);
            JsonElement   choiceJsonElement = choiceJsonArray.get(j); 
Possible variable JsonParser
	    static JsonParser  parser = new JsonParser();  
	    static JsonParser  parser = new JsonParser();  
	    static JsonParser  parser = new JsonParser();  
	    static JsonParser  parser = new JsonParser();  
Possible variable K
    builder.addLine("    inStr = inStr.replace(/K/g,'\u0e9f');");
    builder.addLine("    inStr = inStr.replace(/K/g,'\u0e9f');");
Possible variable L
    builder.addLine("    inStr = inStr.replace(/L/g,'\u0ea1');");
    builder.addLine("    inStr = inStr.replace(/L/g,'\u0ea1');");
Possible variable LOG
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
    boolean   logIsDebugEnabled = LOG.isDebugEnabled();
		  LOG.debug("In HDLmGetLookupIndex");
		  LOG.debug(sessionIndexStr);
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
    boolean   logIsDebugEnabled = LOG.isDebugEnabled();
		  LOG.debug("In HDLmGetLookupIndex");
		  LOG.debug(sessionIndexStr);
Possible variable Log
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
Possible variable Logger
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
Possible variable LoggerFactory
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
Possible variable M
    builder.addLine("    inStr = inStr.replace(/M/g,'\u0ea3');");
    builder.addLine("    inStr = inStr.replace(/M/g,'\u0ea3');");
Possible variable Map
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
Possible variable Math
    builder.addLine("        let localRandomValue = Math.random();");
    builder.addLine("            finalLookupIndex = Math.floor(newCount * lookupValue);");
    builder.addLine("            finalLookupIndex = Math.min(finalLookupIndex, newCount - 1);");
        	int         indexValueInt = (int) Math.floor(indexValue);
    builder.addLine("        let localRandomValue = Math.random();");
    builder.addLine("            finalLookupIndex = Math.floor(newCount * lookupValue);");
    builder.addLine("            finalLookupIndex = Math.min(finalLookupIndex, newCount - 1);");
        	int         indexValueInt = (int) Math.floor(indexValue);
Possible variable Mod
    builder.addLine("          HDLmBuildError('Trace', 'Mod', 35, errorText);");
    builder.addLine("            HDLmBuildError('Error', 'Mod', 16, errorText);");
    builder.addLine("          HDLmBuildError('Error', 'Mod', 31, errorText);");
    builder.addLine("      HDLmBuildError('Trace', 'Mod', 2, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'Mod', 35, errorText);");
    builder.addLine("            HDLmBuildError('Error', 'Mod', 16, errorText);");
    builder.addLine("          HDLmBuildError('Error', 'Mod', 31, errorText);");
    builder.addLine("      HDLmBuildError('Trace', 'Mod', 2, errorText);");
Possible variable Modification
    builder.addLine("    let errorText = \"Modification \" + matchError + \" - \";");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("    let errorText = \"Modification \" + matchError + \" - \";");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
Possible variable Modifications
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
Possible variable MutationObserver
    builder.addLine("  let HDLmObsObserver = new MutationObserver(HDLmObsCallback);");
    builder.addLine("  let HDLmObsObserver = new MutationObserver(HDLmObsCallback);");
Possible variable N
    builder.addLine("    inStr = inStr.replace(/N/g,'\u0ea5');");
    builder.addLine("    inStr = inStr.replace(/N/g,'\u0ea5');");
Possible variable No
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
Possible variable Node
    builder.addLine("        postTrace.findtype = 'Node identifier';");
    builder.addLine("        postTrace.findtype = 'Node identifier';");
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
Possible variable NodeIden
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        HDLmBuildError('Error', 'NodeIden', 40, errorText);");
    builder.addLine("      HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        HDLmBuildError('Error', 'NodeIden', 40, errorText);");
    builder.addLine("      HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
Possible variable Null
    builder.addLine("            matchError = 'Null lookup value';");
    builder.addLine("            matchError = 'Null lookup value';");
Possible variable NullPointerException
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
Possible variable Number
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
Possible variable O
    builder.addLine("    inStr = inStr.replace(/O/g,'\u0ea7');");
    builder.addLine("    inStr = inStr.replace(/O/g,'\u0ea7');");
Possible variable Object
    builder.addLine("      let postTrace = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          let   localUpdates = new Object();");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("                let localUpdates = new Object();");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("        let localUpdates = new Object();");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("    let nodeAttributeKeys = Object.keys(nodeAttributes);");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      Object.getOwnPropertyNames(obj).forEach(p => result.add(p));");
    builder.addLine("      obj = Object.getPrototypeOf(obj);");
    builder.addLine("    let localUpdates = new Object();");
    builder.addLine("    Object.keys(window).forEach(key => {"); 
    builder.addLine("  let HDLmSavedUpdates = new Object();");
    builder.addLine("  let HDLmSavedExtracts = new Object();");
    builder.addLine("  let HDLmSavedNotifies = new Object();");
    builder.addLine("      let postTrace = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          let   localUpdates = new Object();");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("                let localUpdates = new Object();");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("        let localUpdates = new Object();");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("    let nodeAttributeKeys = Object.keys(nodeAttributes);");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      Object.getOwnPropertyNames(obj).forEach(p => result.add(p));");
    builder.addLine("      obj = Object.getPrototypeOf(obj);");
    builder.addLine("    let localUpdates = new Object();");
    builder.addLine("    Object.keys(window).forEach(key => {"); 
    builder.addLine("  let HDLmSavedUpdates = new Object();");
    builder.addLine("  let HDLmSavedExtracts = new Object();");
    builder.addLine("  let HDLmSavedNotifies = new Object();");
Possible variable P
    builder.addLine("    inStr = inStr.replace(/P/g,'\u0eaa');");
    builder.addLine("    inStr = inStr.replace(/P/g,'\u0eaa');");
Possible variable POST
    builder.addLine("    xHttpReq.open('POST', urlVal);");
    builder.addLine("    httpReq.open('POST', urlStr);");
    builder.addLine("    xHttpReq.open('POST', urlVal);");
    builder.addLine("    httpReq.open('POST', urlStr);");
Possible variable Path
    builder.addLine("        matchError = 'Path value mismatch';");
    builder.addLine("        matchError = 'Path value mismatch';");
Possible variable Protocol
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
Possible variable Q
    builder.addLine("    inStr = inStr.replace(/Q/g,'\u0eab');");
    builder.addLine("    inStr = inStr.replace(/Q/g,'\u0eab');");
Possible variable R
    builder.addLine("    inStr = inStr.replace(/R/g,'\u0ead');");
    builder.addLine("    inStr = inStr.replace(/R/g,'\u0ead');");
Possible variable RegExp
    builder.addLine("        matchRe = new RegExp(curMod.path.substr(2, curModLen-3));");
    builder.addLine("        matchRe = new RegExp(curMod.path.substr(2, curModLen-3));");
Possible variable S
    builder.addLine("    inStr = inStr.replace(/S/g,'\u0eb9');");
    builder.addLine("    inStr = inStr.replace(/S/g,'\u0eb9');");
Possible variable Selector
    builder.addLine("        postTrace.findtype = 'CSS Selector';");
    builder.addLine("        postTrace.findtype = 'CSS Selector';");
Possible variable Server
		  String  errorText = "Server name string passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
Possible variable Session
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
Possible variable Set
    builder.addLine("    let result = new Set();");
    builder.addLine("    let result = new Set();");
Possible variable Site
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
Possible variable String
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
                                    String secureHostName, 
                                    String hostName,
                                    String divisionName,
                                    String siteName,
                                    String serverName) {
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
    String          actualJS;
    String          fixedJSName = null;
    String        sessionIdJava = sessionObj.getSessionId();
    String        sessionIndexStr = sessionObj.getIndex();
    String        sessionParametersStr = sessionObj.getParameters();
    builder.addLine("        rv += String(curValue);");
    builder.addLine("        postTraceName += String(nodeCounter-1)");
    builder.addLine("          postTraceName += String(nodeCounter-1);");
    builder.addLine("          postTraceName += String(nodeCounter-1);");
    String      newLine;
    String  logRuleMatchingString;
    String   forceSelectString = HDLmDefines.getString("HDLMFORCEVALUE");
    	String  newName = HDLmMod.replaceInString(mod.getName());
          String  curValue = mod.getValues().get(i);
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
            String  curLine = curValues.get(j);
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
        	String        ruleName = ruleJsonElement.getAsString();
            String  choiceJsonString = choiceJsonElement.getAsString();
    String   protocolStringGetPHash;
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
	    String  key = entry.getKey();
	    String  value = entry.getValue();
    String   protocolStringLower;
    String  modificationName = HDLmDefines.getString("HDLMLOADPAGEMODNAME");
    String  modificationType = HDLmModTypes.VISIT.toString().toLowerCase();
		  String  curStr;
		  String  actualJSAdjusted = actualJSAdjustedBuilder.toString();
      final static String  jsonString = 
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
                                    String secureHostName, 
                                    String hostName,
                                    String divisionName,
                                    String siteName,
                                    String serverName) {
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
    String          actualJS;
    String          fixedJSName = null;
    String        sessionIdJava = sessionObj.getSessionId();
    String        sessionIndexStr = sessionObj.getIndex();
    String        sessionParametersStr = sessionObj.getParameters();
    builder.addLine("        rv += String(curValue);");
    builder.addLine("        postTraceName += String(nodeCounter-1)");
    builder.addLine("          postTraceName += String(nodeCounter-1);");
    builder.addLine("          postTraceName += String(nodeCounter-1);");
    String      newLine;
    String  logRuleMatchingString;
    String   forceSelectString = HDLmDefines.getString("HDLMFORCEVALUE");
    	String  newName = HDLmMod.replaceInString(mod.getName());
          String  curValue = mod.getValues().get(i);
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
            String  curLine = curValues.get(j);
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
        	String        ruleName = ruleJsonElement.getAsString();
            String  choiceJsonString = choiceJsonElement.getAsString();
    String   protocolStringGetPHash;
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
	    String  key = entry.getKey();
	    String  value = entry.getValue();
    String   protocolStringLower;
    String  modificationName = HDLmDefines.getString("HDLMLOADPAGEMODNAME");
    String  modificationType = HDLmModTypes.VISIT.toString().toLowerCase();
		  String  curStr;
		  String  actualJSAdjusted = actualJSAdjustedBuilder.toString();
      final static String  jsonString = 
Possible variable StringBuilder
		  StringBuilder   actualJSAdjustedBuilder = new StringBuilder();
		  StringBuilder   actualJSAdjustedBuilder = new StringBuilder();
		  StringBuilder   actualJSAdjustedBuilder = new StringBuilder();
		  StringBuilder   actualJSAdjustedBuilder = new StringBuilder();
Possible variable SuppressWarnings
  @SuppressWarnings("unused")
  @SuppressWarnings("unused")
Possible variable T
    builder.addLine("    inStr = inStr.replace(/T/g,'\u0ebb');");
    builder.addLine("    inStr = inStr.replace(/T/g,'\u0ebb');");
Possible variable T01
        "      \"2024-06-13T01:51:52Z\"," +
        "      \"2024-06-13T01:51:52Z\"," +
Possible variable To
        "        \"Change Add To Cart\"" +
        "        \"Change Add To Cart\"" +
Possible variable Trace
    builder.addLine("          HDLmBuildError('Trace', 'Mod', 35, errorText);");
    builder.addLine("      HDLmBuildError('Trace', 'Mod', 2, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("      HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'Mod', 35, errorText);");
    builder.addLine("      HDLmBuildError('Trace', 'Mod', 2, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("      HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
Possible variable U
    builder.addLine("    inStr = inStr.replace(/U/g,'\u0ebd');");
    builder.addLine("    inStr = inStr.replace(/U/g,'\u0ebd');");
Possible variable URL
    builder.addLine("              let nodeURL = new URL(attributeValue);");
    builder.addLine("            let nodeURL = new URL(nodeSrc);");
    builder.addLine("    let urlObj = new URL(urlStr);");
    builder.addLine("              let nodeURL = new URL(attributeValue);");
    builder.addLine("            let nodeURL = new URL(nodeSrc);");
    builder.addLine("    let urlObj = new URL(urlStr);");
Possible variable USEPROXYHOST
    builder.addLine("            if (attributeRequest.toUpperCase() == 'USEPROXYHOST') {");
    builder.addLine("            if (attributeRequest.toUpperCase() == 'USEPROXYHOST') {");
Possible variable V
    builder.addLine("    inStr = inStr.replace(/V/g,'\u0ec0');");
    builder.addLine("    inStr = inStr.replace(/V/g,'\u0ec0');");
Possible variable W
    builder.addLine("    inStr = inStr.replace(/W/g,'\u0ec4');");
    builder.addLine("    inStr = inStr.replace(/W/g,'\u0ec4');");
Possible variable X
    builder.addLine("    inStr = inStr.replace(/X/g,'\u0ec6');");
    builder.addLine("    inStr = inStr.replace(/X/g,'\u0ec6');");
Possible variable XMLHttpRequest
    builder.addLine("    let xHttpReq = new XMLHttpRequest();");
    builder.addLine("    let httpReq = new XMLHttpRequest();");
    builder.addLine("    let xHttpReq = new XMLHttpRequest();");
    builder.addLine("    let httpReq = new XMLHttpRequest();");
Possible variable XPath
    builder.addLine("        postTrace.findtype = 'XPath';");
    builder.addLine("        postTrace.findtype = 'XPath';");
Possible variable XPathResult
    builder.addLine("                                       XPathResult.ORDERED_NODE_ITERATOR_TYPE,");
    builder.addLine("                                       XPathResult.ORDERED_NODE_ITERATOR_TYPE,");
Possible variable Y
    builder.addLine("    inStr = inStr.replace(/Y/g,'\u0ec8');");
    builder.addLine("    inStr = inStr.replace(/Y/g,'\u0ec8');");
Possible variable Yes
    builder.addLine("  curMod.values = [ 'Yes' ];"); 
    builder.addLine("  curMod.values = [ 'Yes' ];"); 
Possible variable Z
    builder.addLine("    inStr = inStr.replace(/Z/g,'\u0ecd');");
        "      \"2024-06-13T01:51:52Z\"," +
    builder.addLine("    inStr = inStr.replace(/Z/g,'\u0ecd');");
        "      \"2024-06-13T01:51:52Z\"," +
Possible variable a
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
Possible variable accent
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
Possible variable actual
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
Possible variable actualJS
    String          actualJS;
      actualJS = HDLmUtility.fileGetContents("HDLmBuildJsOld.txt");
      return actualJS;
        actualJS = HDLmUtility.fileGetContents(fixedJSName);
        return actualJS;
    actualJS = builder.getLinesWithSuffix("\r\n");
		  actualJSLen = actualJS.length();
		  	char  curChar = actualJS.charAt(i);
    return actualJS;
    String          actualJS;
      actualJS = HDLmUtility.fileGetContents("HDLmBuildJsOld.txt");
      return actualJS;
        actualJS = HDLmUtility.fileGetContents(fixedJSName);
        return actualJS;
    actualJS = builder.getLinesWithSuffix("\r\n");
		  actualJSLen = actualJS.length();
		  	char  curChar = actualJS.charAt(i);
    return actualJS;
Possible variable actualJSAdjusted
		  String  actualJSAdjusted = actualJSAdjustedBuilder.toString();
		  		                      actualJSAdjusted);
		  String  actualJSAdjusted = actualJSAdjustedBuilder.toString();
		  		                      actualJSAdjusted);
Possible variable actualJSAdjustedBuilder
		  StringBuilder   actualJSAdjustedBuilder = new StringBuilder();
		  	actualJSAdjustedBuilder.append(curStr);
		  String  actualJSAdjusted = actualJSAdjustedBuilder.toString();
		  StringBuilder   actualJSAdjustedBuilder = new StringBuilder();
		  	actualJSAdjustedBuilder.append(curStr);
		  String  actualJSAdjusted = actualJSAdjustedBuilder.toString();
Possible variable actualJSLen
		  int             actualJSLen;
		  actualJSLen = actualJS.length();
		  for (i = 0; i < actualJSLen; i++) {
		  int             actualJSLen;
		  actualJSLen = actualJS.length();
		  for (i = 0; i < actualJSLen; i++) {
Possible variable align
    builder.addLine("                curNode.style.setProperty('text-align', 'center');");
    builder.addLine("                curNode.style.setProperty('text-align', 'center');");
Possible variable all
    builder.addLine("    \"all\":   3");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugNodeIdenEnabled\", 'all');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
    builder.addLine("    \"all\":   3");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugNodeIdenEnabled\", 'all');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
Possible variable application
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
Possible variable array
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
Possible variable arrayEntry
    Double   arrayEntry;
      arrayEntry = sessionParametersArray.get(i);
      if (arrayEntry == null)
        newLine += arrayEntry;
    Double   arrayEntry;
      arrayEntry = sessionParametersArray.get(i);
      if (arrayEntry == null)
        newLine += arrayEntry;
Possible variable attribute
    builder.addLine("        case 'attribute': {");
    builder.addLine("              postTrace.matcherror = 'attribute';");
    builder.addLine("        case 'attribute': {");
    builder.addLine("              postTrace.matcherror = 'attribute';");
Possible variable attributes
    builder.addLine("        searchObj['attributes'] = searchAttrs;");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("        searchObj['attributes'] = searchAttrs;");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
Possible variable b
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
Possible variable background
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("              if (curModExtra == 'background-image') {");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('background-image');");
    builder.addLine("      let backStr = computedStyle['background-image'];");
                                      "'background-color: yellow');");
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("              if (curModExtra == 'background-image') {");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('background-image');");
    builder.addLine("      let backStr = computedStyle['background-image'];");
                                      "'background-color: yellow');");
Possible variable bestclass
    builder.addLine("        if (nodeAttributes.hasOwnProperty('bestclass'))");
    builder.addLine("          nodeClass = nodeAttributes['bestclass'];");
    builder.addLine("      if (nodeAttributeKey == 'bestclass')");
    builder.addLine("        if (nodeAttributes.hasOwnProperty('bestclass'))");
    builder.addLine("          nodeClass = nodeAttributes['bestclass'];");
    builder.addLine("      if (nodeAttributeKey == 'bestclass')");
Possible variable boolean
    boolean         useCreateFixedJS = false;
    	boolean   fileExists = HDLmUtility.fileExists(fixedJSName);
    builder.addLine("          typeValue == 'boolean' ||");
    boolean   logIsDebugEnabled = LOG.isDebugEnabled();
    boolean         useCreateFixedJS = false;
    	boolean   fileExists = HDLmUtility.fileExists(fixedJSName);
    builder.addLine("          typeValue == 'boolean' ||");
    boolean   logIsDebugEnabled = LOG.isDebugEnabled();
Possible variable break
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("            break;");
    builder.addLine("              break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("              break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("                break;");
    builder.addLine("                break;");
    builder.addLine("                  break;");
    builder.addLine("                  break;");
    builder.addLine("                break;");
    builder.addLine("                break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("      break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("      break;");
    builder.addLine("      break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("            break;");
    builder.addLine("              break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("              break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("              break;");
    builder.addLine("            break;");
    builder.addLine("                break;");
    builder.addLine("                break;");
    builder.addLine("                  break;");
    builder.addLine("                  break;");
    builder.addLine("                break;");
    builder.addLine("                break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("      break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("        break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("          break;");
    builder.addLine("        break;");
    builder.addLine("      break;");
    builder.addLine("      break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
    builder.addLine("            break;");
Possible variable builder
    HDLmBuildLines  builder;
    builder = new HDLmBuildLines("JS");
    builder.addLine("<script>");
    builder.addLine("  \"use strict\";");
    builder.addLine("  let HDLmNodeIdenTracing = {");
    builder.addLine("    \"none\":  0,");
    builder.addLine("    \"off\":   1,");
    builder.addLine("    \"error\": 2,");
    builder.addLine("    \"all\":   3");
    builder.addLine("  };");
    builder.addLine("  document.addEventListener(\"keydown\", event => {");
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugRulesEnabled\", 'true');");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugNodeIdenEnabled\", 'all');");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("      HDLmToggleStyleSheetEnablement();");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionPostRuleTracingEnabled\", 'true');");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionIgnoreProbability\", 'true');");
    builder.addLine("  });");
    builder.addLine("  function HDLmApplyMod(pathValueStr,");
    builder.addLine("                        curMod,");
    builder.addLine("                        sessionIdJS,");
    builder.addLine("                        sessionIndexValue,");
    builder.addLine("                        parametersArray,");
    builder.addLine("                        proxyDomain,");
    builder.addLine("                        hostNameValue,");
    builder.addLine("                        divisionNameValue,");
    builder.addLine("                        siteNameValue,");
    builder.addLine("                        proxySecureDomain,");
    builder.addLine("                        forceSelectStringValue,");
    builder.addLine("                        logRuleMatching,");
    builder.addLine("                        readyState) {");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoHostName\", hostNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoDivisionName\", divisionNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoSiteName\", siteNameValue);");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
    builder.addLine("      logRuleMatching = true;");
    builder.addLine("    let nodeIdenTracing = HDLmNodeIdenTracing.off;");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
    builder.addLine("      nodeIdenTracing = HDLmNodeIdenTracing.all;");
    builder.addLine("    let postRuleTracing = false;");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
    builder.addLine("      postRuleTracing = true;");
    builder.addLine("    let matchFound = false;");
    builder.addLine("    let matchError = '';");
    builder.addLine("    let matchModifiedName = hostNameValue + '/' + divisionNameValue + '/' + siteNameValue + '/' + curMod.name");
    builder.addLine("    matchModifiedName = HDLmReplaceInString(matchModifiedName);");
    builder.addLine("    let curType = curMod.type;");
    builder.addLine("    while (true) {");
    builder.addLine("      let postTrace = new Object();");
    builder.addLine("      if (curMod.prob < 100.0) {");
    builder.addLine("        let localRandomValue = Math.random();");
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
    builder.addLine("        if (ignoreProbability == null)");
    builder.addLine("          ignoreProbability = 'false';");
    builder.addLine("        if (localRandomValue * 100.0 > curMod.prob &&");
    builder.addLine("            ignoreProbability != 'true') {");
    builder.addLine("          matchError = 'probability';");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, null,");
    builder.addLine("                          sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                          null, null,");
    builder.addLine("                          hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                          curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("            postTrace.matcherror = matchError;");
    builder.addLine("            HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      if (curMod.enabled != true) {");
    builder.addLine("        matchError = 'disabled';");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          HDLmSaveChange(localUpdates, null,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         null, null,");
    builder.addLine("                         hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          postTrace.matcherror = matchError;");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      let matchRes;");
    builder.addLine("      let matchRe;");
    builder.addLine("      if (curMod.pathre === true) {");
    builder.addLine("        let curModLen = curMod.path.length;");
    builder.addLine("        matchRe = new RegExp(curMod.path.substr(2, curModLen-3));");
    builder.addLine("        matchRes = matchRe.test(pathValueStr);");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          postTrace.matchpathre = curMod.pathre;");
    builder.addLine("          postTrace.matchpath = curMod.path;");
    builder.addLine("          postTrace.matchpathvalue = pathValueStr;");
    builder.addLine("          postTrace.matchmatch = matchRes;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        matchRes = (curMod.path === pathValueStr);");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          postTrace.matchpathre = curMod.pathre;");
    builder.addLine("          postTrace.matchpath = curMod.path;");
    builder.addLine("          postTrace.matchpathvalue = pathValueStr;");
    builder.addLine("          postTrace.matchmatch = matchRes;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      if (matchRes == false) {");
    builder.addLine("        matchError = 'Path value mismatch';");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          HDLmSaveChange(localUpdates, null,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         null, null,");
    builder.addLine("                         hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          postTrace.matcherror = matchError;");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        if (logRuleMatching == true) {");
    builder.addLine("          let errorText = HDLmBuildErrorRule(curMod, 'match', pathValueStr);");
    builder.addLine("          HDLmBuildError('Trace', 'Mod', 35, errorText);");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      const fontNames = {");
    builder.addLine("                          'fontcolor':'color',");
    builder.addLine("                          'fontfamily':'font-family',");
    builder.addLine("                          'fontkerning':'font-kerning',");
    builder.addLine("                          'fontsize':'font-size',");
    builder.addLine("                          'fontstyle':'font-style',");
    builder.addLine("                          'fontweight':'font-weight'");
    builder.addLine("                        }");
    builder.addLine("      let parameterNumber = -1;");
    builder.addLine("      let finalLookupIndex = 0;");
    builder.addLine("      let lookupValue = -1.0;");
    builder.addLine("      let sessionIndexValueUsed = false;");
    builder.addLine("      let tempLookupIndex = HDLmGetLookupIndex(curMod.name);");
    builder.addLine("      if (typeof(tempLookupIndex) != 'undefined' &&");
    builder.addLine("          tempLookupIndex != null) {");
    builder.addLine("        lookupValue = sessionIndexValue;");
    builder.addLine("        sessionIndexValueUsed = true;");
    builder.addLine("        finalLookupIndex = tempLookupIndex;");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        parameterNumber = curMod.parameter;");
    builder.addLine("        if (parameterNumber != null &&");
    builder.addLine("            parameterNumber >= 0 &&");
    builder.addLine("            parameterNumber < parametersArray.length)");
    builder.addLine("          lookupValue = parametersArray[parameterNumber];");
    builder.addLine("      }");
    builder.addLine("      let nodeList = HDLmFind(curMod, nodeIdenTracing, postRuleTracing, postTrace);");
    builder.addLine("      let nodeListLength = nodeList.length;");
    builder.addLine("      if (nodeListLength == 0 && curType != 'visit') {");
    builder.addLine("        matchError = 'nonodes';");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          let   localUpdates = new Object();");
    builder.addLine("          HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         null, null,");
    builder.addLine("                         hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          postTrace.matcherror = matchError;");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      switch (curType) {");
    builder.addLine("        case 'attribute': {");
    builder.addLine("          let curModExtra = curMod.extra;");
    builder.addLine("          let curModExtraArray = curModExtra.split('/');");
    builder.addLine("          let attributeName = curModExtraArray[0];");
    builder.addLine("          let attributeRequest = curModExtraArray[1]");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            matchFound = true;");
    builder.addLine("            if (HDLmIncrementUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("              break;");
    builder.addLine("            HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            if (attributeRequest.toUpperCase() == 'USEPROXYHOST') {");
    builder.addLine("              let attributeValue = curNode.getAttribute(attributeName);");
    builder.addLine("              let oldText = attributeValue;");
    builder.addLine("              let nodeURL = new URL(attributeValue);");
    builder.addLine("              nodeURL.host = proxyDomain;");
    builder.addLine("              let newText = nodeURL.href;");
    builder.addLine("              curNode.setAttribute(attributeName, nodeURL.href);");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("              HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                             sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                             null, null,");
    builder.addLine("                             hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                             curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                             oldText, newText);");
    builder.addLine("              postTrace.matcherror = 'attribute';");
    builder.addLine("              HDLmSendUpdates(localUpdates, 'href', '1.0', postTrace);");
    builder.addLine("            }");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'extract': {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            matchFound = true;");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("              break;");
    builder.addLine("            HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            let oldText;");
    builder.addLine("            if (HDLmSavedExtracts.hasOwnProperty(curMod.name))");
    builder.addLine("              oldText = HDLmSavedExtracts[curMod.name];");
    builder.addLine("            else");
    builder.addLine("              oldText = null;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           null, null,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           oldText, null);");
    builder.addLine("            let localReason = 'extract';");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                curModExtra          != '')");
    builder.addLine("              localReason = curModExtra;");
    builder.addLine("            postTrace.matcherror = 'extract';");
    builder.addLine("            HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'modify': {");
    builder.addLine("          if (proxySecureDomain == null) {");
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
    builder.addLine("            HDLmBuildError('Error', 'Mod', 16, errorText);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            if (curModExtra.toUpperCase() !== 'FIXIFRAMESRC')");
    builder.addLine("              break;");
    builder.addLine("            matchFound = true;");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("              break;");
    builder.addLine("            HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            let nodeSrc = curNode.getAttribute('src');");
    builder.addLine("            let oldText = nodeSrc;");
    builder.addLine("            let nodeURL = new URL(nodeSrc);");
    builder.addLine("            nodeURL.host = proxySecureDomain;");
    builder.addLine("            let newText = nodeURL.href + '&HDLmSessionId=' + sessionIdJS;");
    builder.addLine("            curNode.setAttribute('src', newText);");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           null, null,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           null, null);");
    builder.addLine("            let localReason = 'modify';");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                curModExtra          != '')");
    builder.addLine("              localReason = curModExtra;");
    builder.addLine("            postTrace.matcherror = 'modify';");
    builder.addLine("            HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'notify': {");
    builder.addLine("          let sendUpdates = false;");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let nodeSend = nodeList[i];");
    builder.addLine("            if (HDLmGetUpdateCount(nodeSend, matchModifiedName, readyState) == 0) {");
    builder.addLine("              sendUpdates = true;");
    builder.addLine("              break;");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          let curModExtra = curMod.extra;");
    builder.addLine("          if (sendUpdates) {");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           null, null,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           null, null);");
    builder.addLine("            let localReason = 'notify';");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                curModExtra          != '')");
    builder.addLine("              localReason = curModExtra;");
    builder.addLine("            postTrace.matcherror = 'notify';");
    builder.addLine("            HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("          }");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            matchFound = true;");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("              break;");
    builder.addLine("            HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            curNode.addEventListener('click', (function() {");
    builder.addLine("              return function() {");
    builder.addLine("                let localUpdates = new Object();");
    builder.addLine("                if (curMod.valuesCount <= 0) {");
    builder.addLine("                  HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                                 curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                                 null, null);");
    builder.addLine("                }");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                  let searchText = curMod.values[j];");
    builder.addLine("                  searchText = HDLmModifySearch(searchText);");
    builder.addLine("                  let searchValue;");
    builder.addLine("                  if (HDLmSavedNotifies.hasOwnProperty(searchText))");
    builder.addLine("                    searchValue = HDLmSavedNotifies[searchText];");
    builder.addLine("                  else");
    builder.addLine("                    searchValue = null;");
    builder.addLine("                  HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                                 curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                                 searchValue, null);");
    builder.addLine("                }");
    builder.addLine("                let localReason = 'notify';");
    builder.addLine("                let curModExtra = curMod.extra;");
    builder.addLine("                if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                    curModExtra          != null        &&");
    builder.addLine("                    curModExtra          != '')");
    builder.addLine("                  localReason = curModExtra;");
    builder.addLine("                postTrace.matcherror = 'click';");
    builder.addLine("                HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("              }");
    builder.addLine("            })());");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'visit': {");
    builder.addLine("          let testFlag = false;");
    builder.addLine("          HDLmHandleVisitRequest(curMod.extra, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 parameterNumber, lookupValue,");
    builder.addLine("                                 hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                 pathValueStr);");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'changeattrs':");
    builder.addLine("        case 'changenodes':");
    builder.addLine("        case 'fontcolor':");
    builder.addLine("        case 'fontfamily':");
    builder.addLine("        case 'fontkerning':");
    builder.addLine("        case 'fontsize':");
    builder.addLine("        case 'fontstyle':");
    builder.addLine("        case 'fontweight':");
    builder.addLine("        case 'height':");
    builder.addLine("        case 'image':");
    builder.addLine("        case 'order':");
    builder.addLine("        case 'remove':");
    builder.addLine("        case 'replace':");
    builder.addLine("        case 'script':");
    builder.addLine("        case 'style':");
    builder.addLine("        case 'text':");
    builder.addLine("        case 'textchecked':");
    builder.addLine("        case 'title':");
    builder.addLine("        case 'width': {");
    builder.addLine("          let newTexts = curMod.values;");
    builder.addLine("          let newCount = curMod.valuesCount;");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("            finalLookupIndex = Math.floor(newCount * lookupValue);");
    builder.addLine("            finalLookupIndex = Math.min(finalLookupIndex, newCount - 1);");
    builder.addLine("          }");
    builder.addLine("          let forceSelectFound = false;");
    builder.addLine("          let newText;");
    builder.addLine("          if (lookupValue != null) {");
    builder.addLine("            if (finalLookupIndex >= 0)");
    builder.addLine("              newText = newTexts[finalLookupIndex];");
    builder.addLine("          }");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("            if (newTexts[i].startsWith(forceSelectStringValue)) {");
    builder.addLine("              newText = newTexts[i].substring(forceSelectStringValue.length);");
    builder.addLine("              finalLookupIndex = i;");
    builder.addLine("              forceSelectFound = true;");
    builder.addLine("              break;");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (lookupValue == null &&");
    builder.addLine("              forceSelectFound == false) {");
    builder.addLine("            matchError = 'Null lookup value';");
    builder.addLine("            if (postRuleTracing == true) {");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("              HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                             sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                             null, null,");
    builder.addLine("                             hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                             curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                             null, null);");
    builder.addLine("              postTrace.matcherror = matchError;");
    builder.addLine("              HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("            }");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            matchError = 'Fired';");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            let oldText;");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("              oldText = HDLmGetAttributesString(curNode);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("              oldText = curNode.outerHTML;");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("                     curType == 'fontfamily'  ||");
    builder.addLine("                     curType == 'fontkerning' ||");
    builder.addLine("                     curType == 'fontsize'    ||");
    builder.addLine("                     curType == 'fontstyle'   ||");
    builder.addLine("                     curType == 'fontweight') {");
    builder.addLine("              let newName = fontNames[curType];");
    builder.addLine("              oldText = '';");
    builder.addLine("              if (curNode.style.hasOwnProperty(newName))");
    builder.addLine("                oldText = curNode.style.getPropertyValue(newName);");
    builder.addLine("              else if (curNode.hasAttribute(newName))");
    builder.addLine("                oldText = curNode.getAttribute(newName);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("                     curType == 'width') {");
    builder.addLine("              oldText = '';");
    builder.addLine("              if (curNode.hasAttribute(curType))");
    builder.addLine("                oldText = curNode.getAttribute(curType);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              oldText = '';");
    builder.addLine("              if (curNode.hasAttribute('src')) {");
    builder.addLine("                oldText = curNode.getAttribute('src');");
    builder.addLine("                if (oldText.startsWith('http'))");
    builder.addLine("                  oldText = HDLmRemoveProtocol(oldText);");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("              oldText = '';");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("              oldText = '';");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("              oldText = '';");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              oldText = '';");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("              oldText = '';");
    builder.addLine("              let curModSplit = HDLmStyleSplitString(curModExtra);");
    builder.addLine("              let curModSplitLength = curModSplit.length;");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("                let curStyle = curModSplit[i];");
    builder.addLine("                let curValue = '';");
    builder.addLine("                if (curNode.hasAttribute('style')) {");
    builder.addLine("                  if (curNode.style.hasOwnProperty(curStyle))");
    builder.addLine("                    curValue = curNode.style.getPropertyValue(curStyle);");
    builder.addLine("                }");
    builder.addLine("                if (curValue == '' &&");
    builder.addLine("                    curNode.hasAttribute(curStyle)) {");
    builder.addLine("                  curValue = curNode.getAttribute(curStyle);");
    builder.addLine("                }");
    builder.addLine("                if (curValue != '') {");
    builder.addLine("                  if (oldText != '')");
    builder.addLine("                    oldText += ' '");
    builder.addLine("                  oldText += curValue;");
    builder.addLine("                }");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'text'        ||");
    builder.addLine("                     curType == 'textchecked' ||");
    builder.addLine("                     curType == 'title') {");
    builder.addLine("              oldText = curNode.textContent;");
    builder.addLine("            }");
    builder.addLine("            if (curType == 'textchecked') {");
    builder.addLine("              let textMatch = HDLmCheckTextMatches(oldText, curModExtra,");
    builder.addLine("                                                   matchError, postTrace, postRuleTracing,");
    builder.addLine("                                                   parametersArray, sessionIdJS,");
    builder.addLine("                                                   parameterNumber, lookupValue,");
    builder.addLine("                                                   hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                                   pathValueStr);");
    builder.addLine("              if (!textMatch) {");
    builder.addLine("                matchError = 'textunequal';");
    builder.addLine("                continue;");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            matchFound = true;");
    builder.addLine("            let matchUpdateCount = HDLmGetUpdateCount(curNode, matchModifiedName, readyState);");
    builder.addLine("            if (curType == 'changenodes') {");
    builder.addLine("              if (matchUpdateCount > 255)");
    builder.addLine("                break;");
    builder.addLine("              let testFlag = true;");
    builder.addLine("              let forceBreak = HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("                                               matchError, postTrace, postRuleTracing,");
    builder.addLine("                                               parametersArray, sessionIdJS,");
    builder.addLine("                                               sessionIndexValue, parameterNumber, lookupValue,");
    builder.addLine("                                               hostNameValue, divisionNameValue, siteNameValue,");
    builder.addLine("                                               curMod, pathValueStr, oldText);");
    builder.addLine("              if (forceBreak == true)");
    builder.addLine("                break;");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (matchUpdateCount > 2)");
    builder.addLine("                if (oldText == newText ||");
    builder.addLine("                    oldText.startsWith('data:'))");
    builder.addLine("                  break;");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'remove' ||");
    builder.addLine("                curType == 'replace') {");
    builder.addLine("              let parentNode = curNode.parentNode;");
    builder.addLine("              if (parentNode != null) {");
    builder.addLine("                if (HDLmGetUpdateCount(parentNode, matchModifiedName, readyState) > 0)");
    builder.addLine("                  break;");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'textchecked') {");
    builder.addLine("              if (matchUpdateCount > 1)");
    builder.addLine("                break;");
    builder.addLine("            }");
    builder.addLine("            else {");
    builder.addLine("              if (matchUpdateCount > 0)");
    builder.addLine("                break;");
    builder.addLine("            }");
    builder.addLine("            if (curType == 'remove' ||");
    builder.addLine("                curType == 'replace') {");
    builder.addLine("              let parentNode = curNode.parentNode;");
    builder.addLine("              HDLmIncrementUpdateCount(parentNode, matchModifiedName);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              if (readyState == 'complete')");
    builder.addLine("                HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            }");
    builder.addLine("            else {");
    builder.addLine("              HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            }");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("              if (newText.trim() != '')");
    builder.addLine("                HDLmChangeAttributes(curNode, newText);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("              let testFlag = false;");
    builder.addLine("              HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("                              matchError, postTrace, postRuleTracing,");
    builder.addLine("                              sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                              parameterNumber, lookupValue,");
    builder.addLine("                              hostNameValue, divisionNameValue, siteNameValue,");
    builder.addLine("                              curMod, pathValueStr, oldText);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("                     curType == 'fontfamily'  ||");
    builder.addLine("                     curType == 'fontkerning' ||");
    builder.addLine("                     curType == 'fontsize'    ||");
    builder.addLine("                     curType == 'fontstyle'   ||");
    builder.addLine("                     curType == 'fontweight') {");
    builder.addLine("              if (curType == 'fontsize')");
    builder.addLine("                newText = HDLmBuildSuffix(newText, 'px');");
    builder.addLine("              let newName = fontNames[curType];");
    builder.addLine("              curNode.style.setProperty(newName, newText);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("                     curType == 'width') {");
    builder.addLine("              newText = HDLmBuildSuffix(newText, 'px');");
    builder.addLine("              curNode.setAttribute(curType, newText);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (newText.startsWith('//'))");
    builder.addLine("                curNode.setAttribute('src', 'https:' + newText);");
    builder.addLine("              if (newText.startsWith('data:'))");
    builder.addLine("                curNode.setAttribute('src', newText);");
    builder.addLine("              if (1 == 1) {");
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                curNode.style.setProperty('text-align', 'center');");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("              let nodeChildrenLength = curNode.children.length;");
    builder.addLine("              let newOrder = HDLmBuildOrder(newText, nodeChildrenLength);");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("                curNode.appendChild(curNode.children[newOrder[j]]);");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("              if (HDLmCompareCaseInsensitive(newText, 'yes'))");
    builder.addLine("                curNode.remove();");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("              if (newText != '') {");
    builder.addLine("                let parentNode = curNode.parentNode;");
    builder.addLine("                let newNodeObj = JSON.parse(newText);");
    builder.addLine("                let newNode = HDLmBuildNodeFromObject(newNodeObj);");
    builder.addLine("                parentNode.replaceChild(newNode, curNode);");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              if (readyState == 'complete') {");
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
    builder.addLine("                window[functionStr]();");
    builder.addLine("              }");
    builder.addLine("              matchError = readyState;");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("              if (curModExtra == 'background-image') {");
    builder.addLine("                let newData = newText;");
    builder.addLine("                if (newData.startsWith('url')) {");
    builder.addLine("                }");
    builder.addLine("                else if (newData.startsWith('data:')) {");
    builder.addLine("                  newData = 'url(' + newData + ')';");
    builder.addLine("                }");
    builder.addLine("                else if (newData.startsWith('http')) {");
    builder.addLine("                  newData = 'url(' + newData + ')';");
    builder.addLine("                }");
    builder.addLine("                else {");
    builder.addLine("                  if (newData.startsWith('//'))");
    builder.addLine("                    newData = 'url(https:' + newData + ')';");
    builder.addLine("                }");
    builder.addLine("                if (1 == 1) {");
    builder.addLine("                  curNode.style.setProperty(curModExtra, newData);");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                }");
    builder.addLine("                if (1 == 2) {");
    builder.addLine("                  let finalUrl = HDLmGetBackground(curNode, 'junk.jpg');");
    builder.addLine("                }");
    builder.addLine("              }");
    builder.addLine("              else {");
    builder.addLine("                let curModSplit = HDLmStyleSplitString(curModExtra);");
    builder.addLine("                let newTextSplit = HDLmStyleFixValues(newText);");
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("                  let newValue = newTextSplit[i];");
    builder.addLine("                  if (newValue == 'none')");
    builder.addLine("                    continue;");
    builder.addLine("                  curNode.style.setProperty(curModSplit[i], newValue);");
    builder.addLine("                }");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'title' ||");
    builder.addLine("                     curType == 'text'  ||");
    builder.addLine("                     curType == 'textchecked') {");
    builder.addLine("              curNode.textContent = newText;");
    builder.addLine("            }");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           parameterNumber, lookupValue,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           oldText, newText);");
    builder.addLine("            postTrace.matcherror = matchError;");
    builder.addLine("            HDLmSendUpdates(localUpdates, curType, '1.0', postTrace);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        default: {");
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("          HDLmBuildError('Error', 'Mod', 31, errorText);");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      if (matchFound === false) {");
    builder.addLine("        if (matchError === '') {");
    builder.addLine("          matchError = 'nomatch';");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           null, null,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           null, null);");
    builder.addLine("            postTrace.matcherror = matchError;");
    builder.addLine("            HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      break;");
    builder.addLine("    }");
    builder.addLine("    if (matchError != '' &&");
    builder.addLine("        logRuleMatching == true) {");
    builder.addLine("      let errorText = HDLmBuildErrorRule(curMod, matchError, pathValueStr);");
    builder.addLine("      HDLmBuildError('Trace', 'Mod', 2, errorText);");
    builder.addLine("    }");
    builder.addLine("    return matchFound;");
    builder.addLine("  }");
    builder.addLine("  function HDLmArrayJoin(curArray, joinChar) {");
    builder.addLine("    let rv = \"\";");
    builder.addLine("    let arrayType = typeof(curArray);");
    builder.addLine("    if (arrayType == 'undefined') {");
    builder.addLine("      rv = 'undefined';");
    builder.addLine("      return rv;");
    builder.addLine("    }");
    builder.addLine("    if (curArray == null) {");
    builder.addLine("      rv = null;");
    builder.addLine("      return rv;");
    builder.addLine("    }");
    builder.addLine("    let arrayLength = curArray.length;");
    builder.addLine("    if (arrayLength <= 0)");
    builder.addLine("      return rv;");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("      if (i > 0)");
    builder.addLine("        rv += joinChar;");
    builder.addLine("      let curValue = curArray[i];");
    builder.addLine("      if (curValue == null)");
    builder.addLine("        rv += 'null';");
    builder.addLine("      else");
    builder.addLine("        rv += String(curValue);");
    builder.addLine("    }");
    builder.addLine("    return rv;");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildErrorRule(curMod, matchError, pathValueStr) {");
    builder.addLine("    let errorText = \"Modification \" + matchError + \" - \";");
    builder.addLine("    errorText += \"name (\";");
    builder.addLine("    errorText += curMod.name;");
    builder.addLine("    errorText += \")\";");
    builder.addLine("    if (Array.isArray(curMod.find) &&");
    builder.addLine("        curMod.find.length > 0) {");
    builder.addLine("      errorText += \" key (\";");
    builder.addLine("      let findFirst = curMod.find[0];");
    builder.addLine("      errorText += findFirst.attributeName;");
    builder.addLine("      errorText += \")\";");
    builder.addLine("      errorText += \" value (\";");
    builder.addLine("      errorText += findFirst.attributeValue;");
    builder.addLine("      errorText += \")\";");
    builder.addLine("    }");
    builder.addLine("    errorText += ' - ' + pathValueStr;");
    builder.addLine("    return errorText;");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildNodeFromObject(domObj) {");
    builder.addLine("    if (domObj.type != 'Element')");
    builder.addLine("      return null;");
    builder.addLine("    if (domObj.tag == null)");
    builder.addLine("      return null;");
    builder.addLine("    let domNode = document.createElement(domObj.tag);");
    builder.addLine("    let attrObj = domObj.attributes;");
    builder.addLine("    if (attrObj != null) {");
    builder.addLine("      for (let attrObjName in attrObj) {");
    builder.addLine("        domNode.setAttribute(attrObjName, attrObj[attrObjName]);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    let domText = domObj.text;");
    builder.addLine("    if (domText != null) {");
    builder.addLine("      let textNode = document.createTextNode(domText);");
    builder.addLine("      domNode.appendChild(textNode);");
    builder.addLine("    }");
    builder.addLine("    let domSubNodes = domObj.subnodes;");
    builder.addLine("    if (domSubNodes != null) {");
    builder.addLine("      let domSubNodesLength = domSubNodes.length;");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("        let domSubNode = domSubNodes[i];");
    builder.addLine("        let domSubNodeNode = HDLmBuildNodeFromObject(domSubNode);");
    builder.addLine("        if (domSubNodeNode != null)");
    builder.addLine("          domNode.appendChild(domSubNodeNode);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return domNode;");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildOrder(newText, totalLength) {");
    builder.addLine("    newText = newText.replace(/,/g, ' ');");
    builder.addLine("    let newTextArray = newText.split(' ');");
    builder.addLine("    let newIntArray = [];");
    builder.addLine("    let outIntArray = [];");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("      if (newTextArray[i] == '')");
    builder.addLine("        continue;");
    builder.addLine("      let tempInt = parseInt(newTextArray[i]);");
    builder.addLine("      if (typeof(tempInt) != 'number')");
    builder.addLine("        continue;");
    builder.addLine("      newIntArray.push(tempInt);");
    builder.addLine("    }");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("      if (newIntArray.includes(i) == false)");
    builder.addLine("        newIntArray.push(i);");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("      let ix = tempIntArray.indexOf(newIntArray[i]);");
    builder.addLine("      outIntArray.push(ix);");
    builder.addLine("      tempIntArray.splice(ix, 1);");
    builder.addLine("      tempIntArray.push(ix)");
    builder.addLine("    }");
    builder.addLine("    return outIntArray;");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildSuffix(newValue, suffixStr) {");
    builder.addLine("    if ((typeof(newValue) == 'number') &&");
    builder.addLine("        newValue != '')");
    builder.addLine("      newValue += suffixStr;");
    builder.addLine("    return newValue");
    builder.addLine("  }");
    builder.addLine("  function HDLmChangeNodes(curNode, jsonText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("                           matchError, postTrace, postRuleTracing,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           parameterNumber, lookupValue,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue,");
    builder.addLine("                           curMod, pathValueStr, oldText) {");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("    let forceBreak = false;");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("      if (!changesObj.hasOwnProperty(keyValue))");
    builder.addLine("        continue;");
    builder.addLine("      let changesValue = changesObj[keyValue];");
    builder.addLine("      switch (keyValue) {");
    builder.addLine("        case 'text':");
    builder.addLine("        case 'title': {");
    builder.addLine("          if (matchUpdateCount > 0) {");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (testFlag == false)");
    builder.addLine("            curNode.textContent = changesValue;");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'textchecked': {");
    builder.addLine("          let actualText = curNode.textContent;");
    builder.addLine("          let requiredText = changesValue[0];");
    builder.addLine("          let changesMatch = HDLmCheckTextMatches(actualText, requiredText,");
    builder.addLine("                                                  matchError, postTrace, postRuleTracing,");
    builder.addLine("                                                  parametersArray, sessionIdJS,");
    builder.addLine("                                                  parameterNumber, lookupValue,");
    builder.addLine("                                                  hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                                  pathValueStr);");
    builder.addLine("          if (matchUpdateCount > 1) {");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (changesMatch && testFlag == false)");
    builder.addLine("            curNode.textContent = changesValue[1];");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'visit': {");
    builder.addLine("          let countHigh = HDLmHandleVisitRequest(changesValue, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("                                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                                 parameterNumber, lookupValue,");
    builder.addLine("                                                 hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                                 pathValueStr);");
    builder.addLine("          if (countHigh == true)");
    builder.addLine("            forceBreak = true;");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        default: {");
    builder.addLine("          if (matchUpdateCount > 0) {");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (changesValue == null) {");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("              curNode.style.removeProperty(keyValue);");
    builder.addLine("          }");
    builder.addLine("          else  {");
    builder.addLine("            let changesType = typeof changesValue;");
    builder.addLine("            if (changesType == 'number') {");
    builder.addLine("              changesValue = changesValue.toString();");
    builder.addLine("              changesValue += 'px';");
    builder.addLine("            }");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("              curNode.style.setProperty(keyValue, changesValue);");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return forceBreak;");
    builder.addLine("  }");
    builder.addLine("  function HDLmCheckTextMatches(actualText, requiredText,");
    builder.addLine("                                matchError, postTrace, postRuleTracing,");
    builder.addLine("                                parametersArray, sessionIdJS,");
    builder.addLine("                                parameterNumber, lookupValue,");
    builder.addLine("                                hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                pathValueStr) {");
    builder.addLine("    let rv;");
    builder.addLine("    let requiredTextLower = requiredText.toLowerCase();");
    builder.addLine("    let actualTextLower = actualText.toLowerCase();");
    builder.addLine("    if (actualTextLower.indexOf(requiredTextLower) === -1) {");
    builder.addLine("      if (postRuleTracing == true) {");
    builder.addLine("        let localUpdates = new Object();");
    builder.addLine("        matchError = 'textunequal';");
    builder.addLine("        HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                       sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                       parameterNumber, lookupValue,");
    builder.addLine("                       hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                       curMod.path, curMod.type, pathValueStr, actualText, requiredText);");
    builder.addLine("        postTrace.matcherror = matchError;");
    builder.addLine("        HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("      }");
    builder.addLine("      rv = false;;");
    builder.addLine("    }");
    builder.addLine("    else");
    builder.addLine("      rv = true;");
    builder.addLine("    return rv;");
    builder.addLine("  }");
    builder.addLine("  function HDLmClassAddSpecialClass(curNode, curType, extraStr) {");
    builder.addLine("    if (curType == 'order')");
    builder.addLine("      return;");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("      HDLmClassAddEntry(curNode, 'HDLmClassBackground');");
    builder.addLine("      return;");
    builder.addLine("    }");
    builder.addLine("    HDLmClassAddEntry(curNode, 'HDLmClassPrimary');");
    builder.addLine("  }");
    builder.addLine("  function HDLmClassAddCss(passedName, passedRules) {");
    builder.addLine("    var styleTitle = 'HDLmSessionClasses';");
    builder.addLine("    var styleVar = document.createElement('style');");
    builder.addLine("    styleVar.type = 'text/css';");
    builder.addLine("    styleVar.title = styleTitle;");
    builder.addLine("    document.getElementsByTagName('head')[0].appendChild(styleVar);");
    builder.addLine("    styleVar.sheet.insertRule(passedName+\"{\"+passedRules+\"}\", 0);");
    builder.addLine("    var disabledStatus = sessionStorage.getItem(styleTitle + 'Disabled');");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("      disabledStatus = true;");
    builder.addLine("    if (disabledStatus == 'true')");
    builder.addLine("      disabledStatus = true;");
    builder.addLine("    if (disabledStatus == 'false')");
    builder.addLine("      disabledStatus = false;");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("          styleSheet.title == styleTitle) {");
    builder.addLine("        if (styleSheet.disabled != disabledStatus)");
    builder.addLine("          styleSheet.disabled = disabledStatus;");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("  }");
    builder.addLine("  function HDLmClassAddEntry(elementNodeReference, newClass) {");
    builder.addLine("    const elementClasses = elementNodeReference.classList;");
    builder.addLine("    if (elementClasses.length == 0)");
    builder.addLine("      elementClasses.add(newClass);");
    builder.addLine("    else if (elementClasses.contains(newClass) == false)");
    builder.addLine("      elementClasses.add(newClass);");
    builder.addLine("  }");
    builder.addLine("  function HDLmCompareCaseInsensitive(firstStr, secondStr) {");
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
    builder.addLine("  }");
    builder.addLine("  function HDLmErrorToString(errorObj) {");
    builder.addLine("    let newObj = {};");
    builder.addLine("    if (typeof errorObj === 'string') {");
    builder.addLine("      newObj.name = '';");
    builder.addLine("      newObj.message = errorObj;");
    builder.addLine("      newObj.reason = 'exception';");
    builder.addLine("    }");
    builder.addLine("    else {");
    builder.addLine("      newObj.name = errorObj.name;");
    builder.addLine("      newObj.message = errorObj.message;");
    builder.addLine("      newObj.stack = errorObj.stack;");
    builder.addLine("      newObj.reason = 'exception';");
    builder.addLine("    }");
    builder.addLine("    return JSON.stringify(newObj);");
    builder.addLine("  }");
    builder.addLine("  function HDLmFind(curMod, nodeIdenTracing, postRuleTracing, postTrace) {");
    builder.addLine("    let nodeList = [];");
    builder.addLine("    if (curMod.cssselector !== '') {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        postTrace.findtype = 'CSS Selector';");
    builder.addLine("        postTrace.findvalue = curMod.cssselector;");
    builder.addLine("      }");
    builder.addLine("      nodeList = document.querySelectorAll(curMod.cssselector);");
    builder.addLine("    }");
    builder.addLine("    else if (curMod.xpath !== '') {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        postTrace.findtype = 'XPath';");
    builder.addLine("        postTrace.findvalue = curMod.xpath;");
    builder.addLine("      }");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("                                       XPathResult.ORDERED_NODE_ITERATOR_TYPE,");
    builder.addLine("                                       null);");
    builder.addLine("      let thisNode = nodeIter.iterateNext();");
    builder.addLine("      while (thisNode) {");
    builder.addLine("        nodeList.push(thisNode);");
    builder.addLine("        thisNode = nodeIter.iterateNext();");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    else if (curMod.nodeiden !== null) {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        postTrace.findtype = 'Node identifier';");
    builder.addLine("        postTrace.findvalue = curMod.nodeiden;");
    builder.addLine("      }");
    builder.addLine("      nodeList = HDLmFindNodeIden(curMod, nodeIdenTracing, postRuleTracing, postTrace);");
    builder.addLine("    }");
    builder.addLine("    else {");
    builder.addLine("      let findsArray = curMod.find;");
    builder.addLine("      nodeList = [document];");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        postTrace.findtype = 'Finds';");
    builder.addLine("        postTrace.findvalues = curMod.find;");
    builder.addLine("      }");
    builder.addLine("      let findsArrayLength = findsArray.length");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("        let findEntry = findsArray[i];");
    builder.addLine("        nodeList = HDLmFindOneLevel(nodeList, findEntry);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return nodeList;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindNodeIden(curMod, nodeIdenTracing, postRuleTracing, postTrace) {");
    builder.addLine("    let   nodeElement;");
    builder.addLine("    let   nodeElements = [];");
    builder.addLine("    let   nodeIden = curMod.nodeiden;");
    builder.addLine("    let   nodeList = [];");
    builder.addLine("    let   nodeAttributes = nodeIden.attributes;");
    builder.addLine("    let   nodeCounts = nodeIden.counts;");
    builder.addLine("    let   nodeType = nodeIden.type;");
    builder.addLine("    let   nodeValue = null;");
    builder.addLine("    switch (nodeType) {");
    builder.addLine("      case 'tag': {");
    builder.addLine("        let nodeTag = nodeAttributes.tag;");
    builder.addLine("        nodeValue = nodeTag;");
    builder.addLine("        nodeElements = document.getElementsByTagName(nodeTag);");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          postTrace.nodegetby = 'tag';");
    builder.addLine("          postTrace.nodegetvalue = nodeTag;");
    builder.addLine("          postTrace.nodecount = nodeElements.length;");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      case 'id': {");
    builder.addLine("        let nodeId = nodeAttributes.id;");
    builder.addLine("        nodeValue = nodeId;");
    builder.addLine("        nodeElement = document.getElementById(nodeId);");
    builder.addLine("        if (nodeElement != null)");
    builder.addLine("          nodeElements = [nodeElement];");
    builder.addLine("        else");
    builder.addLine("          nodeElements = [];");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          postTrace.nodegetby = 'id';");
    builder.addLine("          postTrace.nodegetvalue = nodeId;");
    builder.addLine("          postTrace.nodecount = nodeElements.length;");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      case 'class': {");
    builder.addLine("        let nodeClass;");
    builder.addLine("        if (nodeAttributes.hasOwnProperty('bestclass'))");
    builder.addLine("          nodeClass = nodeAttributes['bestclass'];");
    builder.addLine("        else {");
    builder.addLine("          let nodeClassList = nodeAttributes.class;");
    builder.addLine("          nodeClass = nodeClassList[0];");
    builder.addLine("        }");
    builder.addLine("        nodeValue = nodeClass;");
    builder.addLine("        nodeElements = document.getElementsByClassName(nodeClass);");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            (nodeIdenTracing == HDLmNodeIdenTracing.error && nodeClass == '')) {");
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          postTrace.nodegetby = 'class';");
    builder.addLine("          postTrace.nodegetvalue = nodeClass;");
    builder.addLine("          postTrace.nodecount = nodeElements.length;");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      case 'name': {");
    builder.addLine("        let nodeName = nodeAttributes.name;");
    builder.addLine("        nodeValue = nodeName;");
    builder.addLine("        nodeElements = document.getElementsByName(nodeName);");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          postTrace.nodegetby = 'name';");
    builder.addLine("          postTrace.nodegetvalue = nodeName;");
    builder.addLine("          postTrace.nodecount = nodeElements.length;");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      default: {");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("        HDLmBuildError('Error', 'NodeIden', 40, errorText);");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    let   nodeElementsLength = nodeElements.length;");
    builder.addLine("    if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        (nodeIdenTracing == HDLmNodeIdenTracing.error && nodeElementsLength == 0)) {");
    builder.addLine("      let   nodeText = nodeType;");
    builder.addLine("      if (nodeValue != null)");
    builder.addLine("        nodeText = nodeType + '/' + nodeValue");
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
    builder.addLine("      HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("    }");
    builder.addLine("    let nodeIdenCheckType = 'full';");
    builder.addLine("    if (nodeCounts[nodeType] == 1 && nodeElementsLength == 1)");
    builder.addLine("      nodeIdenCheckType = 'partial';");
    builder.addLine("    nodeList = HDLmFindNodeIdenCheck(nodeElements,");
    builder.addLine("                                     nodeIden,");
    builder.addLine("                                     nodeIdenCheckType,");
    builder.addLine("                                     nodeIdenTracing,");
    builder.addLine("                                     postRuleTracing,");
    builder.addLine("                                     postTrace);");
    builder.addLine("    return nodeList;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindNodeIdenCheck(nodeElements,");
    builder.addLine("                                 nodeIden,");
    builder.addLine("                                 nodeIdenCheckType,");
    builder.addLine("                                 nodeIdenTracing,");
    builder.addLine("                                 postRuleTracing,");
    builder.addLine("                                 postTrace) {");
    builder.addLine("    let nodeList = [];");
    builder.addLine("    let nodeCounter = 0;");
    builder.addLine("    let postTraceName;");
    builder.addLine("    let nodeElementsLength = nodeElements.length;");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("      let currentElement = nodeElements[i];");
    builder.addLine("      let   grandParentElement;");
    builder.addLine("      let   parentElement;");
    builder.addLine("      nodeCounter++;");
    builder.addLine("      postTraceName = 'nodetarget';");
    builder.addLine("      if (nodeCounter > 1)");
    builder.addLine("        postTraceName += String(nodeCounter-1)");
    builder.addLine("      let   nodeCurrentAttributes = nodeIden.attributes;");
    builder.addLine("      let   currentMatchValue = HDLmFindNodeIdenMatch(currentElement,");
    builder.addLine("                                                      nodeCurrentAttributes,");
    builder.addLine("                                                      nodeIdenTracing,");
    builder.addLine("                                                      postRuleTracing,");
    builder.addLine("                                                      postTrace,");
    builder.addLine("                                                      postTraceName);");
    builder.addLine("      if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          (nodeIdenTracing == HDLmNodeIdenTracing.error && currentMatchValue < 0.95)) {");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("        HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("      }");
    builder.addLine("      if (currentMatchValue < 0.95)");
    builder.addLine("        continue elementLoop;");
    builder.addLine("      while (true) {");
    builder.addLine("        parentElement = currentElement.parentElement;");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("            parentElement == null)");
    builder.addLine("          break;");
    builder.addLine("        if (nodeIden.hasOwnProperty('parent') == false)");
    builder.addLine("          break;");
    builder.addLine("        postTraceName = 'nodeparent';");
    builder.addLine("        if (nodeCounter > 1)");
    builder.addLine("          postTraceName += String(nodeCounter-1);");
    builder.addLine("        let   nodeParentAttributes = nodeIden.parent;");
    builder.addLine("        if (typeof nodeParentAttributes == 'undefined' ||");
    builder.addLine("            nodeParentAttributes == null)");
    builder.addLine("          break;");
    builder.addLine("        let   parentMatchValue = HDLmFindNodeIdenMatch(parentElement,");
    builder.addLine("                                                       nodeParentAttributes,");
    builder.addLine("                                                       nodeIdenTracing,");
    builder.addLine("                                                       postRuleTracing,");
    builder.addLine("                                                       postTrace,");
    builder.addLine("                                                       postTraceName);");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            (nodeIdenTracing == HDLmNodeIdenTracing.error && parentMatchValue < 0.95)) {");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        }");
    builder.addLine("        if (parentMatchValue < 0.95)");
    builder.addLine("          continue elementLoop;");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      while (true) {");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("            parentElement == null)");
    builder.addLine("          break;");
    builder.addLine("        if (nodeIden.hasOwnProperty('grandparent') == false)");
    builder.addLine("          break;");
    builder.addLine("        grandParentElement = parentElement.parentElement;");
    builder.addLine("        if (typeof grandParentElement == 'undefined' ||");
    builder.addLine("            grandParentElement == null)");
    builder.addLine("          break;");
    builder.addLine("        postTraceName = 'nodegrandparent';");
    builder.addLine("        if (nodeCounter > 1)");
    builder.addLine("          postTraceName += String(nodeCounter-1);");
    builder.addLine("        let   nodeGrandParentAttributes = nodeIden.grandparent;");
    builder.addLine("        if (typeof nodeGrandParentAttributes == 'undefined' ||");
    builder.addLine("            nodeGrandParentAttributes == null)");
    builder.addLine("          break;");
    builder.addLine("        let   grandParentMatchValue = HDLmFindNodeIdenMatch(grandParentElement,");
    builder.addLine("                                                            nodeGrandParentAttributes,");
    builder.addLine("                                                            nodeIdenTracing,");
    builder.addLine("                                                            postRuleTracing,");
    builder.addLine("                                                            postTrace,");
    builder.addLine("                                                            postTraceName);");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            (nodeIdenTracing == HDLmNodeIdenTracing.error && grandParentMatchValue < 0.95)) {");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        }");
    builder.addLine("        if (grandParentMatchValue < 0.95)");
    builder.addLine("          continue elementLoop;");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      nodeList.push(currentElement);");
    builder.addLine("    }");
    builder.addLine("    return nodeList;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindNodeIdenMatch(nodeElement,");
    builder.addLine("                                 nodeAttributes,");
    builder.addLine("                                 nodeIdenTracing,");
    builder.addLine("                                 postRuleTracing,");
    builder.addLine("                                 postTrace,");
    builder.addLine("                                 postName) {");
    builder.addLine("    let   denominator = 0.0;");
    builder.addLine("    let   nodeActualValue;");
    builder.addLine("    let   nodeAttributeValue;");
    builder.addLine("    let   nodeAttributeChecks = [];");
    builder.addLine("    let   numerator = 0.0;");
    builder.addLine("    let   numeratorIncrementValue;");
    builder.addLine("    if (postRuleTracing) {");
    builder.addLine("      nodeActualValue = nodeElement.tagName;");
    builder.addLine("      nodeAttributeValue = nodeAttributes.tag");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      nodeAttributeCheck.type = 'tag';");
    builder.addLine("      nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("      nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("      let   traceValue = 0.0;");
    builder.addLine("      if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag))");
    builder.addLine("        traceValue = 1.0;");
    builder.addLine("      nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("      postTrace[postName + 'tag'] = nodeAttributeCheck;");
    builder.addLine("    }");
    builder.addLine("    if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag) == false) {");
    builder.addLine("      return 0.0;");
    builder.addLine("    }");
    builder.addLine("    let nodeAttributeKeys = Object.keys(nodeAttributes);");
    builder.addLine("    let nodeAttributeKeysLength = nodeAttributeKeys.length;");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("      let nodeAttributeKey = nodeAttributeKeys[i];");
    builder.addLine("      if (nodeAttributeKey == 'bestclass')");
    builder.addLine("        continue;");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      numeratorIncrementValue = 0.0;");
    builder.addLine("      denominator++;");
    builder.addLine("      nodeAttributeValue = nodeAttributes[nodeAttributeKey];");
    builder.addLine("      if (nodeAttributeKey == 'tag') {");
    builder.addLine("        nodeActualValue = nodeElement.tagName;");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeActualValue, nodeAttributeValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeActualValue, nodeAttributeValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeActualValue, nodeAttributeValue))");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'class') {");
    builder.addLine("        if (Array.isArray(nodeAttributeValue) &&");
    builder.addLine("            nodeAttributeValue.length > 0)");
    builder.addLine("          nodeAttributeValue = nodeAttributeValue[0];");
    builder.addLine("        let nodeActualValueString = nodeElement.getAttribute('class');");
    builder.addLine("        if (nodeActualValueString != null) {");
    builder.addLine("          let nodeActualValueSplitArray = nodeActualValueString.split(' ');");
    builder.addLine("          let nodeActualValueSplitArrayLen = nodeActualValueSplitArray.length;");
    builder.addLine("          let nodeActualValueSplit = [];");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("            let nodeActualValueSplitValue = nodeActualValueSplitArray[i];");
    builder.addLine("            if (nodeActualValueSplitValue.endsWith('\\n')) {");
    builder.addLine("              let nodeActualValueSplitValueLen = nodeActualValueSplitValue.length;");
    builder.addLine("              nodeActualValueSplitValue = nodeActualValueSplitValue.substr(0, nodeActualValueSplitValueLen-1);");
    builder.addLine("            }");
    builder.addLine("            if (nodeActualValueSplitValue.length > 0)");
    builder.addLine("              nodeActualValueSplit.push(nodeActualValueSplitValue);");
    builder.addLine("          }");
    builder.addLine("          if (nodeActualValueSplit.length > 0) {");
    builder.addLine("            nodeActualValue = [...nodeActualValueSplit];");
    builder.addLine("          }");
    builder.addLine("          else");
    builder.addLine("            nodeActualValue = null;");
    builder.addLine("        }");
    builder.addLine("        else");
    builder.addLine("          nodeActualValue = null;");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              nodeActualValue.includes(nodeAttributeValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              nodeActualValue.includes(nodeAttributeValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (nodeActualValue.includes(nodeAttributeValue))");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'innertext') {");
    builder.addLine("        let nodeIndexOf;");
    builder.addLine("        let nodeInnerText = nodeElement.innerText;");
    builder.addLine("        if ((typeof nodeInnerText) == 'undefined')");
    builder.addLine("          nodeInnerText = null;");
    builder.addLine("        if (nodeInnerText != null) {");
    builder.addLine("          nodeIndexOf = nodeInnerText.indexOf('ï¿½');");
    builder.addLine("          if (nodeIndexOf >= 0)");
    builder.addLine("            nodeInnerText = nodeInnerText.substring(0, nodeIndexOf);");
    builder.addLine("          nodeIndexOf = nodeInnerText.indexOf('\\n');");
    builder.addLine("          if (nodeIndexOf >= 0)");
    builder.addLine("            nodeInnerText = nodeInnerText.substring(0, nodeIndexOf);");
    builder.addLine("          nodeInnerText = nodeInnerText.toLowerCase().trim();");
    builder.addLine("          if (nodeInnerText.length > 20)");
    builder.addLine("            nodeInnerText = nodeInnerText.substring(0, 20);");
    builder.addLine("        }");
    builder.addLine("        nodeActualValue = nodeInnerText;");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'phash') {");
    builder.addLine("        nodeActualValue = nodeAttributeValue;");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'src') {");
    builder.addLine("        nodeActualValue = nodeElement.getAttribute(nodeAttributeKey);");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("        while (true) {");
    builder.addLine("          let   nodeActualIndex;");
    builder.addLine("          let   nodeActualPHash;");
    builder.addLine("          let   nodeActualUrl;");
    builder.addLine("          let   nodeAttributesPHashSimilarity;");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('http');");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualUrl = HDLmRemoveProtocol(nodeActualValue);");
    builder.addLine("          nodeActualPHash = HDLmFindPHash(nodeActualUrl);");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("            HDLmGetPHash(nodeActualUrl);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("            break;");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("          nodeAttributesPHashSimilarity = HDLmHammingDistanceAdjusted(nodeAttributesPHashValue,");
    builder.addLine("                                                                      nodeActualPHash);");
    builder.addLine("          nodePHashCheck = true;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("            let   errorText;");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("                (nodeIdenTracing == HDLmNodeIdenTracing.error && nodeAttributesPHashSimilarity >= 0.10)) {");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("            nodeAttributeCheck.attributevalue = nodeAttributesPHashValue;");
    builder.addLine("            nodeAttributeCheck.actualvalue = nodeActualPHash;");
    builder.addLine("            nodeAttributeCheck.matchvalue = nodeAttributesPHashSimilarity;");
    builder.addLine("            nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("          }");
    builder.addLine("          if (nodeAttributesPHashSimilarity < 0.10) {");
    builder.addLine("            numeratorIncrementValue = 1.0;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("                nodeAttributeValue == nodeActualValue)");
    builder.addLine("              traceValue = 1.0;");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("                (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("            nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("            nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("                nodeAttributeValue == nodeActualValue)");
    builder.addLine("              traceValue = 1.0;");
    builder.addLine("            nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("            nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("          }");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            continue;");
    builder.addLine("          if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("            numeratorIncrementValue = 1.0;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'style') {");
    builder.addLine("        nodeActualValue = nodeElement.getAttribute(nodeAttributeKey);");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("        while (true) {");
    builder.addLine("          let   nodeActualIndex;");
    builder.addLine("          let   nodeActualPHash;");
    builder.addLine("          let   nodeActualUrl;");
    builder.addLine("          let   nodeAttributesPHashSimilarity;");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('background-image');");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('url(\"http');");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualUrl = nodeActualValue.substr(nodeActualIndex+5);");
    builder.addLine("          nodeActualIndex = nodeActualUrl.indexOf('\")');");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("            break");
    builder.addLine("          nodeActualUrl = nodeActualUrl.substring(0, nodeActualIndex);");
    builder.addLine("          nodeActualUrl = HDLmRemoveProtocol(nodeActualUrl);");
    builder.addLine("          nodeActualPHash = HDLmFindPHash(nodeActualUrl);");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("            HDLmGetPHash(nodeActualUrl);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("            break;");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("          nodeAttributesPHashSimilarity = HDLmHammingDistanceAdjusted(nodeAttributesPHashValue,");
    builder.addLine("                                                                      nodeActualPHash);");
    builder.addLine("          nodePHashCheck = true;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("            let   errorText;");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("                (nodeIdenTracing == HDLmNodeIdenTracing.error && nodeAttributesPHashSimilarity >= 0.10)) {");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("            nodeAttributeCheck.attributevalue = nodeAttributesPHashValue;");
    builder.addLine("            nodeAttributeCheck.actualvalue = nodeActualPHash;");
    builder.addLine("            nodeAttributeCheck.matchvalue = nodeAttributesPHashSimilarity;");
    builder.addLine("            nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("          }");
    builder.addLine("          if (nodeAttributesPHashSimilarity < 0.10) {");
    builder.addLine("            numeratorIncrementValue = 1.0;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("                nodeAttributeValue == nodeActualValue)");
    builder.addLine("              traceValue = 1.0;");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("                (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("            nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("            nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("                nodeAttributeValue == nodeActualValue)");
    builder.addLine("              traceValue = 1.0;");
    builder.addLine("            nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("            nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("          }");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            continue;");
    builder.addLine("          if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("            numeratorIncrementValue = 1.0;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        nodeActualValue = nodeElement.getAttribute(nodeAttributeKey);");
    builder.addLine("        if (nodeAttributeKey == 'href' &&");
    builder.addLine("            nodeActualValue != null)");
    builder.addLine("          nodeActualValue = HDLmRemoveHost(nodeActualValue);");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              nodeAttributeValue == nodeActualValue)");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              nodeAttributeValue == nodeActualValue)");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      numerator += numeratorIncrementValue;");
    builder.addLine("    }");
    builder.addLine("    if (postRuleTracing)");
    builder.addLine("      postTrace[postName] = nodeAttributeChecks;");
    builder.addLine("    return numerator / denominator;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindOneLevel(nodeList, findEntry) {");
    builder.addLine("    let outArray = [];");
    builder.addLine("    let nodeListLength = nodeList.length;");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("      let curNode = nodeList[i];");
    builder.addLine("      let nodeType = curNode.constructor.name;");
    builder.addLine("        if (typeof curNode.getElementById === 'function' &&");
    builder.addLine("            findEntry.attributeName       === 'id' &&");
    builder.addLine("            findEntry.attributeValue      !== '') {");
    builder.addLine("        let newNode = curNode.getElementById(findEntry.attributeValue);");
    builder.addLine("        if (newNode !== null) {");
    builder.addLine("          if (findEntry.tag !== '') {");
    builder.addLine("            if (findEntry.tag.toUpperCase() === newNode.tagName.toUpperCase())");
    builder.addLine("              outArray.push(newNode);");
    builder.addLine("          }");
    builder.addLine("          else");
    builder.addLine("            outArray.push(newNode);");
    builder.addLine("        }");
    builder.addLine("        continue;");
    builder.addLine("      }");
    builder.addLine("      if (typeof curNode.getElementByClassName === 'function' &&");
    builder.addLine("          findEntry.attributeName              === 'class'    &&");
    builder.addLine("          findEntry.attributeValue             !== '') {");
    builder.addLine("        let newNodeList = curNode.getElementByClassName(findEntry.attributeValue);");
    builder.addLine("        let newNodeListLength = newNodeList.length;");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("          newNode = newNodeList[i];");
    builder.addLine("          if (findEntry.tag !== '') {");
    builder.addLine("            if (findEntry.tag.toUpperCase() === newNode.tagName.toUpperCase())");
    builder.addLine("              outArray.push(newNode);");
    builder.addLine("          }");
    builder.addLine("          else");
    builder.addLine("            outArray.push(newNode);");
    builder.addLine("        }");
    builder.addLine("        continue;");
    builder.addLine("      }");
    builder.addLine("      if (typeof curNode.getElementsByTagName === 'function' &&");
    builder.addLine("          findEntry.tag !== '') {");
    builder.addLine("        let newNodesList = curNode.getElementsByTagName(findEntry.tag);");
    builder.addLine("        let newNodesListLength = newNodesList.length;");
    builder.addLine("        if (findEntry.attributeName  !== '' &&");
    builder.addLine("            findEntry.attributeValue !== '') {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("            if (!newNode.hasAttribute(findEntry.attributeName))");
    builder.addLine("              continue;");
    builder.addLine("            if (newNode.getAttribute(findEntry.attributeName) !== findEntry.attributeValue)");
    builder.addLine("              continue;");
    builder.addLine("            outArray.push(newNode);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        else {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("            outArray.push(newNode);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        continue;");
    builder.addLine("      }");
    builder.addLine("      let curChildren = curNode.childNodes;");
    builder.addLine("      let curChildrenLength = curChildren.length;");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("        let curChild = curChildren[i];");
    builder.addLine("        if (typeof curChild.hasAttribute !== 'function')");
    builder.addLine("          continue;");
    builder.addLine("        if (typeof curChild.getAttribute !== 'function')");
    builder.addLine("          continue;");
    builder.addLine("        if (!curChild.hasAttribute(findEntry.attributeName))");
    builder.addLine("          continue;");
    builder.addLine("        if (curChild.getAttribute(findEntry.attributeName) !== findEntry.attributeValue)");
    builder.addLine("          continue;");
    builder.addLine("        outArray.push(curChild);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return outArray;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindPHash(urlStr) {");
    builder.addLine("    let urlStrMod = urlStr.replace(/\\+/g, ' ');");
    builder.addLine("    if (HDLmPHashObject.hasOwnProperty(urlStrMod))");
    builder.addLine("      return HDLmPHashObject[urlStrMod];");
    builder.addLine("    return null;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetAllPropertyNames(obj) {");
    builder.addLine("    let result = new Set();");
    builder.addLine("    while (obj) {");
    builder.addLine("      Object.getOwnPropertyNames(obj).forEach(p => result.add(p));");
    builder.addLine("      obj = Object.getPrototypeOf(obj);");
    builder.addLine("    }");
    builder.addLine("    return [...result];");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetBackground(domElement, replacementImageName) {");
    builder.addLine("    let firstElement = domElement;");
    builder.addLine("    let finalUrl = null;");
    builder.addLine("    while (domElement != null) {");
    builder.addLine("      let computedStyle = window.getComputedStyle(domElement);");
    builder.addLine("      if (computedStyle == null)");
    builder.addLine("        break;");
    builder.addLine("      let backStr = computedStyle['background-image'];");
    builder.addLine("      let backType = typeof backStr;");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("        domElement = domElement.parentElement;");
    builder.addLine("        continue;");
    builder.addLine("      }");
    builder.addLine("      let backLast = backStr.lastIndexOf('/');");
    builder.addLine("      if (backLast > 0)");
    builder.addLine("        finalUrl = backStr.substring(0, backLast+1) + replacementImageName + '\")';");
    builder.addLine("      break;");
    builder.addLine("    }");
    builder.addLine("    return finalUrl;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("    let objProps = HDLmGetAllPropertyNames(obj);");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    objProps.forEach(prop => {");
    builder.addLine("      let objValue = obj[prop];");
    builder.addLine("      let typeValue = typeof objValue;");
    builder.addLine("      let quotes = true;");
    builder.addLine("      if (typeValue == 'number'  ||");
    builder.addLine("          typeValue == 'boolean' ||");
    builder.addLine("          objValue == null)");
    builder.addLine("        quotes = false;");
    builder.addLine("      if (typeValue == 'string') {");
    builder.addLine("        let lengthValue = objValue.length;");
    builder.addLine("        if (lengthValue >= 2) {");
    builder.addLine("          let objValueFirst = objValue.charAt(0);");
    builder.addLine("          let objValueLast = objValue.charAt(lengthValue-1);");
    builder.addLine("          if (objValueFirst == '{' && objValueLast == '}') {");
    builder.addLine("            quotes = false;");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      let oldRvLength = rv.length;");
    builder.addLine("      try {");
    builder.addLine("        rv += ',\"' + prop + '\":';");
    builder.addLine("        if (quotes)");
    builder.addLine("          rv += '\"';");
    builder.addLine("        rv += objValue;");
    builder.addLine("        if (quotes)");
    builder.addLine("          rv += '\"';");
    builder.addLine("      }");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("        rv = rv.substring(0, oldRvLength);");
    builder.addLine("      }");
    builder.addLine("    });");
    builder.addLine("    rv += '}';");
    builder.addLine("    return rv;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    rv += '}';");
    builder.addLine("    return rv;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetObjectName(obj) {");
    builder.addLine("    let result = obj.constructor.name;");
    builder.addLine("    return result;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetUpdateCount(curNode, matchModifiedName, readyState) {");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("      return 0;");
    builder.addLine("    }");
    builder.addLine("    let currentCount = curNode.getAttribute(attributeName);");
    builder.addLine("    return currentCount;");
    builder.addLine("  }");
    builder.addLine("  function HDLmHammingDistance(firstVal, secondVal) {");
    builder.addLine("    let xorValue = firstVal ^ secondVal;");
    builder.addLine("    let distanceCount = 0;");
    builder.addLine("    while (xorValue > 0) {");
    builder.addLine("      xorValue &= xorValue - 1;");
    builder.addLine("      distanceCount++;");
    builder.addLine("    }");
    builder.addLine("    return distanceCount;");
    builder.addLine("  };");
    builder.addLine("  function HDLmHammingDistanceAdjusted(firstVal, secondVal) {");
    builder.addLine("    let distanceValue = HDLmHammingDistanceLong(firstVal, secondVal);");
    builder.addLine("    return distanceValue/(4.0 * firstVal.length);");
    builder.addLine("  };");
    builder.addLine("  function HDLmHammingDistanceLong(firstVal, secondVal) {");
    builder.addLine("    let distanceFinal = 0;");
    builder.addLine("    let firstSub, secondSub;");
    builder.addLine("    while (firstVal.length > 0) {");
    builder.addLine("      if (firstVal.length > 8) {");
    builder.addLine("        firstSub = firstVal.substr(0, 8);");
    builder.addLine("        firstVal = firstVal.substr(8);");
    builder.addLine("        secondSub = secondVal.substr(0, 8);");
    builder.addLine("        secondVal = secondVal.substr(8);");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        firstSub = firstVal;");
    builder.addLine("        firstVal = '';");
    builder.addLine("        secondSub = secondVal;");
    builder.addLine("        secondVal = '';");
    builder.addLine("      }");
    builder.addLine("      let firstInt = parseInt(firstSub, 16);");
    builder.addLine("      let secondInt = parseInt(secondSub, 16);");
    builder.addLine("      distanceFinal += HDLmHammingDistance(firstInt, secondInt);");
    builder.addLine("    }");
    builder.addLine("    return distanceFinal;");
    builder.addLine("  };");
    builder.addLine("  function HDLmHandleVisitRequest(visitText, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("                                  sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                  parameterNumber, lookupValue,");
    builder.addLine("                                  hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                  pathValueStr) {");
    builder.addLine("    let countHigh = false;");
    builder.addLine("    let updateName = 'HDLmUpdateCount' + curMod.name;");
    builder.addLine("    if (isNaN(window[updateName]))");
    builder.addLine("      window[updateName] = 0;");
    builder.addLine("    else");
    builder.addLine("      if (window[updateName] > 0)");
    builder.addLine("        countHigh = true;");
    builder.addLine("    if (countHigh || testFlag)");
    builder.addLine("      return countHigh;");
    builder.addLine("    window[updateName] += 1;");
    builder.addLine("    let localUpdates = new Object();");
    builder.addLine("    let oldText = null;");
    builder.addLine("    let newText = null;");
    builder.addLine("    if ((typeof visitText) != 'undefined' &&");
    builder.addLine("        visitText          != null        &&");
    builder.addLine("        visitText          != '')");
    builder.addLine("      oldText = visitText;");
    builder.addLine("    HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                   sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                   parameterNumber, lookupValue,");
    builder.addLine("                   hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                   curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                   oldText, newText);");
    builder.addLine("    let localReason = curMod.type;");
    builder.addLine("    postTrace.matcherror = 'visit';");
    builder.addLine("    HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("    return countHigh;");
    builder.addLine("  }");
    builder.addLine("  function HDLmIncrementUpdateCount(curNode, matchModifiedName) {");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("      curNode.setAttribute(attributeName, 1);");
    builder.addLine("      return 1;");
    builder.addLine("    }");
    builder.addLine("    let currentCount = curNode.getAttribute(attributeName);");
    builder.addLine("    currentCount++;");
    builder.addLine("    curNode.setAttribute(attributeName, currentCount);");
    builder.addLine("    return currentCount;");
    builder.addLine("  }");
    builder.addLine("  function HDLmModifySearch(searchText) {");
    builder.addLine("    let searchObj = JSON.parse(searchText);");
    builder.addLine("    let searchAttrs = searchObj.attributes;");
    builder.addLine("    if (searchAttrs.hasOwnProperty('innertext')) {");
    builder.addLine("      let searchInner = searchAttrs.innertext;");
    builder.addLine("      let searchIndex = searchInner.indexOf('$');");
    builder.addLine("      if (searchIndex >= 0) {");
    builder.addLine("        delete searchAttrs['innertext'];");
    builder.addLine("        searchObj['attributes'] = searchAttrs;");
    builder.addLine("      };");
    builder.addLine("      searchText = JSON.stringify(searchObj);");
    builder.addLine("    }");
    builder.addLine("    return searchText;");
    builder.addLine("  }");
    builder.addLine("  function HDLmObtainValue(searchValue) {");
    builder.addLine("    let textValue = null;");
    builder.addLine("    let localMod = {};");
    builder.addLine("    if (searchValue.length > 0 && searchValue.charAt(0) == '/') {");
    builder.addLine("      localMod.cssselector = '';");
    builder.addLine("      localMod.nodeiden = null;");
    builder.addLine("      localMod.xpath = searchValue;");
    builder.addLine("    }");
    builder.addLine("    else if (searchValue.length > 0 && searchValue.charAt(0) == '{') {");
    builder.addLine("      localMod.cssselector = '';");
    builder.addLine("      localMod.nodeiden = JSON.parse(searchValue);");
    builder.addLine("      localMod.xpath = \"\";");
    builder.addLine("    }");
    builder.addLine("    else {");
    builder.addLine("      localMod.cssselector = searchValue;");
    builder.addLine("      localMod.nodeiden = null;");
    builder.addLine("      localMod.xpath = '';");
    builder.addLine("    }");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("    let localNodeListLen = localNodeList.length;");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("      let localNode = localNodeList[i];");
    builder.addLine("      textValue = localNode.textContent;");
    builder.addLine("      break;");
    builder.addLine("    }");
    builder.addLine("    return textValue;");
    builder.addLine("  }");
    builder.addLine("  function HDLmRemoveHost(urlStr) {");
    builder.addLine("    let urlStrIndexOfColon = urlStr.indexOf(':');");
    builder.addLine("    if (urlStrIndexOfColon < 0 ||");
    builder.addLine("        urlStrIndexOfColon > 6)");
    builder.addLine("      return urlStr;");
    builder.addLine("    let urlObj = new URL(urlStr);");
    builder.addLine("    return urlStr.substring(urlObj.origin.length);");
    builder.addLine("  }");
    builder.addLine("  function HDLmRemoveProtocol(urlStr) {");
    builder.addLine("    let urlIndex = urlStr.indexOf(':');");
    builder.addLine("    if (urlIndex < 0)");
    builder.addLine("      return urlStr;");
    builder.addLine("    return urlStr.substring(urlIndex+1);");
    builder.addLine("  }");
    builder.addLine("  function HDLmReplaceInString(inStr) {");
    builder.addLine("    inStr = inStr.replace(/A/g,'\u0e81');");
    builder.addLine("    inStr = inStr.replace(/B/g,'\u0e82');");
    builder.addLine("    inStr = inStr.replace(/C/g,'\u0e84');");
    builder.addLine("    inStr = inStr.replace(/D/g,'\u0e87');");
    builder.addLine("    inStr = inStr.replace(/E/g,'\u0e88');");
    builder.addLine("    inStr = inStr.replace(/F/g,'\u0e8a');");
    builder.addLine("    inStr = inStr.replace(/G/g,'\u0e8d');");
    builder.addLine("    inStr = inStr.replace(/H/g,'\u0e94');");
    builder.addLine("    inStr = inStr.replace(/I/g,'\u0e97');");
    builder.addLine("    inStr = inStr.replace(/J/g,'\u0e99');");
    builder.addLine("    inStr = inStr.replace(/K/g,'\u0e9f');");
    builder.addLine("    inStr = inStr.replace(/L/g,'\u0ea1');");
    builder.addLine("    inStr = inStr.replace(/M/g,'\u0ea3');");
    builder.addLine("    inStr = inStr.replace(/N/g,'\u0ea5');");
    builder.addLine("    inStr = inStr.replace(/O/g,'\u0ea7');");
    builder.addLine("    inStr = inStr.replace(/P/g,'\u0eaa');");
    builder.addLine("    inStr = inStr.replace(/Q/g,'\u0eab');");
    builder.addLine("    inStr = inStr.replace(/R/g,'\u0ead');");
    builder.addLine("    inStr = inStr.replace(/S/g,'\u0eb9');");
    builder.addLine("    inStr = inStr.replace(/T/g,'\u0ebb');");
    builder.addLine("    inStr = inStr.replace(/U/g,'\u0ebd');");
    builder.addLine("    inStr = inStr.replace(/V/g,'\u0ec0');");
    builder.addLine("    inStr = inStr.replace(/W/g,'\u0ec4');");
    builder.addLine("    inStr = inStr.replace(/X/g,'\u0ec6');");
    builder.addLine("    inStr = inStr.replace(/Y/g,'\u0ec8');");
    builder.addLine("    inStr = inStr.replace(/Z/g,'\u0ecd');");
    builder.addLine("    inStr = inStr.replace(/\\s/g,'\u0ed0');");
    builder.addLine("    inStr = inStr.replace(/\\$/g,'\u0ed1');");
    builder.addLine("    inStr = inStr.replace(/\\./g,'\u0ed2');");
    builder.addLine("    inStr = inStr.replace(/\\//g,'\u0ed3');");
    builder.addLine("    inStr = inStr.replace(/\\(/g,'\u0ed4');");
    builder.addLine("    inStr = inStr.replace(/\\)/g,'\u0ed5');");
    builder.addLine("    return inStr;");
    builder.addLine("  }");
    builder.addLine("  function HDLmResetStyleSheetEnablement(titleValue, disabledStatus) {");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("        styleSheet.title == titleValue) {");
    builder.addLine("        styleSheet.disabled = disabledStatus;");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("  }");
    builder.addLine("  function HDLmSaveChange(savedUpdates, indexUsed,");
    builder.addLine("                          sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                          parmNumber, lookupValue,");
    builder.addLine("                          hostNameValue, divisionNameValue, siteNameValue, modName,");
    builder.addLine("                          modPathValue, modType,");
    builder.addLine("                          pathValue, oldValue, newValue) {");
    builder.addLine("    let updateObj = {};");
    builder.addLine("    updateObj.indexValue = sessionIndexValue;");
    builder.addLine("    updateObj.indexUsed = indexUsed;");
    builder.addLine("    updateObj.parameters = HDLmArrayJoin(parametersArray, ' ');");
    builder.addLine("    updateObj.sessionId = sessionIdJS;");
    builder.addLine("    updateObj.parmNumber = parmNumber;");
    builder.addLine("    updateObj.lookupValue = lookupValue;");
    builder.addLine("    updateObj.hostName = hostNameValue;");
    builder.addLine("    updateObj.divisionName = divisionNameValue;");
    builder.addLine("    updateObj.siteName = siteNameValue;");
    builder.addLine("    updateObj.modName = modName;");
    builder.addLine("    updateObj.modPathValue = modPathValue;");
    builder.addLine("    updateObj.modType = modType;");
    builder.addLine("    updateObj.pathValue = pathValue;");
    builder.addLine("    updateObj.oldValue = oldValue;");
    builder.addLine("    updateObj.newValue = newValue;");
    builder.addLine("    if (!savedUpdates.hasOwnProperty('updates'))");
    builder.addLine("      savedUpdates.updates = [];");
    builder.addLine("    savedUpdates.updates.push(updateObj);");
    builder.addLine("  }");
    builder.addLine("  function HDLmStyleFixValues(inputStyles) {");
    builder.addLine("    inputStyles = inputStyles.trim();");
    builder.addLine("    inputStyles = inputStyles.toLowerCase();");
    builder.addLine("    inputStyles = inputStyles.replace(/\\s+/g, ' ');");
    builder.addLine("    let splitOn;");
    builder.addLine("    if (inputStyles.indexOf(';') >= 0)");
    builder.addLine("      splitOn = ';'");
    builder.addLine("    else");
    builder.addLine("      splitOn = ' ';");
    builder.addLine("    let inputSplit = inputStyles.split(splitOn);");
    builder.addLine("    for (let i in inputSplit) {");
    builder.addLine("      let styleValue = inputSplit[i];");
    builder.addLine("      if (splitOn == ';')");
    builder.addLine("        styleValue = styleValue.trim();");
    builder.addLine("      if (styleValue == 'unchanged' ||");
    builder.addLine("          styleValue == 'novalue'   ||");
    builder.addLine("          styleValue == 'none'      ||");
    builder.addLine("          styleValue.trim().length == 0) {");
    builder.addLine("        styleValue = 'none';");
    builder.addLine("        inputSplit[i] = styleValue;");
    builder.addLine("      }");
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
    builder.addLine("        styleValue += 'px';");
    builder.addLine("        inputSplit[i] = styleValue;");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return inputSplit;");
    builder.addLine("  }");
    builder.addLine("  function HDLmStyleSplitString(inputString) {");
    builder.addLine("    inputString = inputString.trim();");
    builder.addLine("    inputString = inputString.toLowerCase();");
    builder.addLine("    inputString = inputString.replace(/\\s+/g, ' ');");
    builder.addLine("    let inputSplit = inputString.split(' ');");
    builder.addLine("    return inputSplit;");
    builder.addLine("  }");
    builder.addLine("  function HDLmToggleStyleSheetEnablement() {");
    builder.addLine("    var disabledStatus;");
    builder.addLine("    var titleValue = 'HDLmSessionClasses';");
    builder.addLine("    disabledStatus = sessionStorage.getItem(titleValue + 'Disabled');");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("      disabledStatus = 'true';");
    builder.addLine("    disabledStatus = (disabledStatus == 'true') ? false : true;");
    builder.addLine("    sessionStorage.setItem(titleValue + 'Disabled', disabledStatus);");
    builder.addLine("    HDLmResetStyleSheetEnablement(titleValue, disabledStatus);");
    builder.addLine("  }");
    builder.addLine("  function HDLmUpdateJsonStr(jsonStr, keyStr, valueStr) {");
    builder.addLine("    if (jsonStr == null)");
    builder.addLine("      jsonStr = '{}';");
    builder.addLine("    let jsonObj = JSON.parse(jsonStr);");
    builder.addLine("    jsonObj[keyStr] = valueStr;");
    builder.addLine("    jsonStr = JSON.stringify(jsonObj);");
    builder.addLine("    return jsonStr;");
    builder.addLine("  }");
    builder.addLine("  function HDLmApplyMods(readyState, HDLmIndexValue) {");
    builder.addLine("    let pathValueStr = document.location.pathname;");
    builder.addLine("    const modsArray = [");
      builder.addLine(newLine);
    builder.addLine("                      ];");
    builder.addLine("    const sessionIdJS = '" + sessionIdJava + "';");
    builder.addLine("    const parametersArray = HDLmGetParametersArray();"); 
    builder.addLine("    let modsArrayLength = modsArray.length;");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("      try {");
    builder.addLine("        switch (curMod.type) {");
    builder.addLine("          case 'extract': {");
    builder.addLine("            let nodeList = HDLmFind(curMod, false);");
    builder.addLine("            let nodeListLen = nodeList.length;");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("              let curNode = nodeList[j];");
    builder.addLine("              if (HDLmSavedExtracts.hasOwnProperty(curMod.name) &&");
    builder.addLine("                  HDLmSavedExtracts[curMod.name] != null)");
    builder.addLine("                continue;"); 
    builder.addLine("              let oldText = curNode.textContent;");
    builder.addLine("              HDLmSavedExtracts[curMod.name] = oldText;");
    builder.addLine("            }");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          case 'notify': {");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("              let searchText = curMod.values[j];");
    builder.addLine("              searchText = HDLmModifySearch(searchText);");
    builder.addLine("              if (HDLmSavedNotifies.hasOwnProperty(searchText) &&");
    builder.addLine("                  HDLmSavedNotifies[searchText] != null)");
    builder.addLine("                continue;");
    builder.addLine("              let searchValue = HDLmObtainValue(searchText);");
    builder.addLine("              HDLmSavedNotifies[searchText] = searchValue;");
    builder.addLine("            }");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          default: {");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("        console.log(errorObj);");
    builder.addLine("        let errorStr = HDLmErrorToString(errorObj);");
    builder.addLine("        let nameStr = curMod.name;"); 
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        console.log(builtStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'modification', nameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'siteName', siteNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'divisionName', divisionNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'hostName', hostNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'sessionId', sessionIdJS);");
    builder.addLine("        HDLmSendData(errorStr);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("      try {");
    builder.addLine("        HDLmApplyMod(pathValueStr,");
    builder.addLine("                     curMod,");
    builder.addLine("                     sessionIdJS,"); 
    builder.addLine("                     HDLmIndexValue,");
    builder.addLine("                     parametersArray,"); 
    builder.addLine("                     '" + hostName + "',");  
    builder.addLine("                     '" + hostName + "',"); 
    builder.addLine("                     '" + divisionName + "',");       
    builder.addLine("                     '" + siteName + "',"); 
      builder.addLine("                     '" + secureHostName + "',");
      builder.addLine("                     null,"); 
    builder.addLine("                     '" + forceSelectString + "',"); 
    builder.addLine("                     " + logRuleMatchingString + ",");
    builder.addLine("                     readyState);");
    builder.addLine("      }");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("        console.log(errorObj);");
    builder.addLine("        let errorStr = HDLmErrorToString(errorObj);");
    builder.addLine("        let nameStr = curMod.name;");
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        console.log(builtStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'modification', nameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'siteName', siteNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'divisionName', divisionNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'hostName', hostNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'sessionId', sessionIdJS);");
    builder.addLine("        HDLmSendData(errorStr);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildError(errSeverity, curType, errNumber, errText) {");
    builder.addLine("    let errorStr = '';");
    builder.addLine("    errorStr += '" + HDLmDefines.getString("HDLMPREFIX") + "' + ' ';");
    builder.addLine("    errorStr += errSeverity + ' ';");
    builder.addLine("    errorStr += curType + ' ';");
    builder.addLine("    errorStr += errNumber.toString() + ' ';");
    builder.addLine("    errorStr += errText;");
    builder.addLine("    console.log(errorStr);");
    builder.addLine("  }");
    builder.addLine("  function HDLmChangeAttributes(curNode, jsonText) {");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("      if (!changesObj.hasOwnProperty(keyValue))");
    builder.addLine("        continue;");
    builder.addLine("      let changesValue = changesObj[keyValue];");
    builder.addLine("      if (changesValue == null)");
    builder.addLine("        curNode.removeAttribute(keyValue);");
    builder.addLine("      else {");
    builder.addLine("        if (keyValue == 'class') {");
    builder.addLine("          HDLmClassAddEntry(curNode, changesValue);");
    builder.addLine("        }");
    builder.addLine("        else {");
    builder.addLine("          curNode.setAttribute(keyValue, changesValue);");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("  }");
          builder.addLine(newLine);
            builder.addLine("    " + curLine);
          builder.addLine(newLine);
    builder.addLine("  function HDLmGetAttributesString(curNode) {");
    builder.addLine("    let outputStr = '';");
    builder.addLine("    if (!curNode.hasAttributes())");
    builder.addLine("      return outputStr;");
    builder.addLine("    let attrs = curNode.attributes;");
    builder.addLine("    let attrsLength = attrs.length;");
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("      if (outputStr != '')");
    builder.addLine("       outputStr += ' ';");
    builder.addLine("       outputStr += attrs[i].name + '=' + \"'\" + attrs[i].value + \"'\";");
    builder.addLine("    }");
    builder.addLine("    return outputStr;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetLookupIndex(ruleName) {");
    builder.addLine("    let lookupData = {");
          builder.addLine(newLine);
    builder.addLine("                     };");
    builder.addLine("    let lookupIndex = lookupData[ruleName];");
    builder.addLine("    return lookupIndex;");
    builder.addLine("  }");  
    builder.addLine("  function HDLmGetParametersArray() {");
    builder.addLine("    let outputStr = '';");
    builder.addLine("    const parametersArray = [");
      builder.addLine(newLine);
    builder.addLine("                            ];");
    builder.addLine("    return parametersArray;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetPHash(urlStr) {");
    builder.addLine("    let xHttpReq = new XMLHttpRequest();");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlVal = '" + protocolStringGetPHash + "://' + serverNameValue + '/" + HDLmConfigInfo.getPHashName() + "';");
    builder.addLine("    xHttpReq.open('POST', urlVal);");
    builder.addLine("    urlStr = encodeURIComponent(urlStr);");
    builder.addLine("    xHttpReq.send(urlStr);");
    builder.addLine("  }");
    builder.addLine("  {");    
    builder.addLine("    let hostNameStr = location.hostname;");
    builder.addLine("    let linkStr = location.href;");
    builder.addLine("    let pathNameStr = document.location.pathname;");
    builder.addLine("    let sessionIdValue = '" + sessionIdJava + "';");
    builder.addLine("    let eventJson = HDLmGetJsonForLink(linkStr, hostNameStr, pathNameStr, sessionIdValue)");
    builder.addLine("    Object.keys(window).forEach(key => {"); 
    builder.addLine("      if (key.startsWith('onmouse'))");
    builder.addLine("        return;");
    builder.addLine("      if (key.startsWith('onpointer'))");
    builder.addLine("        return;"); 
    builder.addLine("      if (/^on/.test(key)) {");
    builder.addLine("        window.addEventListener(key.slice(2), event => {");  
    builder.addLine("          let eventName = HDLmGetObjectName(event);"); 
    builder.addLine("          let eventJson = HDLmGetJsonForEventObject(event, eventName, hostNameStr, pathNameStr, sessionIdValue)");
    builder.addLine("        });");
    builder.addLine("      }"); 
    builder.addLine("    });");
    builder.addLine("  };");
    builder.addLine("  let HDLmSavedUpdates = new Object();");
    builder.addLine("  let HDLmSavedExtracts = new Object();");
    builder.addLine("  let HDLmSavedNotifies = new Object();");
    builder.addLine("  var HDLmCheckVariable = true;");
    builder.addLine("  const HDLmPHashObject = {");
      builder.addLine(newLine);
    builder.addLine("                          };");
    builder.addLine("  function HDLmSendData(dataStr) {");
    builder.addLine("    dataStr = '" + HDLmDefines.getString("HDLMPOSTDATA") + "=" + "' + dataStr;");
    builder.addLine("    let httpReq = new XMLHttpRequest();");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
    builder.addLine("    httpReq.open('POST', urlStr);");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("    dataStr = encodeURIComponent(dataStr);");
    builder.addLine("    httpReq.send(dataStr);");
    builder.addLine("  }");
    builder.addLine("  function HDLmSendUpdates(savedUpdates, reasonStr, weightStr, errorStr) {");
    builder.addLine("    savedUpdates.reason = reasonStr;");
    builder.addLine("    savedUpdates.weight = weightStr;");
    builder.addLine("    savedUpdates.error = errorStr;");
    builder.addLine("    let updateStr = JSON.stringify(savedUpdates);");
    builder.addLine("    HDLmSendData(updateStr);");
    builder.addLine("  }");
      builder.addLine("  let HDLmIndexValue = null;");
    	builder.addLine("  let HDLmIndexValue = " + sessionIndexStr + ";");
    builder.addLine("  HDLmClassAddCss('.HDLmClassPrimary'," +  
    builder.addLine("  HDLmClassAddCss('.HDLmClassBackground'," + 
    builder.addLine("  let HDLmObsTargetNode = document;");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsCallback = function (mutationsList, HDLmObsObserver) {");
    builder.addLine("    let forceReadyState = false;");
    builder.addLine("    if (document.location.hostname == 'www.themarvelouslandofoz.com' &&");
    builder.addLine("        document.readyState == 'interactive')");
    builder.addLine("      forceReadyState = true;");
    builder.addLine("    HDLmApplyMods(document.readyState, HDLmIndexValue);");
    builder.addLine("    if (document.readyState == 'complete' ||");
    builder.addLine("        forceReadyState == true) {");
    builder.addLine("      HDLmApplyMods(document.readyState, HDLmIndexValue);");
    builder.addLine("    };");
    builder.addLine("  };");
    builder.addLine("  let HDLmObsObserver = new MutationObserver(HDLmObsCallback);");
    builder.addLine("  HDLmObsObserver.observe(HDLmObsTargetNode, HDLmObsConfig);");
    builder.addLine("  let pathValueStr = document.location.pathname;");     
    builder.addLine("  let curMod = {};");      
    builder.addLine("  curMod.enabled = true;");  
    builder.addLine("  curMod.name = '" + modificationName + "';"); 
    builder.addLine("  curMod.parameter = -1;");   
    builder.addLine("  curMod.path = '//.*/';");   
    builder.addLine("  curMod.pathre = true;");   
    builder.addLine("  curMod.type = '" + modificationType + "';");     
    builder.addLine("  curMod.values = [ 'Yes' ];"); 
    builder.addLine("  curMod.valuesCount = 1;");   
    builder.addLine("  const sessionIdJS = '" + sessionIdJava + "';");
    builder.addLine("  const parametersArray = HDLmGetParametersArray()");
    builder.addLine("  const readyState = 'unknown';");
    builder.addLine("  HDLmApplyMod(pathValueStr,"); 
    builder.addLine("               curMod,");  
    builder.addLine("               sessionIdJS,");
    builder.addLine("               HDLmIndexValue,");
    builder.addLine("               parametersArray,");
    builder.addLine("               '" + hostName + "',");  
    builder.addLine("               '" + hostName + "',"); 
    builder.addLine("               '" + divisionName + "',");      
    builder.addLine("               '" + siteName + "',");
      builder.addLine("               '" + secureHostName + "',"); 
      builder.addLine("               null,");
    builder.addLine("               '" + forceSelectString + "',");
    builder.addLine("               '" + logRuleMatchingString + "',");
    builder.addLine("               readyState);");
    builder.addLine("</script>");
    actualJS = builder.getLinesWithSuffix("\r\n");
    HDLmBuildLines  builder;
    builder = new HDLmBuildLines("JS");
    builder.addLine("<script>");
    builder.addLine("  \"use strict\";");
    builder.addLine("  let HDLmNodeIdenTracing = {");
    builder.addLine("    \"none\":  0,");
    builder.addLine("    \"off\":   1,");
    builder.addLine("    \"error\": 2,");
    builder.addLine("    \"all\":   3");
    builder.addLine("  };");
    builder.addLine("  document.addEventListener(\"keydown\", event => {");
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugRulesEnabled\", 'true');");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugNodeIdenEnabled\", 'all');");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("      HDLmToggleStyleSheetEnablement();");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionPostRuleTracingEnabled\", 'true');");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionIgnoreProbability\", 'true');");
    builder.addLine("  });");
    builder.addLine("  function HDLmApplyMod(pathValueStr,");
    builder.addLine("                        curMod,");
    builder.addLine("                        sessionIdJS,");
    builder.addLine("                        sessionIndexValue,");
    builder.addLine("                        parametersArray,");
    builder.addLine("                        proxyDomain,");
    builder.addLine("                        hostNameValue,");
    builder.addLine("                        divisionNameValue,");
    builder.addLine("                        siteNameValue,");
    builder.addLine("                        proxySecureDomain,");
    builder.addLine("                        forceSelectStringValue,");
    builder.addLine("                        logRuleMatching,");
    builder.addLine("                        readyState) {");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoHostName\", hostNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoDivisionName\", divisionNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoSiteName\", siteNameValue);");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
    builder.addLine("      logRuleMatching = true;");
    builder.addLine("    let nodeIdenTracing = HDLmNodeIdenTracing.off;");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
    builder.addLine("      nodeIdenTracing = HDLmNodeIdenTracing.all;");
    builder.addLine("    let postRuleTracing = false;");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
    builder.addLine("      postRuleTracing = true;");
    builder.addLine("    let matchFound = false;");
    builder.addLine("    let matchError = '';");
    builder.addLine("    let matchModifiedName = hostNameValue + '/' + divisionNameValue + '/' + siteNameValue + '/' + curMod.name");
    builder.addLine("    matchModifiedName = HDLmReplaceInString(matchModifiedName);");
    builder.addLine("    let curType = curMod.type;");
    builder.addLine("    while (true) {");
    builder.addLine("      let postTrace = new Object();");
    builder.addLine("      if (curMod.prob < 100.0) {");
    builder.addLine("        let localRandomValue = Math.random();");
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
    builder.addLine("        if (ignoreProbability == null)");
    builder.addLine("          ignoreProbability = 'false';");
    builder.addLine("        if (localRandomValue * 100.0 > curMod.prob &&");
    builder.addLine("            ignoreProbability != 'true') {");
    builder.addLine("          matchError = 'probability';");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, null,");
    builder.addLine("                          sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                          null, null,");
    builder.addLine("                          hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                          curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("            postTrace.matcherror = matchError;");
    builder.addLine("            HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      if (curMod.enabled != true) {");
    builder.addLine("        matchError = 'disabled';");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          HDLmSaveChange(localUpdates, null,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         null, null,");
    builder.addLine("                         hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          postTrace.matcherror = matchError;");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      let matchRes;");
    builder.addLine("      let matchRe;");
    builder.addLine("      if (curMod.pathre === true) {");
    builder.addLine("        let curModLen = curMod.path.length;");
    builder.addLine("        matchRe = new RegExp(curMod.path.substr(2, curModLen-3));");
    builder.addLine("        matchRes = matchRe.test(pathValueStr);");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          postTrace.matchpathre = curMod.pathre;");
    builder.addLine("          postTrace.matchpath = curMod.path;");
    builder.addLine("          postTrace.matchpathvalue = pathValueStr;");
    builder.addLine("          postTrace.matchmatch = matchRes;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        matchRes = (curMod.path === pathValueStr);");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          postTrace.matchpathre = curMod.pathre;");
    builder.addLine("          postTrace.matchpath = curMod.path;");
    builder.addLine("          postTrace.matchpathvalue = pathValueStr;");
    builder.addLine("          postTrace.matchmatch = matchRes;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      if (matchRes == false) {");
    builder.addLine("        matchError = 'Path value mismatch';");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          HDLmSaveChange(localUpdates, null,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         null, null,");
    builder.addLine("                         hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          postTrace.matcherror = matchError;");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        if (logRuleMatching == true) {");
    builder.addLine("          let errorText = HDLmBuildErrorRule(curMod, 'match', pathValueStr);");
    builder.addLine("          HDLmBuildError('Trace', 'Mod', 35, errorText);");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      const fontNames = {");
    builder.addLine("                          'fontcolor':'color',");
    builder.addLine("                          'fontfamily':'font-family',");
    builder.addLine("                          'fontkerning':'font-kerning',");
    builder.addLine("                          'fontsize':'font-size',");
    builder.addLine("                          'fontstyle':'font-style',");
    builder.addLine("                          'fontweight':'font-weight'");
    builder.addLine("                        }");
    builder.addLine("      let parameterNumber = -1;");
    builder.addLine("      let finalLookupIndex = 0;");
    builder.addLine("      let lookupValue = -1.0;");
    builder.addLine("      let sessionIndexValueUsed = false;");
    builder.addLine("      let tempLookupIndex = HDLmGetLookupIndex(curMod.name);");
    builder.addLine("      if (typeof(tempLookupIndex) != 'undefined' &&");
    builder.addLine("          tempLookupIndex != null) {");
    builder.addLine("        lookupValue = sessionIndexValue;");
    builder.addLine("        sessionIndexValueUsed = true;");
    builder.addLine("        finalLookupIndex = tempLookupIndex;");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        parameterNumber = curMod.parameter;");
    builder.addLine("        if (parameterNumber != null &&");
    builder.addLine("            parameterNumber >= 0 &&");
    builder.addLine("            parameterNumber < parametersArray.length)");
    builder.addLine("          lookupValue = parametersArray[parameterNumber];");
    builder.addLine("      }");
    builder.addLine("      let nodeList = HDLmFind(curMod, nodeIdenTracing, postRuleTracing, postTrace);");
    builder.addLine("      let nodeListLength = nodeList.length;");
    builder.addLine("      if (nodeListLength == 0 && curType != 'visit') {");
    builder.addLine("        matchError = 'nonodes';");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("          let   localUpdates = new Object();");
    builder.addLine("          HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         null, null,");
    builder.addLine("                         hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          postTrace.matcherror = matchError;");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      switch (curType) {");
    builder.addLine("        case 'attribute': {");
    builder.addLine("          let curModExtra = curMod.extra;");
    builder.addLine("          let curModExtraArray = curModExtra.split('/');");
    builder.addLine("          let attributeName = curModExtraArray[0];");
    builder.addLine("          let attributeRequest = curModExtraArray[1]");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            matchFound = true;");
    builder.addLine("            if (HDLmIncrementUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("              break;");
    builder.addLine("            HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            if (attributeRequest.toUpperCase() == 'USEPROXYHOST') {");
    builder.addLine("              let attributeValue = curNode.getAttribute(attributeName);");
    builder.addLine("              let oldText = attributeValue;");
    builder.addLine("              let nodeURL = new URL(attributeValue);");
    builder.addLine("              nodeURL.host = proxyDomain;");
    builder.addLine("              let newText = nodeURL.href;");
    builder.addLine("              curNode.setAttribute(attributeName, nodeURL.href);");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("              HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                             sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                             null, null,");
    builder.addLine("                             hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                             curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                             oldText, newText);");
    builder.addLine("              postTrace.matcherror = 'attribute';");
    builder.addLine("              HDLmSendUpdates(localUpdates, 'href', '1.0', postTrace);");
    builder.addLine("            }");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'extract': {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            matchFound = true;");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("              break;");
    builder.addLine("            HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            let oldText;");
    builder.addLine("            if (HDLmSavedExtracts.hasOwnProperty(curMod.name))");
    builder.addLine("              oldText = HDLmSavedExtracts[curMod.name];");
    builder.addLine("            else");
    builder.addLine("              oldText = null;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           null, null,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           oldText, null);");
    builder.addLine("            let localReason = 'extract';");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                curModExtra          != '')");
    builder.addLine("              localReason = curModExtra;");
    builder.addLine("            postTrace.matcherror = 'extract';");
    builder.addLine("            HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'modify': {");
    builder.addLine("          if (proxySecureDomain == null) {");
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
    builder.addLine("            HDLmBuildError('Error', 'Mod', 16, errorText);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            if (curModExtra.toUpperCase() !== 'FIXIFRAMESRC')");
    builder.addLine("              break;");
    builder.addLine("            matchFound = true;");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("              break;");
    builder.addLine("            HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            let nodeSrc = curNode.getAttribute('src');");
    builder.addLine("            let oldText = nodeSrc;");
    builder.addLine("            let nodeURL = new URL(nodeSrc);");
    builder.addLine("            nodeURL.host = proxySecureDomain;");
    builder.addLine("            let newText = nodeURL.href + '&HDLmSessionId=' + sessionIdJS;");
    builder.addLine("            curNode.setAttribute('src', newText);");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           null, null,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           null, null);");
    builder.addLine("            let localReason = 'modify';");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                curModExtra          != '')");
    builder.addLine("              localReason = curModExtra;");
    builder.addLine("            postTrace.matcherror = 'modify';");
    builder.addLine("            HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'notify': {");
    builder.addLine("          let sendUpdates = false;");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let nodeSend = nodeList[i];");
    builder.addLine("            if (HDLmGetUpdateCount(nodeSend, matchModifiedName, readyState) == 0) {");
    builder.addLine("              sendUpdates = true;");
    builder.addLine("              break;");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          let curModExtra = curMod.extra;");
    builder.addLine("          if (sendUpdates) {");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           null, null,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           null, null);");
    builder.addLine("            let localReason = 'notify';");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                curModExtra          != '')");
    builder.addLine("              localReason = curModExtra;");
    builder.addLine("            postTrace.matcherror = 'notify';");
    builder.addLine("            HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("          }");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            matchFound = true;");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("              break;");
    builder.addLine("            HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            curNode.addEventListener('click', (function() {");
    builder.addLine("              return function() {");
    builder.addLine("                let localUpdates = new Object();");
    builder.addLine("                if (curMod.valuesCount <= 0) {");
    builder.addLine("                  HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                                 curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                                 null, null);");
    builder.addLine("                }");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                  let searchText = curMod.values[j];");
    builder.addLine("                  searchText = HDLmModifySearch(searchText);");
    builder.addLine("                  let searchValue;");
    builder.addLine("                  if (HDLmSavedNotifies.hasOwnProperty(searchText))");
    builder.addLine("                    searchValue = HDLmSavedNotifies[searchText];");
    builder.addLine("                  else");
    builder.addLine("                    searchValue = null;");
    builder.addLine("                  HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                                 curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                                 searchValue, null);");
    builder.addLine("                }");
    builder.addLine("                let localReason = 'notify';");
    builder.addLine("                let curModExtra = curMod.extra;");
    builder.addLine("                if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                    curModExtra          != null        &&");
    builder.addLine("                    curModExtra          != '')");
    builder.addLine("                  localReason = curModExtra;");
    builder.addLine("                postTrace.matcherror = 'click';");
    builder.addLine("                HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("              }");
    builder.addLine("            })());");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'visit': {");
    builder.addLine("          let testFlag = false;");
    builder.addLine("          HDLmHandleVisitRequest(curMod.extra, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 parameterNumber, lookupValue,");
    builder.addLine("                                 hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                 pathValueStr);");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'changeattrs':");
    builder.addLine("        case 'changenodes':");
    builder.addLine("        case 'fontcolor':");
    builder.addLine("        case 'fontfamily':");
    builder.addLine("        case 'fontkerning':");
    builder.addLine("        case 'fontsize':");
    builder.addLine("        case 'fontstyle':");
    builder.addLine("        case 'fontweight':");
    builder.addLine("        case 'height':");
    builder.addLine("        case 'image':");
    builder.addLine("        case 'order':");
    builder.addLine("        case 'remove':");
    builder.addLine("        case 'replace':");
    builder.addLine("        case 'script':");
    builder.addLine("        case 'style':");
    builder.addLine("        case 'text':");
    builder.addLine("        case 'textchecked':");
    builder.addLine("        case 'title':");
    builder.addLine("        case 'width': {");
    builder.addLine("          let newTexts = curMod.values;");
    builder.addLine("          let newCount = curMod.valuesCount;");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("            finalLookupIndex = Math.floor(newCount * lookupValue);");
    builder.addLine("            finalLookupIndex = Math.min(finalLookupIndex, newCount - 1);");
    builder.addLine("          }");
    builder.addLine("          let forceSelectFound = false;");
    builder.addLine("          let newText;");
    builder.addLine("          if (lookupValue != null) {");
    builder.addLine("            if (finalLookupIndex >= 0)");
    builder.addLine("              newText = newTexts[finalLookupIndex];");
    builder.addLine("          }");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("            if (newTexts[i].startsWith(forceSelectStringValue)) {");
    builder.addLine("              newText = newTexts[i].substring(forceSelectStringValue.length);");
    builder.addLine("              finalLookupIndex = i;");
    builder.addLine("              forceSelectFound = true;");
    builder.addLine("              break;");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (lookupValue == null &&");
    builder.addLine("              forceSelectFound == false) {");
    builder.addLine("            matchError = 'Null lookup value';");
    builder.addLine("            if (postRuleTracing == true) {");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("              HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                             sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                             null, null,");
    builder.addLine("                             hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                             curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                             null, null);");
    builder.addLine("              postTrace.matcherror = matchError;");
    builder.addLine("              HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("            }");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            matchError = 'Fired';");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            HDLmClassAddSpecialClass(curNode, curType, curModExtra);");
    builder.addLine("            let oldText;");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("              oldText = HDLmGetAttributesString(curNode);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("              oldText = curNode.outerHTML;");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("                     curType == 'fontfamily'  ||");
    builder.addLine("                     curType == 'fontkerning' ||");
    builder.addLine("                     curType == 'fontsize'    ||");
    builder.addLine("                     curType == 'fontstyle'   ||");
    builder.addLine("                     curType == 'fontweight') {");
    builder.addLine("              let newName = fontNames[curType];");
    builder.addLine("              oldText = '';");
    builder.addLine("              if (curNode.style.hasOwnProperty(newName))");
    builder.addLine("                oldText = curNode.style.getPropertyValue(newName);");
    builder.addLine("              else if (curNode.hasAttribute(newName))");
    builder.addLine("                oldText = curNode.getAttribute(newName);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("                     curType == 'width') {");
    builder.addLine("              oldText = '';");
    builder.addLine("              if (curNode.hasAttribute(curType))");
    builder.addLine("                oldText = curNode.getAttribute(curType);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              oldText = '';");
    builder.addLine("              if (curNode.hasAttribute('src')) {");
    builder.addLine("                oldText = curNode.getAttribute('src');");
    builder.addLine("                if (oldText.startsWith('http'))");
    builder.addLine("                  oldText = HDLmRemoveProtocol(oldText);");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("              oldText = '';");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("              oldText = '';");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("              oldText = '';");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              oldText = '';");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("              oldText = '';");
    builder.addLine("              let curModSplit = HDLmStyleSplitString(curModExtra);");
    builder.addLine("              let curModSplitLength = curModSplit.length;");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("                let curStyle = curModSplit[i];");
    builder.addLine("                let curValue = '';");
    builder.addLine("                if (curNode.hasAttribute('style')) {");
    builder.addLine("                  if (curNode.style.hasOwnProperty(curStyle))");
    builder.addLine("                    curValue = curNode.style.getPropertyValue(curStyle);");
    builder.addLine("                }");
    builder.addLine("                if (curValue == '' &&");
    builder.addLine("                    curNode.hasAttribute(curStyle)) {");
    builder.addLine("                  curValue = curNode.getAttribute(curStyle);");
    builder.addLine("                }");
    builder.addLine("                if (curValue != '') {");
    builder.addLine("                  if (oldText != '')");
    builder.addLine("                    oldText += ' '");
    builder.addLine("                  oldText += curValue;");
    builder.addLine("                }");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'text'        ||");
    builder.addLine("                     curType == 'textchecked' ||");
    builder.addLine("                     curType == 'title') {");
    builder.addLine("              oldText = curNode.textContent;");
    builder.addLine("            }");
    builder.addLine("            if (curType == 'textchecked') {");
    builder.addLine("              let textMatch = HDLmCheckTextMatches(oldText, curModExtra,");
    builder.addLine("                                                   matchError, postTrace, postRuleTracing,");
    builder.addLine("                                                   parametersArray, sessionIdJS,");
    builder.addLine("                                                   parameterNumber, lookupValue,");
    builder.addLine("                                                   hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                                   pathValueStr);");
    builder.addLine("              if (!textMatch) {");
    builder.addLine("                matchError = 'textunequal';");
    builder.addLine("                continue;");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            matchFound = true;");
    builder.addLine("            let matchUpdateCount = HDLmGetUpdateCount(curNode, matchModifiedName, readyState);");
    builder.addLine("            if (curType == 'changenodes') {");
    builder.addLine("              if (matchUpdateCount > 255)");
    builder.addLine("                break;");
    builder.addLine("              let testFlag = true;");
    builder.addLine("              let forceBreak = HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("                                               matchError, postTrace, postRuleTracing,");
    builder.addLine("                                               parametersArray, sessionIdJS,");
    builder.addLine("                                               sessionIndexValue, parameterNumber, lookupValue,");
    builder.addLine("                                               hostNameValue, divisionNameValue, siteNameValue,");
    builder.addLine("                                               curMod, pathValueStr, oldText);");
    builder.addLine("              if (forceBreak == true)");
    builder.addLine("                break;");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (matchUpdateCount > 2)");
    builder.addLine("                if (oldText == newText ||");
    builder.addLine("                    oldText.startsWith('data:'))");
    builder.addLine("                  break;");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'remove' ||");
    builder.addLine("                curType == 'replace') {");
    builder.addLine("              let parentNode = curNode.parentNode;");
    builder.addLine("              if (parentNode != null) {");
    builder.addLine("                if (HDLmGetUpdateCount(parentNode, matchModifiedName, readyState) > 0)");
    builder.addLine("                  break;");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'textchecked') {");
    builder.addLine("              if (matchUpdateCount > 1)");
    builder.addLine("                break;");
    builder.addLine("            }");
    builder.addLine("            else {");
    builder.addLine("              if (matchUpdateCount > 0)");
    builder.addLine("                break;");
    builder.addLine("            }");
    builder.addLine("            if (curType == 'remove' ||");
    builder.addLine("                curType == 'replace') {");
    builder.addLine("              let parentNode = curNode.parentNode;");
    builder.addLine("              HDLmIncrementUpdateCount(parentNode, matchModifiedName);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              if (readyState == 'complete')");
    builder.addLine("                HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            }");
    builder.addLine("            else {");
    builder.addLine("              HDLmIncrementUpdateCount(curNode, matchModifiedName);");
    builder.addLine("            }");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("              if (newText.trim() != '')");
    builder.addLine("                HDLmChangeAttributes(curNode, newText);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("              let testFlag = false;");
    builder.addLine("              HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("                              matchError, postTrace, postRuleTracing,");
    builder.addLine("                              sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                              parameterNumber, lookupValue,");
    builder.addLine("                              hostNameValue, divisionNameValue, siteNameValue,");
    builder.addLine("                              curMod, pathValueStr, oldText);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("                     curType == 'fontfamily'  ||");
    builder.addLine("                     curType == 'fontkerning' ||");
    builder.addLine("                     curType == 'fontsize'    ||");
    builder.addLine("                     curType == 'fontstyle'   ||");
    builder.addLine("                     curType == 'fontweight') {");
    builder.addLine("              if (curType == 'fontsize')");
    builder.addLine("                newText = HDLmBuildSuffix(newText, 'px');");
    builder.addLine("              let newName = fontNames[curType];");
    builder.addLine("              curNode.style.setProperty(newName, newText);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("                     curType == 'width') {");
    builder.addLine("              newText = HDLmBuildSuffix(newText, 'px');");
    builder.addLine("              curNode.setAttribute(curType, newText);");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (newText.startsWith('//'))");
    builder.addLine("                curNode.setAttribute('src', 'https:' + newText);");
    builder.addLine("              if (newText.startsWith('data:'))");
    builder.addLine("                curNode.setAttribute('src', newText);");
    builder.addLine("              if (1 == 1) {");
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                curNode.style.setProperty('text-align', 'center');");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("              let nodeChildrenLength = curNode.children.length;");
    builder.addLine("              let newOrder = HDLmBuildOrder(newText, nodeChildrenLength);");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("                curNode.appendChild(curNode.children[newOrder[j]]);");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("              if (HDLmCompareCaseInsensitive(newText, 'yes'))");
    builder.addLine("                curNode.remove();");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("              if (newText != '') {");
    builder.addLine("                let parentNode = curNode.parentNode;");
    builder.addLine("                let newNodeObj = JSON.parse(newText);");
    builder.addLine("                let newNode = HDLmBuildNodeFromObject(newNodeObj);");
    builder.addLine("                parentNode.replaceChild(newNode, curNode);");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              if (readyState == 'complete') {");
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
    builder.addLine("                window[functionStr]();");
    builder.addLine("              }");
    builder.addLine("              matchError = readyState;");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("              if (curModExtra == 'background-image') {");
    builder.addLine("                let newData = newText;");
    builder.addLine("                if (newData.startsWith('url')) {");
    builder.addLine("                }");
    builder.addLine("                else if (newData.startsWith('data:')) {");
    builder.addLine("                  newData = 'url(' + newData + ')';");
    builder.addLine("                }");
    builder.addLine("                else if (newData.startsWith('http')) {");
    builder.addLine("                  newData = 'url(' + newData + ')';");
    builder.addLine("                }");
    builder.addLine("                else {");
    builder.addLine("                  if (newData.startsWith('//'))");
    builder.addLine("                    newData = 'url(https:' + newData + ')';");
    builder.addLine("                }");
    builder.addLine("                if (1 == 1) {");
    builder.addLine("                  curNode.style.setProperty(curModExtra, newData);");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                }");
    builder.addLine("                if (1 == 2) {");
    builder.addLine("                  let finalUrl = HDLmGetBackground(curNode, 'junk.jpg');");
    builder.addLine("                }");
    builder.addLine("              }");
    builder.addLine("              else {");
    builder.addLine("                let curModSplit = HDLmStyleSplitString(curModExtra);");
    builder.addLine("                let newTextSplit = HDLmStyleFixValues(newText);");
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("                  let newValue = newTextSplit[i];");
    builder.addLine("                  if (newValue == 'none')");
    builder.addLine("                    continue;");
    builder.addLine("                  curNode.style.setProperty(curModSplit[i], newValue);");
    builder.addLine("                }");
    builder.addLine("              }");
    builder.addLine("            }");
    builder.addLine("            else if (curType == 'title' ||");
    builder.addLine("                     curType == 'text'  ||");
    builder.addLine("                     curType == 'textchecked') {");
    builder.addLine("              curNode.textContent = newText;");
    builder.addLine("            }");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           parameterNumber, lookupValue,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           oldText, newText);");
    builder.addLine("            postTrace.matcherror = matchError;");
    builder.addLine("            HDLmSendUpdates(localUpdates, curType, '1.0', postTrace);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        default: {");
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("          HDLmBuildError('Error', 'Mod', 31, errorText);");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      if (matchFound === false) {");
    builder.addLine("        if (matchError === '') {");
    builder.addLine("          matchError = 'nomatch';");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           null, null,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                           curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                           null, null);");
    builder.addLine("            postTrace.matcherror = matchError;");
    builder.addLine("            HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      break;");
    builder.addLine("    }");
    builder.addLine("    if (matchError != '' &&");
    builder.addLine("        logRuleMatching == true) {");
    builder.addLine("      let errorText = HDLmBuildErrorRule(curMod, matchError, pathValueStr);");
    builder.addLine("      HDLmBuildError('Trace', 'Mod', 2, errorText);");
    builder.addLine("    }");
    builder.addLine("    return matchFound;");
    builder.addLine("  }");
    builder.addLine("  function HDLmArrayJoin(curArray, joinChar) {");
    builder.addLine("    let rv = \"\";");
    builder.addLine("    let arrayType = typeof(curArray);");
    builder.addLine("    if (arrayType == 'undefined') {");
    builder.addLine("      rv = 'undefined';");
    builder.addLine("      return rv;");
    builder.addLine("    }");
    builder.addLine("    if (curArray == null) {");
    builder.addLine("      rv = null;");
    builder.addLine("      return rv;");
    builder.addLine("    }");
    builder.addLine("    let arrayLength = curArray.length;");
    builder.addLine("    if (arrayLength <= 0)");
    builder.addLine("      return rv;");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("      if (i > 0)");
    builder.addLine("        rv += joinChar;");
    builder.addLine("      let curValue = curArray[i];");
    builder.addLine("      if (curValue == null)");
    builder.addLine("        rv += 'null';");
    builder.addLine("      else");
    builder.addLine("        rv += String(curValue);");
    builder.addLine("    }");
    builder.addLine("    return rv;");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildErrorRule(curMod, matchError, pathValueStr) {");
    builder.addLine("    let errorText = \"Modification \" + matchError + \" - \";");
    builder.addLine("    errorText += \"name (\";");
    builder.addLine("    errorText += curMod.name;");
    builder.addLine("    errorText += \")\";");
    builder.addLine("    if (Array.isArray(curMod.find) &&");
    builder.addLine("        curMod.find.length > 0) {");
    builder.addLine("      errorText += \" key (\";");
    builder.addLine("      let findFirst = curMod.find[0];");
    builder.addLine("      errorText += findFirst.attributeName;");
    builder.addLine("      errorText += \")\";");
    builder.addLine("      errorText += \" value (\";");
    builder.addLine("      errorText += findFirst.attributeValue;");
    builder.addLine("      errorText += \")\";");
    builder.addLine("    }");
    builder.addLine("    errorText += ' - ' + pathValueStr;");
    builder.addLine("    return errorText;");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildNodeFromObject(domObj) {");
    builder.addLine("    if (domObj.type != 'Element')");
    builder.addLine("      return null;");
    builder.addLine("    if (domObj.tag == null)");
    builder.addLine("      return null;");
    builder.addLine("    let domNode = document.createElement(domObj.tag);");
    builder.addLine("    let attrObj = domObj.attributes;");
    builder.addLine("    if (attrObj != null) {");
    builder.addLine("      for (let attrObjName in attrObj) {");
    builder.addLine("        domNode.setAttribute(attrObjName, attrObj[attrObjName]);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    let domText = domObj.text;");
    builder.addLine("    if (domText != null) {");
    builder.addLine("      let textNode = document.createTextNode(domText);");
    builder.addLine("      domNode.appendChild(textNode);");
    builder.addLine("    }");
    builder.addLine("    let domSubNodes = domObj.subnodes;");
    builder.addLine("    if (domSubNodes != null) {");
    builder.addLine("      let domSubNodesLength = domSubNodes.length;");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("        let domSubNode = domSubNodes[i];");
    builder.addLine("        let domSubNodeNode = HDLmBuildNodeFromObject(domSubNode);");
    builder.addLine("        if (domSubNodeNode != null)");
    builder.addLine("          domNode.appendChild(domSubNodeNode);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return domNode;");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildOrder(newText, totalLength) {");
    builder.addLine("    newText = newText.replace(/,/g, ' ');");
    builder.addLine("    let newTextArray = newText.split(' ');");
    builder.addLine("    let newIntArray = [];");
    builder.addLine("    let outIntArray = [];");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("      if (newTextArray[i] == '')");
    builder.addLine("        continue;");
    builder.addLine("      let tempInt = parseInt(newTextArray[i]);");
    builder.addLine("      if (typeof(tempInt) != 'number')");
    builder.addLine("        continue;");
    builder.addLine("      newIntArray.push(tempInt);");
    builder.addLine("    }");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("      if (newIntArray.includes(i) == false)");
    builder.addLine("        newIntArray.push(i);");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("      let ix = tempIntArray.indexOf(newIntArray[i]);");
    builder.addLine("      outIntArray.push(ix);");
    builder.addLine("      tempIntArray.splice(ix, 1);");
    builder.addLine("      tempIntArray.push(ix)");
    builder.addLine("    }");
    builder.addLine("    return outIntArray;");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildSuffix(newValue, suffixStr) {");
    builder.addLine("    if ((typeof(newValue) == 'number') &&");
    builder.addLine("        newValue != '')");
    builder.addLine("      newValue += suffixStr;");
    builder.addLine("    return newValue");
    builder.addLine("  }");
    builder.addLine("  function HDLmChangeNodes(curNode, jsonText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("                           matchError, postTrace, postRuleTracing,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           parameterNumber, lookupValue,");
    builder.addLine("                           hostNameValue, divisionNameValue, siteNameValue,");
    builder.addLine("                           curMod, pathValueStr, oldText) {");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("    let forceBreak = false;");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("      if (!changesObj.hasOwnProperty(keyValue))");
    builder.addLine("        continue;");
    builder.addLine("      let changesValue = changesObj[keyValue];");
    builder.addLine("      switch (keyValue) {");
    builder.addLine("        case 'text':");
    builder.addLine("        case 'title': {");
    builder.addLine("          if (matchUpdateCount > 0) {");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (testFlag == false)");
    builder.addLine("            curNode.textContent = changesValue;");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'textchecked': {");
    builder.addLine("          let actualText = curNode.textContent;");
    builder.addLine("          let requiredText = changesValue[0];");
    builder.addLine("          let changesMatch = HDLmCheckTextMatches(actualText, requiredText,");
    builder.addLine("                                                  matchError, postTrace, postRuleTracing,");
    builder.addLine("                                                  parametersArray, sessionIdJS,");
    builder.addLine("                                                  parameterNumber, lookupValue,");
    builder.addLine("                                                  hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                                  pathValueStr);");
    builder.addLine("          if (matchUpdateCount > 1) {");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (changesMatch && testFlag == false)");
    builder.addLine("            curNode.textContent = changesValue[1];");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        case 'visit': {");
    builder.addLine("          let countHigh = HDLmHandleVisitRequest(changesValue, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("                                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                                 parameterNumber, lookupValue,");
    builder.addLine("                                                 hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                                 pathValueStr);");
    builder.addLine("          if (countHigh == true)");
    builder.addLine("            forceBreak = true;");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        default: {");
    builder.addLine("          if (matchUpdateCount > 0) {");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (changesValue == null) {");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("              curNode.style.removeProperty(keyValue);");
    builder.addLine("          }");
    builder.addLine("          else  {");
    builder.addLine("            let changesType = typeof changesValue;");
    builder.addLine("            if (changesType == 'number') {");
    builder.addLine("              changesValue = changesValue.toString();");
    builder.addLine("              changesValue += 'px';");
    builder.addLine("            }");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("              curNode.style.setProperty(keyValue, changesValue);");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return forceBreak;");
    builder.addLine("  }");
    builder.addLine("  function HDLmCheckTextMatches(actualText, requiredText,");
    builder.addLine("                                matchError, postTrace, postRuleTracing,");
    builder.addLine("                                parametersArray, sessionIdJS,");
    builder.addLine("                                parameterNumber, lookupValue,");
    builder.addLine("                                hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                pathValueStr) {");
    builder.addLine("    let rv;");
    builder.addLine("    let requiredTextLower = requiredText.toLowerCase();");
    builder.addLine("    let actualTextLower = actualText.toLowerCase();");
    builder.addLine("    if (actualTextLower.indexOf(requiredTextLower) === -1) {");
    builder.addLine("      if (postRuleTracing == true) {");
    builder.addLine("        let localUpdates = new Object();");
    builder.addLine("        matchError = 'textunequal';");
    builder.addLine("        HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                       sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                       parameterNumber, lookupValue,");
    builder.addLine("                       hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                       curMod.path, curMod.type, pathValueStr, actualText, requiredText);");
    builder.addLine("        postTrace.matcherror = matchError;");
    builder.addLine("        HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("      }");
    builder.addLine("      rv = false;;");
    builder.addLine("    }");
    builder.addLine("    else");
    builder.addLine("      rv = true;");
    builder.addLine("    return rv;");
    builder.addLine("  }");
    builder.addLine("  function HDLmClassAddSpecialClass(curNode, curType, extraStr) {");
    builder.addLine("    if (curType == 'order')");
    builder.addLine("      return;");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("      HDLmClassAddEntry(curNode, 'HDLmClassBackground');");
    builder.addLine("      return;");
    builder.addLine("    }");
    builder.addLine("    HDLmClassAddEntry(curNode, 'HDLmClassPrimary');");
    builder.addLine("  }");
    builder.addLine("  function HDLmClassAddCss(passedName, passedRules) {");
    builder.addLine("    var styleTitle = 'HDLmSessionClasses';");
    builder.addLine("    var styleVar = document.createElement('style');");
    builder.addLine("    styleVar.type = 'text/css';");
    builder.addLine("    styleVar.title = styleTitle;");
    builder.addLine("    document.getElementsByTagName('head')[0].appendChild(styleVar);");
    builder.addLine("    styleVar.sheet.insertRule(passedName+\"{\"+passedRules+\"}\", 0);");
    builder.addLine("    var disabledStatus = sessionStorage.getItem(styleTitle + 'Disabled');");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("      disabledStatus = true;");
    builder.addLine("    if (disabledStatus == 'true')");
    builder.addLine("      disabledStatus = true;");
    builder.addLine("    if (disabledStatus == 'false')");
    builder.addLine("      disabledStatus = false;");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("          styleSheet.title == styleTitle) {");
    builder.addLine("        if (styleSheet.disabled != disabledStatus)");
    builder.addLine("          styleSheet.disabled = disabledStatus;");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("  }");
    builder.addLine("  function HDLmClassAddEntry(elementNodeReference, newClass) {");
    builder.addLine("    const elementClasses = elementNodeReference.classList;");
    builder.addLine("    if (elementClasses.length == 0)");
    builder.addLine("      elementClasses.add(newClass);");
    builder.addLine("    else if (elementClasses.contains(newClass) == false)");
    builder.addLine("      elementClasses.add(newClass);");
    builder.addLine("  }");
    builder.addLine("  function HDLmCompareCaseInsensitive(firstStr, secondStr) {");
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
    builder.addLine("  }");
    builder.addLine("  function HDLmErrorToString(errorObj) {");
    builder.addLine("    let newObj = {};");
    builder.addLine("    if (typeof errorObj === 'string') {");
    builder.addLine("      newObj.name = '';");
    builder.addLine("      newObj.message = errorObj;");
    builder.addLine("      newObj.reason = 'exception';");
    builder.addLine("    }");
    builder.addLine("    else {");
    builder.addLine("      newObj.name = errorObj.name;");
    builder.addLine("      newObj.message = errorObj.message;");
    builder.addLine("      newObj.stack = errorObj.stack;");
    builder.addLine("      newObj.reason = 'exception';");
    builder.addLine("    }");
    builder.addLine("    return JSON.stringify(newObj);");
    builder.addLine("  }");
    builder.addLine("  function HDLmFind(curMod, nodeIdenTracing, postRuleTracing, postTrace) {");
    builder.addLine("    let nodeList = [];");
    builder.addLine("    if (curMod.cssselector !== '') {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        postTrace.findtype = 'CSS Selector';");
    builder.addLine("        postTrace.findvalue = curMod.cssselector;");
    builder.addLine("      }");
    builder.addLine("      nodeList = document.querySelectorAll(curMod.cssselector);");
    builder.addLine("    }");
    builder.addLine("    else if (curMod.xpath !== '') {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        postTrace.findtype = 'XPath';");
    builder.addLine("        postTrace.findvalue = curMod.xpath;");
    builder.addLine("      }");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("                                       XPathResult.ORDERED_NODE_ITERATOR_TYPE,");
    builder.addLine("                                       null);");
    builder.addLine("      let thisNode = nodeIter.iterateNext();");
    builder.addLine("      while (thisNode) {");
    builder.addLine("        nodeList.push(thisNode);");
    builder.addLine("        thisNode = nodeIter.iterateNext();");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    else if (curMod.nodeiden !== null) {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        postTrace.findtype = 'Node identifier';");
    builder.addLine("        postTrace.findvalue = curMod.nodeiden;");
    builder.addLine("      }");
    builder.addLine("      nodeList = HDLmFindNodeIden(curMod, nodeIdenTracing, postRuleTracing, postTrace);");
    builder.addLine("    }");
    builder.addLine("    else {");
    builder.addLine("      let findsArray = curMod.find;");
    builder.addLine("      nodeList = [document];");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        postTrace.findtype = 'Finds';");
    builder.addLine("        postTrace.findvalues = curMod.find;");
    builder.addLine("      }");
    builder.addLine("      let findsArrayLength = findsArray.length");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("        let findEntry = findsArray[i];");
    builder.addLine("        nodeList = HDLmFindOneLevel(nodeList, findEntry);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return nodeList;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindNodeIden(curMod, nodeIdenTracing, postRuleTracing, postTrace) {");
    builder.addLine("    let   nodeElement;");
    builder.addLine("    let   nodeElements = [];");
    builder.addLine("    let   nodeIden = curMod.nodeiden;");
    builder.addLine("    let   nodeList = [];");
    builder.addLine("    let   nodeAttributes = nodeIden.attributes;");
    builder.addLine("    let   nodeCounts = nodeIden.counts;");
    builder.addLine("    let   nodeType = nodeIden.type;");
    builder.addLine("    let   nodeValue = null;");
    builder.addLine("    switch (nodeType) {");
    builder.addLine("      case 'tag': {");
    builder.addLine("        let nodeTag = nodeAttributes.tag;");
    builder.addLine("        nodeValue = nodeTag;");
    builder.addLine("        nodeElements = document.getElementsByTagName(nodeTag);");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          postTrace.nodegetby = 'tag';");
    builder.addLine("          postTrace.nodegetvalue = nodeTag;");
    builder.addLine("          postTrace.nodecount = nodeElements.length;");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      case 'id': {");
    builder.addLine("        let nodeId = nodeAttributes.id;");
    builder.addLine("        nodeValue = nodeId;");
    builder.addLine("        nodeElement = document.getElementById(nodeId);");
    builder.addLine("        if (nodeElement != null)");
    builder.addLine("          nodeElements = [nodeElement];");
    builder.addLine("        else");
    builder.addLine("          nodeElements = [];");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          postTrace.nodegetby = 'id';");
    builder.addLine("          postTrace.nodegetvalue = nodeId;");
    builder.addLine("          postTrace.nodecount = nodeElements.length;");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      case 'class': {");
    builder.addLine("        let nodeClass;");
    builder.addLine("        if (nodeAttributes.hasOwnProperty('bestclass'))");
    builder.addLine("          nodeClass = nodeAttributes['bestclass'];");
    builder.addLine("        else {");
    builder.addLine("          let nodeClassList = nodeAttributes.class;");
    builder.addLine("          nodeClass = nodeClassList[0];");
    builder.addLine("        }");
    builder.addLine("        nodeValue = nodeClass;");
    builder.addLine("        nodeElements = document.getElementsByClassName(nodeClass);");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            (nodeIdenTracing == HDLmNodeIdenTracing.error && nodeClass == '')) {");
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          postTrace.nodegetby = 'class';");
    builder.addLine("          postTrace.nodegetvalue = nodeClass;");
    builder.addLine("          postTrace.nodecount = nodeElements.length;");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      case 'name': {");
    builder.addLine("        let nodeName = nodeAttributes.name;");
    builder.addLine("        nodeValue = nodeName;");
    builder.addLine("        nodeElements = document.getElementsByName(nodeName);");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          postTrace.nodegetby = 'name';");
    builder.addLine("          postTrace.nodegetvalue = nodeName;");
    builder.addLine("          postTrace.nodecount = nodeElements.length;");
    builder.addLine("        }");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      default: {");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("        HDLmBuildError('Error', 'NodeIden', 40, errorText);");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    let   nodeElementsLength = nodeElements.length;");
    builder.addLine("    if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        (nodeIdenTracing == HDLmNodeIdenTracing.error && nodeElementsLength == 0)) {");
    builder.addLine("      let   nodeText = nodeType;");
    builder.addLine("      if (nodeValue != null)");
    builder.addLine("        nodeText = nodeType + '/' + nodeValue");
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
    builder.addLine("      HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("    }");
    builder.addLine("    let nodeIdenCheckType = 'full';");
    builder.addLine("    if (nodeCounts[nodeType] == 1 && nodeElementsLength == 1)");
    builder.addLine("      nodeIdenCheckType = 'partial';");
    builder.addLine("    nodeList = HDLmFindNodeIdenCheck(nodeElements,");
    builder.addLine("                                     nodeIden,");
    builder.addLine("                                     nodeIdenCheckType,");
    builder.addLine("                                     nodeIdenTracing,");
    builder.addLine("                                     postRuleTracing,");
    builder.addLine("                                     postTrace);");
    builder.addLine("    return nodeList;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindNodeIdenCheck(nodeElements,");
    builder.addLine("                                 nodeIden,");
    builder.addLine("                                 nodeIdenCheckType,");
    builder.addLine("                                 nodeIdenTracing,");
    builder.addLine("                                 postRuleTracing,");
    builder.addLine("                                 postTrace) {");
    builder.addLine("    let nodeList = [];");
    builder.addLine("    let nodeCounter = 0;");
    builder.addLine("    let postTraceName;");
    builder.addLine("    let nodeElementsLength = nodeElements.length;");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("      let currentElement = nodeElements[i];");
    builder.addLine("      let   grandParentElement;");
    builder.addLine("      let   parentElement;");
    builder.addLine("      nodeCounter++;");
    builder.addLine("      postTraceName = 'nodetarget';");
    builder.addLine("      if (nodeCounter > 1)");
    builder.addLine("        postTraceName += String(nodeCounter-1)");
    builder.addLine("      let   nodeCurrentAttributes = nodeIden.attributes;");
    builder.addLine("      let   currentMatchValue = HDLmFindNodeIdenMatch(currentElement,");
    builder.addLine("                                                      nodeCurrentAttributes,");
    builder.addLine("                                                      nodeIdenTracing,");
    builder.addLine("                                                      postRuleTracing,");
    builder.addLine("                                                      postTrace,");
    builder.addLine("                                                      postTraceName);");
    builder.addLine("      if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          (nodeIdenTracing == HDLmNodeIdenTracing.error && currentMatchValue < 0.95)) {");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("        HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("      }");
    builder.addLine("      if (currentMatchValue < 0.95)");
    builder.addLine("        continue elementLoop;");
    builder.addLine("      while (true) {");
    builder.addLine("        parentElement = currentElement.parentElement;");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("            parentElement == null)");
    builder.addLine("          break;");
    builder.addLine("        if (nodeIden.hasOwnProperty('parent') == false)");
    builder.addLine("          break;");
    builder.addLine("        postTraceName = 'nodeparent';");
    builder.addLine("        if (nodeCounter > 1)");
    builder.addLine("          postTraceName += String(nodeCounter-1);");
    builder.addLine("        let   nodeParentAttributes = nodeIden.parent;");
    builder.addLine("        if (typeof nodeParentAttributes == 'undefined' ||");
    builder.addLine("            nodeParentAttributes == null)");
    builder.addLine("          break;");
    builder.addLine("        let   parentMatchValue = HDLmFindNodeIdenMatch(parentElement,");
    builder.addLine("                                                       nodeParentAttributes,");
    builder.addLine("                                                       nodeIdenTracing,");
    builder.addLine("                                                       postRuleTracing,");
    builder.addLine("                                                       postTrace,");
    builder.addLine("                                                       postTraceName);");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            (nodeIdenTracing == HDLmNodeIdenTracing.error && parentMatchValue < 0.95)) {");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        }");
    builder.addLine("        if (parentMatchValue < 0.95)");
    builder.addLine("          continue elementLoop;");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      while (true) {");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("            parentElement == null)");
    builder.addLine("          break;");
    builder.addLine("        if (nodeIden.hasOwnProperty('grandparent') == false)");
    builder.addLine("          break;");
    builder.addLine("        grandParentElement = parentElement.parentElement;");
    builder.addLine("        if (typeof grandParentElement == 'undefined' ||");
    builder.addLine("            grandParentElement == null)");
    builder.addLine("          break;");
    builder.addLine("        postTraceName = 'nodegrandparent';");
    builder.addLine("        if (nodeCounter > 1)");
    builder.addLine("          postTraceName += String(nodeCounter-1);");
    builder.addLine("        let   nodeGrandParentAttributes = nodeIden.grandparent;");
    builder.addLine("        if (typeof nodeGrandParentAttributes == 'undefined' ||");
    builder.addLine("            nodeGrandParentAttributes == null)");
    builder.addLine("          break;");
    builder.addLine("        let   grandParentMatchValue = HDLmFindNodeIdenMatch(grandParentElement,");
    builder.addLine("                                                            nodeGrandParentAttributes,");
    builder.addLine("                                                            nodeIdenTracing,");
    builder.addLine("                                                            postRuleTracing,");
    builder.addLine("                                                            postTrace,");
    builder.addLine("                                                            postTraceName);");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            (nodeIdenTracing == HDLmNodeIdenTracing.error && grandParentMatchValue < 0.95)) {");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("          HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("        }");
    builder.addLine("        if (grandParentMatchValue < 0.95)");
    builder.addLine("          continue elementLoop;");
    builder.addLine("        break;");
    builder.addLine("      }");
    builder.addLine("      nodeList.push(currentElement);");
    builder.addLine("    }");
    builder.addLine("    return nodeList;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindNodeIdenMatch(nodeElement,");
    builder.addLine("                                 nodeAttributes,");
    builder.addLine("                                 nodeIdenTracing,");
    builder.addLine("                                 postRuleTracing,");
    builder.addLine("                                 postTrace,");
    builder.addLine("                                 postName) {");
    builder.addLine("    let   denominator = 0.0;");
    builder.addLine("    let   nodeActualValue;");
    builder.addLine("    let   nodeAttributeValue;");
    builder.addLine("    let   nodeAttributeChecks = [];");
    builder.addLine("    let   numerator = 0.0;");
    builder.addLine("    let   numeratorIncrementValue;");
    builder.addLine("    if (postRuleTracing) {");
    builder.addLine("      nodeActualValue = nodeElement.tagName;");
    builder.addLine("      nodeAttributeValue = nodeAttributes.tag");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      nodeAttributeCheck.type = 'tag';");
    builder.addLine("      nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("      nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("      let   traceValue = 0.0;");
    builder.addLine("      if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag))");
    builder.addLine("        traceValue = 1.0;");
    builder.addLine("      nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("      postTrace[postName + 'tag'] = nodeAttributeCheck;");
    builder.addLine("    }");
    builder.addLine("    if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag) == false) {");
    builder.addLine("      return 0.0;");
    builder.addLine("    }");
    builder.addLine("    let nodeAttributeKeys = Object.keys(nodeAttributes);");
    builder.addLine("    let nodeAttributeKeysLength = nodeAttributeKeys.length;");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("      let nodeAttributeKey = nodeAttributeKeys[i];");
    builder.addLine("      if (nodeAttributeKey == 'bestclass')");
    builder.addLine("        continue;");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      numeratorIncrementValue = 0.0;");
    builder.addLine("      denominator++;");
    builder.addLine("      nodeAttributeValue = nodeAttributes[nodeAttributeKey];");
    builder.addLine("      if (nodeAttributeKey == 'tag') {");
    builder.addLine("        nodeActualValue = nodeElement.tagName;");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeActualValue, nodeAttributeValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeActualValue, nodeAttributeValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeActualValue, nodeAttributeValue))");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'class') {");
    builder.addLine("        if (Array.isArray(nodeAttributeValue) &&");
    builder.addLine("            nodeAttributeValue.length > 0)");
    builder.addLine("          nodeAttributeValue = nodeAttributeValue[0];");
    builder.addLine("        let nodeActualValueString = nodeElement.getAttribute('class');");
    builder.addLine("        if (nodeActualValueString != null) {");
    builder.addLine("          let nodeActualValueSplitArray = nodeActualValueString.split(' ');");
    builder.addLine("          let nodeActualValueSplitArrayLen = nodeActualValueSplitArray.length;");
    builder.addLine("          let nodeActualValueSplit = [];");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("            let nodeActualValueSplitValue = nodeActualValueSplitArray[i];");
    builder.addLine("            if (nodeActualValueSplitValue.endsWith('\\n')) {");
    builder.addLine("              let nodeActualValueSplitValueLen = nodeActualValueSplitValue.length;");
    builder.addLine("              nodeActualValueSplitValue = nodeActualValueSplitValue.substr(0, nodeActualValueSplitValueLen-1);");
    builder.addLine("            }");
    builder.addLine("            if (nodeActualValueSplitValue.length > 0)");
    builder.addLine("              nodeActualValueSplit.push(nodeActualValueSplitValue);");
    builder.addLine("          }");
    builder.addLine("          if (nodeActualValueSplit.length > 0) {");
    builder.addLine("            nodeActualValue = [...nodeActualValueSplit];");
    builder.addLine("          }");
    builder.addLine("          else");
    builder.addLine("            nodeActualValue = null;");
    builder.addLine("        }");
    builder.addLine("        else");
    builder.addLine("          nodeActualValue = null;");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              nodeActualValue.includes(nodeAttributeValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              nodeActualValue.includes(nodeAttributeValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (nodeActualValue.includes(nodeAttributeValue))");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'innertext') {");
    builder.addLine("        let nodeIndexOf;");
    builder.addLine("        let nodeInnerText = nodeElement.innerText;");
    builder.addLine("        if ((typeof nodeInnerText) == 'undefined')");
    builder.addLine("          nodeInnerText = null;");
    builder.addLine("        if (nodeInnerText != null) {");
    builder.addLine("          nodeIndexOf = nodeInnerText.indexOf('ï¿½');");
    builder.addLine("          if (nodeIndexOf >= 0)");
    builder.addLine("            nodeInnerText = nodeInnerText.substring(0, nodeIndexOf);");
    builder.addLine("          nodeIndexOf = nodeInnerText.indexOf('\\n');");
    builder.addLine("          if (nodeIndexOf >= 0)");
    builder.addLine("            nodeInnerText = nodeInnerText.substring(0, nodeIndexOf);");
    builder.addLine("          nodeInnerText = nodeInnerText.toLowerCase().trim();");
    builder.addLine("          if (nodeInnerText.length > 20)");
    builder.addLine("            nodeInnerText = nodeInnerText.substring(0, 20);");
    builder.addLine("        }");
    builder.addLine("        nodeActualValue = nodeInnerText;");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'phash') {");
    builder.addLine("        nodeActualValue = nodeAttributeValue;");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'src') {");
    builder.addLine("        nodeActualValue = nodeElement.getAttribute(nodeAttributeKey);");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("        while (true) {");
    builder.addLine("          let   nodeActualIndex;");
    builder.addLine("          let   nodeActualPHash;");
    builder.addLine("          let   nodeActualUrl;");
    builder.addLine("          let   nodeAttributesPHashSimilarity;");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('http');");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualUrl = HDLmRemoveProtocol(nodeActualValue);");
    builder.addLine("          nodeActualPHash = HDLmFindPHash(nodeActualUrl);");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("            HDLmGetPHash(nodeActualUrl);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("            break;");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("          nodeAttributesPHashSimilarity = HDLmHammingDistanceAdjusted(nodeAttributesPHashValue,");
    builder.addLine("                                                                      nodeActualPHash);");
    builder.addLine("          nodePHashCheck = true;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("            let   errorText;");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("                (nodeIdenTracing == HDLmNodeIdenTracing.error && nodeAttributesPHashSimilarity >= 0.10)) {");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("            nodeAttributeCheck.attributevalue = nodeAttributesPHashValue;");
    builder.addLine("            nodeAttributeCheck.actualvalue = nodeActualPHash;");
    builder.addLine("            nodeAttributeCheck.matchvalue = nodeAttributesPHashSimilarity;");
    builder.addLine("            nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("          }");
    builder.addLine("          if (nodeAttributesPHashSimilarity < 0.10) {");
    builder.addLine("            numeratorIncrementValue = 1.0;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("                nodeAttributeValue == nodeActualValue)");
    builder.addLine("              traceValue = 1.0;");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("                (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("            nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("            nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("                nodeAttributeValue == nodeActualValue)");
    builder.addLine("              traceValue = 1.0;");
    builder.addLine("            nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("            nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("          }");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            continue;");
    builder.addLine("          if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("            numeratorIncrementValue = 1.0;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      else if (nodeAttributeKey == 'style') {");
    builder.addLine("        nodeActualValue = nodeElement.getAttribute(nodeAttributeKey);");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("        while (true) {");
    builder.addLine("          let   nodeActualIndex;");
    builder.addLine("          let   nodeActualPHash;");
    builder.addLine("          let   nodeActualUrl;");
    builder.addLine("          let   nodeAttributesPHashSimilarity;");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('background-image');");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('url(\"http');");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("            break;");
    builder.addLine("          nodeActualUrl = nodeActualValue.substr(nodeActualIndex+5);");
    builder.addLine("          nodeActualIndex = nodeActualUrl.indexOf('\")');");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("            break");
    builder.addLine("          nodeActualUrl = nodeActualUrl.substring(0, nodeActualIndex);");
    builder.addLine("          nodeActualUrl = HDLmRemoveProtocol(nodeActualUrl);");
    builder.addLine("          nodeActualPHash = HDLmFindPHash(nodeActualUrl);");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("            HDLmGetPHash(nodeActualUrl);");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("            break;");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("          nodeAttributesPHashSimilarity = HDLmHammingDistanceAdjusted(nodeAttributesPHashValue,");
    builder.addLine("                                                                      nodeActualPHash);");
    builder.addLine("          nodePHashCheck = true;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("            let   errorText;");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("                (nodeIdenTracing == HDLmNodeIdenTracing.error && nodeAttributesPHashSimilarity >= 0.10)) {");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("            nodeAttributeCheck.attributevalue = nodeAttributesPHashValue;");
    builder.addLine("            nodeAttributeCheck.actualvalue = nodeActualPHash;");
    builder.addLine("            nodeAttributeCheck.matchvalue = nodeAttributesPHashSimilarity;");
    builder.addLine("            nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("          }");
    builder.addLine("          if (nodeAttributesPHashSimilarity < 0.10) {");
    builder.addLine("            numeratorIncrementValue = 1.0;");
    builder.addLine("          }");
    builder.addLine("          break;");
    builder.addLine("        }");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("                nodeAttributeValue == nodeActualValue)");
    builder.addLine("              traceValue = 1.0;");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("                (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            }");
    builder.addLine("          }");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("            nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("            nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("                nodeAttributeValue == nodeActualValue)");
    builder.addLine("              traceValue = 1.0;");
    builder.addLine("            nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("            nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("          }");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            continue;");
    builder.addLine("          if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("            numeratorIncrementValue = 1.0;");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        nodeActualValue = nodeElement.getAttribute(nodeAttributeKey);");
    builder.addLine("        if (nodeAttributeKey == 'href' &&");
    builder.addLine("            nodeActualValue != null)");
    builder.addLine("          nodeActualValue = HDLmRemoveHost(nodeActualValue);");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            nodeIdenTracing == HDLmNodeIdenTracing.error) {");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              nodeAttributeValue == nodeActualValue)");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("              (nodeIdenTracing == HDLmNodeIdenTracing.error && traceValue != 1.0)) {");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            HDLmBuildError('Trace', 'NodeIden', 41, errorText);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          nodeAttributeCheck.type = nodeAttributeKey;");
    builder.addLine("          nodeAttributeCheck.attributevalue = nodeAttributeValue;");
    builder.addLine("          nodeAttributeCheck.actualvalue = nodeActualValue;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("              nodeAttributeValue == nodeActualValue)");
    builder.addLine("            traceValue = 1.0;");
    builder.addLine("          nodeAttributeCheck.matchvalue = traceValue;");
    builder.addLine("          nodeAttributeChecks.push(nodeAttributeCheck);");
    builder.addLine("        }");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          continue;");
    builder.addLine("        if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("          numeratorIncrementValue = 1.0;");
    builder.addLine("      }");
    builder.addLine("      numerator += numeratorIncrementValue;");
    builder.addLine("    }");
    builder.addLine("    if (postRuleTracing)");
    builder.addLine("      postTrace[postName] = nodeAttributeChecks;");
    builder.addLine("    return numerator / denominator;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindOneLevel(nodeList, findEntry) {");
    builder.addLine("    let outArray = [];");
    builder.addLine("    let nodeListLength = nodeList.length;");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("      let curNode = nodeList[i];");
    builder.addLine("      let nodeType = curNode.constructor.name;");
    builder.addLine("        if (typeof curNode.getElementById === 'function' &&");
    builder.addLine("            findEntry.attributeName       === 'id' &&");
    builder.addLine("            findEntry.attributeValue      !== '') {");
    builder.addLine("        let newNode = curNode.getElementById(findEntry.attributeValue);");
    builder.addLine("        if (newNode !== null) {");
    builder.addLine("          if (findEntry.tag !== '') {");
    builder.addLine("            if (findEntry.tag.toUpperCase() === newNode.tagName.toUpperCase())");
    builder.addLine("              outArray.push(newNode);");
    builder.addLine("          }");
    builder.addLine("          else");
    builder.addLine("            outArray.push(newNode);");
    builder.addLine("        }");
    builder.addLine("        continue;");
    builder.addLine("      }");
    builder.addLine("      if (typeof curNode.getElementByClassName === 'function' &&");
    builder.addLine("          findEntry.attributeName              === 'class'    &&");
    builder.addLine("          findEntry.attributeValue             !== '') {");
    builder.addLine("        let newNodeList = curNode.getElementByClassName(findEntry.attributeValue);");
    builder.addLine("        let newNodeListLength = newNodeList.length;");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("          newNode = newNodeList[i];");
    builder.addLine("          if (findEntry.tag !== '') {");
    builder.addLine("            if (findEntry.tag.toUpperCase() === newNode.tagName.toUpperCase())");
    builder.addLine("              outArray.push(newNode);");
    builder.addLine("          }");
    builder.addLine("          else");
    builder.addLine("            outArray.push(newNode);");
    builder.addLine("        }");
    builder.addLine("        continue;");
    builder.addLine("      }");
    builder.addLine("      if (typeof curNode.getElementsByTagName === 'function' &&");
    builder.addLine("          findEntry.tag !== '') {");
    builder.addLine("        let newNodesList = curNode.getElementsByTagName(findEntry.tag);");
    builder.addLine("        let newNodesListLength = newNodesList.length;");
    builder.addLine("        if (findEntry.attributeName  !== '' &&");
    builder.addLine("            findEntry.attributeValue !== '') {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("            if (!newNode.hasAttribute(findEntry.attributeName))");
    builder.addLine("              continue;");
    builder.addLine("            if (newNode.getAttribute(findEntry.attributeName) !== findEntry.attributeValue)");
    builder.addLine("              continue;");
    builder.addLine("            outArray.push(newNode);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        else {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("            outArray.push(newNode);");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("        continue;");
    builder.addLine("      }");
    builder.addLine("      let curChildren = curNode.childNodes;");
    builder.addLine("      let curChildrenLength = curChildren.length;");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("        let curChild = curChildren[i];");
    builder.addLine("        if (typeof curChild.hasAttribute !== 'function')");
    builder.addLine("          continue;");
    builder.addLine("        if (typeof curChild.getAttribute !== 'function')");
    builder.addLine("          continue;");
    builder.addLine("        if (!curChild.hasAttribute(findEntry.attributeName))");
    builder.addLine("          continue;");
    builder.addLine("        if (curChild.getAttribute(findEntry.attributeName) !== findEntry.attributeValue)");
    builder.addLine("          continue;");
    builder.addLine("        outArray.push(curChild);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return outArray;");
    builder.addLine("  }");
    builder.addLine("  function HDLmFindPHash(urlStr) {");
    builder.addLine("    let urlStrMod = urlStr.replace(/\\+/g, ' ');");
    builder.addLine("    if (HDLmPHashObject.hasOwnProperty(urlStrMod))");
    builder.addLine("      return HDLmPHashObject[urlStrMod];");
    builder.addLine("    return null;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetAllPropertyNames(obj) {");
    builder.addLine("    let result = new Set();");
    builder.addLine("    while (obj) {");
    builder.addLine("      Object.getOwnPropertyNames(obj).forEach(p => result.add(p));");
    builder.addLine("      obj = Object.getPrototypeOf(obj);");
    builder.addLine("    }");
    builder.addLine("    return [...result];");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetBackground(domElement, replacementImageName) {");
    builder.addLine("    let firstElement = domElement;");
    builder.addLine("    let finalUrl = null;");
    builder.addLine("    while (domElement != null) {");
    builder.addLine("      let computedStyle = window.getComputedStyle(domElement);");
    builder.addLine("      if (computedStyle == null)");
    builder.addLine("        break;");
    builder.addLine("      let backStr = computedStyle['background-image'];");
    builder.addLine("      let backType = typeof backStr;");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("        domElement = domElement.parentElement;");
    builder.addLine("        continue;");
    builder.addLine("      }");
    builder.addLine("      let backLast = backStr.lastIndexOf('/');");
    builder.addLine("      if (backLast > 0)");
    builder.addLine("        finalUrl = backStr.substring(0, backLast+1) + replacementImageName + '\")';");
    builder.addLine("      break;");
    builder.addLine("    }");
    builder.addLine("    return finalUrl;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("    let objProps = HDLmGetAllPropertyNames(obj);");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    objProps.forEach(prop => {");
    builder.addLine("      let objValue = obj[prop];");
    builder.addLine("      let typeValue = typeof objValue;");
    builder.addLine("      let quotes = true;");
    builder.addLine("      if (typeValue == 'number'  ||");
    builder.addLine("          typeValue == 'boolean' ||");
    builder.addLine("          objValue == null)");
    builder.addLine("        quotes = false;");
    builder.addLine("      if (typeValue == 'string') {");
    builder.addLine("        let lengthValue = objValue.length;");
    builder.addLine("        if (lengthValue >= 2) {");
    builder.addLine("          let objValueFirst = objValue.charAt(0);");
    builder.addLine("          let objValueLast = objValue.charAt(lengthValue-1);");
    builder.addLine("          if (objValueFirst == '{' && objValueLast == '}') {");
    builder.addLine("            quotes = false;");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      let oldRvLength = rv.length;");
    builder.addLine("      try {");
    builder.addLine("        rv += ',\"' + prop + '\":';");
    builder.addLine("        if (quotes)");
    builder.addLine("          rv += '\"';");
    builder.addLine("        rv += objValue;");
    builder.addLine("        if (quotes)");
    builder.addLine("          rv += '\"';");
    builder.addLine("      }");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("        rv = rv.substring(0, oldRvLength);");
    builder.addLine("      }");
    builder.addLine("    });");
    builder.addLine("    rv += '}';");
    builder.addLine("    return rv;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    rv += '}';");
    builder.addLine("    return rv;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetObjectName(obj) {");
    builder.addLine("    let result = obj.constructor.name;");
    builder.addLine("    return result;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetUpdateCount(curNode, matchModifiedName, readyState) {");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("      return 0;");
    builder.addLine("    }");
    builder.addLine("    let currentCount = curNode.getAttribute(attributeName);");
    builder.addLine("    return currentCount;");
    builder.addLine("  }");
    builder.addLine("  function HDLmHammingDistance(firstVal, secondVal) {");
    builder.addLine("    let xorValue = firstVal ^ secondVal;");
    builder.addLine("    let distanceCount = 0;");
    builder.addLine("    while (xorValue > 0) {");
    builder.addLine("      xorValue &= xorValue - 1;");
    builder.addLine("      distanceCount++;");
    builder.addLine("    }");
    builder.addLine("    return distanceCount;");
    builder.addLine("  };");
    builder.addLine("  function HDLmHammingDistanceAdjusted(firstVal, secondVal) {");
    builder.addLine("    let distanceValue = HDLmHammingDistanceLong(firstVal, secondVal);");
    builder.addLine("    return distanceValue/(4.0 * firstVal.length);");
    builder.addLine("  };");
    builder.addLine("  function HDLmHammingDistanceLong(firstVal, secondVal) {");
    builder.addLine("    let distanceFinal = 0;");
    builder.addLine("    let firstSub, secondSub;");
    builder.addLine("    while (firstVal.length > 0) {");
    builder.addLine("      if (firstVal.length > 8) {");
    builder.addLine("        firstSub = firstVal.substr(0, 8);");
    builder.addLine("        firstVal = firstVal.substr(8);");
    builder.addLine("        secondSub = secondVal.substr(0, 8);");
    builder.addLine("        secondVal = secondVal.substr(8);");
    builder.addLine("      }");
    builder.addLine("      else {");
    builder.addLine("        firstSub = firstVal;");
    builder.addLine("        firstVal = '';");
    builder.addLine("        secondSub = secondVal;");
    builder.addLine("        secondVal = '';");
    builder.addLine("      }");
    builder.addLine("      let firstInt = parseInt(firstSub, 16);");
    builder.addLine("      let secondInt = parseInt(secondSub, 16);");
    builder.addLine("      distanceFinal += HDLmHammingDistance(firstInt, secondInt);");
    builder.addLine("    }");
    builder.addLine("    return distanceFinal;");
    builder.addLine("  };");
    builder.addLine("  function HDLmHandleVisitRequest(visitText, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("                                  sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                  parameterNumber, lookupValue,");
    builder.addLine("                                  hostNameValue, divisionNameValue, siteNameValue, curMod,");
    builder.addLine("                                  pathValueStr) {");
    builder.addLine("    let countHigh = false;");
    builder.addLine("    let updateName = 'HDLmUpdateCount' + curMod.name;");
    builder.addLine("    if (isNaN(window[updateName]))");
    builder.addLine("      window[updateName] = 0;");
    builder.addLine("    else");
    builder.addLine("      if (window[updateName] > 0)");
    builder.addLine("        countHigh = true;");
    builder.addLine("    if (countHigh || testFlag)");
    builder.addLine("      return countHigh;");
    builder.addLine("    window[updateName] += 1;");
    builder.addLine("    let localUpdates = new Object();");
    builder.addLine("    let oldText = null;");
    builder.addLine("    let newText = null;");
    builder.addLine("    if ((typeof visitText) != 'undefined' &&");
    builder.addLine("        visitText          != null        &&");
    builder.addLine("        visitText          != '')");
    builder.addLine("      oldText = visitText;");
    builder.addLine("    HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                   sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                   parameterNumber, lookupValue,");
    builder.addLine("                   hostNameValue, divisionNameValue, siteNameValue, curMod.name,");
    builder.addLine("                   curMod.path, curMod.type, pathValueStr,");
    builder.addLine("                   oldText, newText);");
    builder.addLine("    let localReason = curMod.type;");
    builder.addLine("    postTrace.matcherror = 'visit';");
    builder.addLine("    HDLmSendUpdates(localUpdates, localReason, '1.0', postTrace);");
    builder.addLine("    return countHigh;");
    builder.addLine("  }");
    builder.addLine("  function HDLmIncrementUpdateCount(curNode, matchModifiedName) {");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("      curNode.setAttribute(attributeName, 1);");
    builder.addLine("      return 1;");
    builder.addLine("    }");
    builder.addLine("    let currentCount = curNode.getAttribute(attributeName);");
    builder.addLine("    currentCount++;");
    builder.addLine("    curNode.setAttribute(attributeName, currentCount);");
    builder.addLine("    return currentCount;");
    builder.addLine("  }");
    builder.addLine("  function HDLmModifySearch(searchText) {");
    builder.addLine("    let searchObj = JSON.parse(searchText);");
    builder.addLine("    let searchAttrs = searchObj.attributes;");
    builder.addLine("    if (searchAttrs.hasOwnProperty('innertext')) {");
    builder.addLine("      let searchInner = searchAttrs.innertext;");
    builder.addLine("      let searchIndex = searchInner.indexOf('$');");
    builder.addLine("      if (searchIndex >= 0) {");
    builder.addLine("        delete searchAttrs['innertext'];");
    builder.addLine("        searchObj['attributes'] = searchAttrs;");
    builder.addLine("      };");
    builder.addLine("      searchText = JSON.stringify(searchObj);");
    builder.addLine("    }");
    builder.addLine("    return searchText;");
    builder.addLine("  }");
    builder.addLine("  function HDLmObtainValue(searchValue) {");
    builder.addLine("    let textValue = null;");
    builder.addLine("    let localMod = {};");
    builder.addLine("    if (searchValue.length > 0 && searchValue.charAt(0) == '/') {");
    builder.addLine("      localMod.cssselector = '';");
    builder.addLine("      localMod.nodeiden = null;");
    builder.addLine("      localMod.xpath = searchValue;");
    builder.addLine("    }");
    builder.addLine("    else if (searchValue.length > 0 && searchValue.charAt(0) == '{') {");
    builder.addLine("      localMod.cssselector = '';");
    builder.addLine("      localMod.nodeiden = JSON.parse(searchValue);");
    builder.addLine("      localMod.xpath = \"\";");
    builder.addLine("    }");
    builder.addLine("    else {");
    builder.addLine("      localMod.cssselector = searchValue;");
    builder.addLine("      localMod.nodeiden = null;");
    builder.addLine("      localMod.xpath = '';");
    builder.addLine("    }");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("    let localNodeListLen = localNodeList.length;");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("      let localNode = localNodeList[i];");
    builder.addLine("      textValue = localNode.textContent;");
    builder.addLine("      break;");
    builder.addLine("    }");
    builder.addLine("    return textValue;");
    builder.addLine("  }");
    builder.addLine("  function HDLmRemoveHost(urlStr) {");
    builder.addLine("    let urlStrIndexOfColon = urlStr.indexOf(':');");
    builder.addLine("    if (urlStrIndexOfColon < 0 ||");
    builder.addLine("        urlStrIndexOfColon > 6)");
    builder.addLine("      return urlStr;");
    builder.addLine("    let urlObj = new URL(urlStr);");
    builder.addLine("    return urlStr.substring(urlObj.origin.length);");
    builder.addLine("  }");
    builder.addLine("  function HDLmRemoveProtocol(urlStr) {");
    builder.addLine("    let urlIndex = urlStr.indexOf(':');");
    builder.addLine("    if (urlIndex < 0)");
    builder.addLine("      return urlStr;");
    builder.addLine("    return urlStr.substring(urlIndex+1);");
    builder.addLine("  }");
    builder.addLine("  function HDLmReplaceInString(inStr) {");
    builder.addLine("    inStr = inStr.replace(/A/g,'\u0e81');");
    builder.addLine("    inStr = inStr.replace(/B/g,'\u0e82');");
    builder.addLine("    inStr = inStr.replace(/C/g,'\u0e84');");
    builder.addLine("    inStr = inStr.replace(/D/g,'\u0e87');");
    builder.addLine("    inStr = inStr.replace(/E/g,'\u0e88');");
    builder.addLine("    inStr = inStr.replace(/F/g,'\u0e8a');");
    builder.addLine("    inStr = inStr.replace(/G/g,'\u0e8d');");
    builder.addLine("    inStr = inStr.replace(/H/g,'\u0e94');");
    builder.addLine("    inStr = inStr.replace(/I/g,'\u0e97');");
    builder.addLine("    inStr = inStr.replace(/J/g,'\u0e99');");
    builder.addLine("    inStr = inStr.replace(/K/g,'\u0e9f');");
    builder.addLine("    inStr = inStr.replace(/L/g,'\u0ea1');");
    builder.addLine("    inStr = inStr.replace(/M/g,'\u0ea3');");
    builder.addLine("    inStr = inStr.replace(/N/g,'\u0ea5');");
    builder.addLine("    inStr = inStr.replace(/O/g,'\u0ea7');");
    builder.addLine("    inStr = inStr.replace(/P/g,'\u0eaa');");
    builder.addLine("    inStr = inStr.replace(/Q/g,'\u0eab');");
    builder.addLine("    inStr = inStr.replace(/R/g,'\u0ead');");
    builder.addLine("    inStr = inStr.replace(/S/g,'\u0eb9');");
    builder.addLine("    inStr = inStr.replace(/T/g,'\u0ebb');");
    builder.addLine("    inStr = inStr.replace(/U/g,'\u0ebd');");
    builder.addLine("    inStr = inStr.replace(/V/g,'\u0ec0');");
    builder.addLine("    inStr = inStr.replace(/W/g,'\u0ec4');");
    builder.addLine("    inStr = inStr.replace(/X/g,'\u0ec6');");
    builder.addLine("    inStr = inStr.replace(/Y/g,'\u0ec8');");
    builder.addLine("    inStr = inStr.replace(/Z/g,'\u0ecd');");
    builder.addLine("    inStr = inStr.replace(/\\s/g,'\u0ed0');");
    builder.addLine("    inStr = inStr.replace(/\\$/g,'\u0ed1');");
    builder.addLine("    inStr = inStr.replace(/\\./g,'\u0ed2');");
    builder.addLine("    inStr = inStr.replace(/\\//g,'\u0ed3');");
    builder.addLine("    inStr = inStr.replace(/\\(/g,'\u0ed4');");
    builder.addLine("    inStr = inStr.replace(/\\)/g,'\u0ed5');");
    builder.addLine("    return inStr;");
    builder.addLine("  }");
    builder.addLine("  function HDLmResetStyleSheetEnablement(titleValue, disabledStatus) {");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("        styleSheet.title == titleValue) {");
    builder.addLine("        styleSheet.disabled = disabledStatus;");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("  }");
    builder.addLine("  function HDLmSaveChange(savedUpdates, indexUsed,");
    builder.addLine("                          sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                          parmNumber, lookupValue,");
    builder.addLine("                          hostNameValue, divisionNameValue, siteNameValue, modName,");
    builder.addLine("                          modPathValue, modType,");
    builder.addLine("                          pathValue, oldValue, newValue) {");
    builder.addLine("    let updateObj = {};");
    builder.addLine("    updateObj.indexValue = sessionIndexValue;");
    builder.addLine("    updateObj.indexUsed = indexUsed;");
    builder.addLine("    updateObj.parameters = HDLmArrayJoin(parametersArray, ' ');");
    builder.addLine("    updateObj.sessionId = sessionIdJS;");
    builder.addLine("    updateObj.parmNumber = parmNumber;");
    builder.addLine("    updateObj.lookupValue = lookupValue;");
    builder.addLine("    updateObj.hostName = hostNameValue;");
    builder.addLine("    updateObj.divisionName = divisionNameValue;");
    builder.addLine("    updateObj.siteName = siteNameValue;");
    builder.addLine("    updateObj.modName = modName;");
    builder.addLine("    updateObj.modPathValue = modPathValue;");
    builder.addLine("    updateObj.modType = modType;");
    builder.addLine("    updateObj.pathValue = pathValue;");
    builder.addLine("    updateObj.oldValue = oldValue;");
    builder.addLine("    updateObj.newValue = newValue;");
    builder.addLine("    if (!savedUpdates.hasOwnProperty('updates'))");
    builder.addLine("      savedUpdates.updates = [];");
    builder.addLine("    savedUpdates.updates.push(updateObj);");
    builder.addLine("  }");
    builder.addLine("  function HDLmStyleFixValues(inputStyles) {");
    builder.addLine("    inputStyles = inputStyles.trim();");
    builder.addLine("    inputStyles = inputStyles.toLowerCase();");
    builder.addLine("    inputStyles = inputStyles.replace(/\\s+/g, ' ');");
    builder.addLine("    let splitOn;");
    builder.addLine("    if (inputStyles.indexOf(';') >= 0)");
    builder.addLine("      splitOn = ';'");
    builder.addLine("    else");
    builder.addLine("      splitOn = ' ';");
    builder.addLine("    let inputSplit = inputStyles.split(splitOn);");
    builder.addLine("    for (let i in inputSplit) {");
    builder.addLine("      let styleValue = inputSplit[i];");
    builder.addLine("      if (splitOn == ';')");
    builder.addLine("        styleValue = styleValue.trim();");
    builder.addLine("      if (styleValue == 'unchanged' ||");
    builder.addLine("          styleValue == 'novalue'   ||");
    builder.addLine("          styleValue == 'none'      ||");
    builder.addLine("          styleValue.trim().length == 0) {");
    builder.addLine("        styleValue = 'none';");
    builder.addLine("        inputSplit[i] = styleValue;");
    builder.addLine("      }");
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
    builder.addLine("        styleValue += 'px';");
    builder.addLine("        inputSplit[i] = styleValue;");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    return inputSplit;");
    builder.addLine("  }");
    builder.addLine("  function HDLmStyleSplitString(inputString) {");
    builder.addLine("    inputString = inputString.trim();");
    builder.addLine("    inputString = inputString.toLowerCase();");
    builder.addLine("    inputString = inputString.replace(/\\s+/g, ' ');");
    builder.addLine("    let inputSplit = inputString.split(' ');");
    builder.addLine("    return inputSplit;");
    builder.addLine("  }");
    builder.addLine("  function HDLmToggleStyleSheetEnablement() {");
    builder.addLine("    var disabledStatus;");
    builder.addLine("    var titleValue = 'HDLmSessionClasses';");
    builder.addLine("    disabledStatus = sessionStorage.getItem(titleValue + 'Disabled');");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("      disabledStatus = 'true';");
    builder.addLine("    disabledStatus = (disabledStatus == 'true') ? false : true;");
    builder.addLine("    sessionStorage.setItem(titleValue + 'Disabled', disabledStatus);");
    builder.addLine("    HDLmResetStyleSheetEnablement(titleValue, disabledStatus);");
    builder.addLine("  }");
    builder.addLine("  function HDLmUpdateJsonStr(jsonStr, keyStr, valueStr) {");
    builder.addLine("    if (jsonStr == null)");
    builder.addLine("      jsonStr = '{}';");
    builder.addLine("    let jsonObj = JSON.parse(jsonStr);");
    builder.addLine("    jsonObj[keyStr] = valueStr;");
    builder.addLine("    jsonStr = JSON.stringify(jsonObj);");
    builder.addLine("    return jsonStr;");
    builder.addLine("  }");
    builder.addLine("  function HDLmApplyMods(readyState, HDLmIndexValue) {");
    builder.addLine("    let pathValueStr = document.location.pathname;");
    builder.addLine("    const modsArray = [");
      builder.addLine(newLine);
    builder.addLine("                      ];");
    builder.addLine("    const sessionIdJS = '" + sessionIdJava + "';");
    builder.addLine("    const parametersArray = HDLmGetParametersArray();"); 
    builder.addLine("    let modsArrayLength = modsArray.length;");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("      try {");
    builder.addLine("        switch (curMod.type) {");
    builder.addLine("          case 'extract': {");
    builder.addLine("            let nodeList = HDLmFind(curMod, false);");
    builder.addLine("            let nodeListLen = nodeList.length;");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("              let curNode = nodeList[j];");
    builder.addLine("              if (HDLmSavedExtracts.hasOwnProperty(curMod.name) &&");
    builder.addLine("                  HDLmSavedExtracts[curMod.name] != null)");
    builder.addLine("                continue;"); 
    builder.addLine("              let oldText = curNode.textContent;");
    builder.addLine("              HDLmSavedExtracts[curMod.name] = oldText;");
    builder.addLine("            }");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          case 'notify': {");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("              let searchText = curMod.values[j];");
    builder.addLine("              searchText = HDLmModifySearch(searchText);");
    builder.addLine("              if (HDLmSavedNotifies.hasOwnProperty(searchText) &&");
    builder.addLine("                  HDLmSavedNotifies[searchText] != null)");
    builder.addLine("                continue;");
    builder.addLine("              let searchValue = HDLmObtainValue(searchText);");
    builder.addLine("              HDLmSavedNotifies[searchText] = searchValue;");
    builder.addLine("            }");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("          default: {");
    builder.addLine("            break;");
    builder.addLine("          }");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("        console.log(errorObj);");
    builder.addLine("        let errorStr = HDLmErrorToString(errorObj);");
    builder.addLine("        let nameStr = curMod.name;"); 
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        console.log(builtStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'modification', nameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'siteName', siteNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'divisionName', divisionNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'hostName', hostNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'sessionId', sessionIdJS);");
    builder.addLine("        HDLmSendData(errorStr);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("      try {");
    builder.addLine("        HDLmApplyMod(pathValueStr,");
    builder.addLine("                     curMod,");
    builder.addLine("                     sessionIdJS,"); 
    builder.addLine("                     HDLmIndexValue,");
    builder.addLine("                     parametersArray,"); 
    builder.addLine("                     '" + hostName + "',");  
    builder.addLine("                     '" + hostName + "',"); 
    builder.addLine("                     '" + divisionName + "',");       
    builder.addLine("                     '" + siteName + "',"); 
      builder.addLine("                     '" + secureHostName + "',");
      builder.addLine("                     null,"); 
    builder.addLine("                     '" + forceSelectString + "',"); 
    builder.addLine("                     " + logRuleMatchingString + ",");
    builder.addLine("                     readyState);");
    builder.addLine("      }");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("        console.log(errorObj);");
    builder.addLine("        let errorStr = HDLmErrorToString(errorObj);");
    builder.addLine("        let nameStr = curMod.name;");
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("        console.log(builtStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'modification', nameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'siteName', siteNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'divisionName', divisionNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'hostName', hostNameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'sessionId', sessionIdJS);");
    builder.addLine("        HDLmSendData(errorStr);");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("  }");
    builder.addLine("  function HDLmBuildError(errSeverity, curType, errNumber, errText) {");
    builder.addLine("    let errorStr = '';");
    builder.addLine("    errorStr += '" + HDLmDefines.getString("HDLMPREFIX") + "' + ' ';");
    builder.addLine("    errorStr += errSeverity + ' ';");
    builder.addLine("    errorStr += curType + ' ';");
    builder.addLine("    errorStr += errNumber.toString() + ' ';");
    builder.addLine("    errorStr += errText;");
    builder.addLine("    console.log(errorStr);");
    builder.addLine("  }");
    builder.addLine("  function HDLmChangeAttributes(curNode, jsonText) {");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("      if (!changesObj.hasOwnProperty(keyValue))");
    builder.addLine("        continue;");
    builder.addLine("      let changesValue = changesObj[keyValue];");
    builder.addLine("      if (changesValue == null)");
    builder.addLine("        curNode.removeAttribute(keyValue);");
    builder.addLine("      else {");
    builder.addLine("        if (keyValue == 'class') {");
    builder.addLine("          HDLmClassAddEntry(curNode, changesValue);");
    builder.addLine("        }");
    builder.addLine("        else {");
    builder.addLine("          curNode.setAttribute(keyValue, changesValue);");
    builder.addLine("        }");
    builder.addLine("      }");
    builder.addLine("    }");
    builder.addLine("  }");
          builder.addLine(newLine);
            builder.addLine("    " + curLine);
          builder.addLine(newLine);
    builder.addLine("  function HDLmGetAttributesString(curNode) {");
    builder.addLine("    let outputStr = '';");
    builder.addLine("    if (!curNode.hasAttributes())");
    builder.addLine("      return outputStr;");
    builder.addLine("    let attrs = curNode.attributes;");
    builder.addLine("    let attrsLength = attrs.length;");
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("      if (outputStr != '')");
    builder.addLine("       outputStr += ' ';");
    builder.addLine("       outputStr += attrs[i].name + '=' + \"'\" + attrs[i].value + \"'\";");
    builder.addLine("    }");
    builder.addLine("    return outputStr;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetLookupIndex(ruleName) {");
    builder.addLine("    let lookupData = {");
          builder.addLine(newLine);
    builder.addLine("                     };");
    builder.addLine("    let lookupIndex = lookupData[ruleName];");
    builder.addLine("    return lookupIndex;");
    builder.addLine("  }");  
    builder.addLine("  function HDLmGetParametersArray() {");
    builder.addLine("    let outputStr = '';");
    builder.addLine("    const parametersArray = [");
      builder.addLine(newLine);
    builder.addLine("                            ];");
    builder.addLine("    return parametersArray;");
    builder.addLine("  }");
    builder.addLine("  function HDLmGetPHash(urlStr) {");
    builder.addLine("    let xHttpReq = new XMLHttpRequest();");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlVal = '" + protocolStringGetPHash + "://' + serverNameValue + '/" + HDLmConfigInfo.getPHashName() + "';");
    builder.addLine("    xHttpReq.open('POST', urlVal);");
    builder.addLine("    urlStr = encodeURIComponent(urlStr);");
    builder.addLine("    xHttpReq.send(urlStr);");
    builder.addLine("  }");
    builder.addLine("  {");    
    builder.addLine("    let hostNameStr = location.hostname;");
    builder.addLine("    let linkStr = location.href;");
    builder.addLine("    let pathNameStr = document.location.pathname;");
    builder.addLine("    let sessionIdValue = '" + sessionIdJava + "';");
    builder.addLine("    let eventJson = HDLmGetJsonForLink(linkStr, hostNameStr, pathNameStr, sessionIdValue)");
    builder.addLine("    Object.keys(window).forEach(key => {"); 
    builder.addLine("      if (key.startsWith('onmouse'))");
    builder.addLine("        return;");
    builder.addLine("      if (key.startsWith('onpointer'))");
    builder.addLine("        return;"); 
    builder.addLine("      if (/^on/.test(key)) {");
    builder.addLine("        window.addEventListener(key.slice(2), event => {");  
    builder.addLine("          let eventName = HDLmGetObjectName(event);"); 
    builder.addLine("          let eventJson = HDLmGetJsonForEventObject(event, eventName, hostNameStr, pathNameStr, sessionIdValue)");
    builder.addLine("        });");
    builder.addLine("      }"); 
    builder.addLine("    });");
    builder.addLine("  };");
    builder.addLine("  let HDLmSavedUpdates = new Object();");
    builder.addLine("  let HDLmSavedExtracts = new Object();");
    builder.addLine("  let HDLmSavedNotifies = new Object();");
    builder.addLine("  var HDLmCheckVariable = true;");
    builder.addLine("  const HDLmPHashObject = {");
      builder.addLine(newLine);
    builder.addLine("                          };");
    builder.addLine("  function HDLmSendData(dataStr) {");
    builder.addLine("    dataStr = '" + HDLmDefines.getString("HDLMPOSTDATA") + "=" + "' + dataStr;");
    builder.addLine("    let httpReq = new XMLHttpRequest();");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
    builder.addLine("    httpReq.open('POST', urlStr);");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("    dataStr = encodeURIComponent(dataStr);");
    builder.addLine("    httpReq.send(dataStr);");
    builder.addLine("  }");
    builder.addLine("  function HDLmSendUpdates(savedUpdates, reasonStr, weightStr, errorStr) {");
    builder.addLine("    savedUpdates.reason = reasonStr;");
    builder.addLine("    savedUpdates.weight = weightStr;");
    builder.addLine("    savedUpdates.error = errorStr;");
    builder.addLine("    let updateStr = JSON.stringify(savedUpdates);");
    builder.addLine("    HDLmSendData(updateStr);");
    builder.addLine("  }");
      builder.addLine("  let HDLmIndexValue = null;");
    	builder.addLine("  let HDLmIndexValue = " + sessionIndexStr + ";");
    builder.addLine("  HDLmClassAddCss('.HDLmClassPrimary'," +  
    builder.addLine("  HDLmClassAddCss('.HDLmClassBackground'," + 
    builder.addLine("  let HDLmObsTargetNode = document;");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsCallback = function (mutationsList, HDLmObsObserver) {");
    builder.addLine("    let forceReadyState = false;");
    builder.addLine("    if (document.location.hostname == 'www.themarvelouslandofoz.com' &&");
    builder.addLine("        document.readyState == 'interactive')");
    builder.addLine("      forceReadyState = true;");
    builder.addLine("    HDLmApplyMods(document.readyState, HDLmIndexValue);");
    builder.addLine("    if (document.readyState == 'complete' ||");
    builder.addLine("        forceReadyState == true) {");
    builder.addLine("      HDLmApplyMods(document.readyState, HDLmIndexValue);");
    builder.addLine("    };");
    builder.addLine("  };");
    builder.addLine("  let HDLmObsObserver = new MutationObserver(HDLmObsCallback);");
    builder.addLine("  HDLmObsObserver.observe(HDLmObsTargetNode, HDLmObsConfig);");
    builder.addLine("  let pathValueStr = document.location.pathname;");     
    builder.addLine("  let curMod = {};");      
    builder.addLine("  curMod.enabled = true;");  
    builder.addLine("  curMod.name = '" + modificationName + "';"); 
    builder.addLine("  curMod.parameter = -1;");   
    builder.addLine("  curMod.path = '//.*/';");   
    builder.addLine("  curMod.pathre = true;");   
    builder.addLine("  curMod.type = '" + modificationType + "';");     
    builder.addLine("  curMod.values = [ 'Yes' ];"); 
    builder.addLine("  curMod.valuesCount = 1;");   
    builder.addLine("  const sessionIdJS = '" + sessionIdJava + "';");
    builder.addLine("  const parametersArray = HDLmGetParametersArray()");
    builder.addLine("  const readyState = 'unknown';");
    builder.addLine("  HDLmApplyMod(pathValueStr,"); 
    builder.addLine("               curMod,");  
    builder.addLine("               sessionIdJS,");
    builder.addLine("               HDLmIndexValue,");
    builder.addLine("               parametersArray,");
    builder.addLine("               '" + hostName + "',");  
    builder.addLine("               '" + hostName + "',"); 
    builder.addLine("               '" + divisionName + "',");      
    builder.addLine("               '" + siteName + "',");
      builder.addLine("               '" + secureHostName + "',"); 
      builder.addLine("               null,");
    builder.addLine("               '" + forceSelectString + "',");
    builder.addLine("               '" + logRuleMatchingString + "',");
    builder.addLine("               readyState);");
    builder.addLine("</script>");
    actualJS = builder.getLinesWithSuffix("\r\n");
Possible variable case
    builder.addLine("        case 'attribute': {");
    builder.addLine("        case 'extract': {");
    builder.addLine("        case 'modify': {");
    builder.addLine("        case 'notify': {");
    builder.addLine("        case 'visit': {");
    builder.addLine("        case 'changeattrs':");
    builder.addLine("        case 'changenodes':");
    builder.addLine("        case 'fontcolor':");
    builder.addLine("        case 'fontfamily':");
    builder.addLine("        case 'fontkerning':");
    builder.addLine("        case 'fontsize':");
    builder.addLine("        case 'fontstyle':");
    builder.addLine("        case 'fontweight':");
    builder.addLine("        case 'height':");
    builder.addLine("        case 'image':");
    builder.addLine("        case 'order':");
    builder.addLine("        case 'remove':");
    builder.addLine("        case 'replace':");
    builder.addLine("        case 'script':");
    builder.addLine("        case 'style':");
    builder.addLine("        case 'text':");
    builder.addLine("        case 'textchecked':");
    builder.addLine("        case 'title':");
    builder.addLine("        case 'width': {");
    builder.addLine("        case 'text':");
    builder.addLine("        case 'title': {");
    builder.addLine("        case 'textchecked': {");
    builder.addLine("        case 'visit': {");
    builder.addLine("      case 'tag': {");
    builder.addLine("      case 'id': {");
    builder.addLine("      case 'class': {");
    builder.addLine("      case 'name': {");
    builder.addLine("          case 'extract': {");
    builder.addLine("          case 'notify': {");
    builder.addLine("        case 'attribute': {");
    builder.addLine("        case 'extract': {");
    builder.addLine("        case 'modify': {");
    builder.addLine("        case 'notify': {");
    builder.addLine("        case 'visit': {");
    builder.addLine("        case 'changeattrs':");
    builder.addLine("        case 'changenodes':");
    builder.addLine("        case 'fontcolor':");
    builder.addLine("        case 'fontfamily':");
    builder.addLine("        case 'fontkerning':");
    builder.addLine("        case 'fontsize':");
    builder.addLine("        case 'fontstyle':");
    builder.addLine("        case 'fontweight':");
    builder.addLine("        case 'height':");
    builder.addLine("        case 'image':");
    builder.addLine("        case 'order':");
    builder.addLine("        case 'remove':");
    builder.addLine("        case 'replace':");
    builder.addLine("        case 'script':");
    builder.addLine("        case 'style':");
    builder.addLine("        case 'text':");
    builder.addLine("        case 'textchecked':");
    builder.addLine("        case 'title':");
    builder.addLine("        case 'width': {");
    builder.addLine("        case 'text':");
    builder.addLine("        case 'title': {");
    builder.addLine("        case 'textchecked': {");
    builder.addLine("        case 'visit': {");
    builder.addLine("      case 'tag': {");
    builder.addLine("      case 'id': {");
    builder.addLine("      case 'class': {");
    builder.addLine("      case 'name': {");
    builder.addLine("          case 'extract': {");
    builder.addLine("          case 'notify': {");
Possible variable catch
    builder.addLine("      catch (errorObj) {");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("      catch (errorObj) {");
    builder.addLine("      catch (errorObj) {");
Possible variable center
    builder.addLine("                curNode.style.setProperty('text-align', 'center');");
    builder.addLine("                curNode.style.setProperty('text-align', 'center');");
Possible variable changeattrs
    builder.addLine("        case 'changeattrs':");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("        case 'changeattrs':");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("            if (curType == 'changeattrs') {");
Possible variable changenodes
    builder.addLine("        case 'changenodes':");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("        case 'changenodes':");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'changenodes') {");
Possible variable char
		  	char  curChar = actualJS.charAt(i);
		  	char  curChar = actualJS.charAt(i);
Possible variable childList
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
Possible variable choiceJsonArray
    		JsonArray   choiceJsonArray = null;
        	choiceJsonArray = (JsonArray) choicesJsonArray.get(indexValueInt);
      		if (!choiceJsonArray.isJsonArray()) {
            JsonElement   choiceJsonElement = choiceJsonArray.get(j); 
    		JsonArray   choiceJsonArray = null;
        	choiceJsonArray = (JsonArray) choicesJsonArray.get(indexValueInt);
      		if (!choiceJsonArray.isJsonArray()) {
            JsonElement   choiceJsonElement = choiceJsonArray.get(j); 
Possible variable choiceJsonElement
            JsonElement   choiceJsonElement = choiceJsonArray.get(j); 
        		if (!choiceJsonElement.isJsonPrimitive()) {
            String  choiceJsonString = choiceJsonElement.getAsString();
            JsonElement   choiceJsonElement = choiceJsonArray.get(j); 
        		if (!choiceJsonElement.isJsonPrimitive()) {
            String  choiceJsonString = choiceJsonElement.getAsString();
Possible variable choiceJsonString
            String  choiceJsonString = choiceJsonElement.getAsString();
            newLine += choiceJsonString;
            String  choiceJsonString = choiceJsonElement.getAsString();
            newLine += choiceJsonString;
Possible variable choices
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
        "    \"choices\":" +
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
        "    \"choices\":" +
Possible variable choicesJsonArray
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
    		if (!choicesJsonArray.isJsonArray()) {
    		int         choicesJsonArraySize = choicesJsonArray.size();
        	choiceJsonArray = (JsonArray) choicesJsonArray.get(indexValueInt);
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
    		if (!choicesJsonArray.isJsonArray()) {
    		int         choicesJsonArraySize = choicesJsonArray.size();
        	choiceJsonArray = (JsonArray) choicesJsonArray.get(indexValueInt);
Possible variable choicesJsonArraySize
    		int         choicesJsonArraySize = choicesJsonArray.size();
         	double      indexValue = sessionIndexValue * choicesJsonArraySize;
    		int         choicesJsonArraySize = choicesJsonArray.size();
         	double      indexValue = sessionIndexValue * choicesJsonArraySize;
Possible variable class
    builder.addLine("      case 'class': {");
    builder.addLine("          postTrace.nodegetby = 'class';");
    builder.addLine("      else if (nodeAttributeKey == 'class') {");
    builder.addLine("        let nodeActualValueString = nodeElement.getAttribute('class');");
    builder.addLine("          findEntry.attributeName              === 'class'    &&");
    builder.addLine("        if (keyValue == 'class') {");
    class getIndexJsonArrayLocal {
    builder.addLine("      case 'class': {");
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
    builder.addLine("          postTrace.nodegetby = 'class';");
    builder.addLine("      else if (nodeAttributeKey == 'class') {");
    builder.addLine("        let nodeActualValueString = nodeElement.getAttribute('class');");
    builder.addLine("          findEntry.attributeName              === 'class'    &&");
    builder.addLine("        if (keyValue == 'class') {");
    class getIndexJsonArrayLocal {
Possible variable click
    builder.addLine("            curNode.addEventListener('click', (function() {");
    builder.addLine("                postTrace.matcherror = 'click';");
    builder.addLine("            curNode.addEventListener('click', (function() {");
    builder.addLine("                postTrace.matcherror = 'click';");
Possible variable color
    builder.addLine("                          'fontcolor':'color',");
                                      "'background-color: yellow');");
    builder.addLine("                          'fontcolor':'color',");
                                      "'background-color: yellow');");
Possible variable com
package com.headlamp; 
import com.google.common.cache.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonPrimitive;
package com.headlamp; 
import com.google.common.cache.*;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonPrimitive;
Possible variable comparison
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
Possible variable complete
    builder.addLine("              if (readyState == 'complete')");
    builder.addLine("              if (readyState == 'complete') {");
    builder.addLine("    if (document.readyState == 'complete' ||");
    builder.addLine("              if (readyState == 'complete')");
    builder.addLine("              if (readyState == 'complete') {");
    builder.addLine("    if (document.readyState == 'complete' ||");
Possible variable console
    builder.addLine("        console.log(errorObj);");
    builder.addLine("        console.log(builtStr);");
    builder.addLine("        console.log(errorObj);");
    builder.addLine("        console.log(builtStr);");
    builder.addLine("    console.log(errorStr);");
    builder.addLine("        console.log(errorObj);");
    builder.addLine("        console.log(builtStr);");
    builder.addLine("        console.log(errorObj);");
    builder.addLine("        console.log(builtStr);");
    builder.addLine("    console.log(errorStr);");
Possible variable const
    builder.addLine("      const fontNames = {");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("    const elementClasses = elementNodeReference.classList;");
    builder.addLine("    const modsArray = [");
    builder.addLine("    const sessionIdJS = '" + sessionIdJava + "';");
    builder.addLine("    const parametersArray = HDLmGetParametersArray();"); 
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("    const parametersArray = [");
    builder.addLine("  const HDLmPHashObject = {");
    builder.addLine("  const sessionIdJS = '" + sessionIdJava + "';");
    builder.addLine("  const parametersArray = HDLmGetParametersArray()");
    builder.addLine("  const readyState = 'unknown';");
    builder.addLine("      const fontNames = {");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("    const elementClasses = elementNodeReference.classList;");
    builder.addLine("    const modsArray = [");
    builder.addLine("    const sessionIdJS = '" + sessionIdJava + "';");
    builder.addLine("    const parametersArray = HDLmGetParametersArray();"); 
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("    const parametersArray = [");
    builder.addLine("  const HDLmPHashObject = {");
    builder.addLine("  const sessionIdJS = '" + sessionIdJava + "';");
    builder.addLine("  const parametersArray = HDLmGetParametersArray()");
    builder.addLine("  const readyState = 'unknown';");
Possible variable continue
    builder.addLine("                continue;");
    builder.addLine("                    continue;");
    builder.addLine("        continue;");
    builder.addLine("        continue;");
    builder.addLine("        continue;");
    builder.addLine("        continue elementLoop;");
    builder.addLine("          continue elementLoop;");
    builder.addLine("          continue elementLoop;");
    builder.addLine("        continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("            continue;");
    builder.addLine("            continue;");
    builder.addLine("          continue;");
    builder.addLine("        continue;");
    builder.addLine("        continue;");
    builder.addLine("              continue;");
    builder.addLine("              continue;");
    builder.addLine("        continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("        continue;");
    builder.addLine("                continue;"); 
    builder.addLine("                continue;");
    builder.addLine("        continue;");
        continue;
    builder.addLine("                continue;");
    builder.addLine("                    continue;");
    builder.addLine("        continue;");
    builder.addLine("        continue;");
    builder.addLine("        continue;");
    builder.addLine("        continue elementLoop;");
    builder.addLine("          continue elementLoop;");
    builder.addLine("          continue elementLoop;");
    builder.addLine("        continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("            continue;");
    builder.addLine("            continue;");
    builder.addLine("          continue;");
    builder.addLine("        continue;");
    builder.addLine("        continue;");
    builder.addLine("              continue;");
    builder.addLine("              continue;");
    builder.addLine("        continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("          continue;");
    builder.addLine("        continue;");
    builder.addLine("                continue;"); 
    builder.addLine("                continue;");
    builder.addLine("        continue;");
        continue;
Possible variable counter
    int         counter;
    counter = 0;
      counter++;
      if (counter < modsCount)
    		counter = 0;
        	counter++;
          if (counter < rulesJsonArraySize)  
    counter = 0;
      counter++;
      if (counter < sessionParametersArrayLength)
    counter = 0;
      counter++;
        if (counter < mapSize)
    int         counter;
    counter = 0;
      counter++;
      if (counter < modsCount)
    		counter = 0;
        	counter++;
          if (counter < rulesJsonArraySize)  
    counter = 0;
      counter++;
      if (counter < sessionParametersArrayLength)
    counter = 0;
      counter++;
        if (counter < mapSize)
Possible variable cover
    builder.addLine("                curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                  curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                  curNode.style.setProperty('background-size', 'cover');");
Possible variable css
    builder.addLine("    styleVar.type = 'text/css';");
    builder.addLine("    styleVar.type = 'text/css';");
Possible variable curChar
		  	char  curChar = actualJS.charAt(i);
		  	if (curChar == '\u1000')  
		  	else if (curChar == '\u1001')  
        else if (curChar == '\u1002')  
        else if (curChar == '\u1003')  
        else if (curChar == '\u1004')  
        else if (curChar == '\u1005')  
        else if (curChar == '\u1006')  
        else if (curChar == '\u1007')  
        else if (curChar == '\u1008')  
        else if (curChar == '\u1009')  
        else if (curChar == '\u100a')  
        else if (curChar == '\u100b')  
        else if (curChar == '\u100c')  
        else if (curChar == '\u100d')  
        else if (curChar == '\u100e')  
        else if (curChar == '\u100f')  
        else if (curChar == '\u1010')  
        else if (curChar == '\u1011')  
        else if (curChar == '\u1012')  
        else if (curChar == '\u1013')  
        else if (curChar == '\u1014')  
        else if (curChar == '\u1015')  
        else if (curChar == '\u1016')  
        else if (curChar == '\u1017')  
        else if (curChar == '\u1018')  
        else if (curChar == '\u1019')  
        else if (curChar == '\u101a')  
        else if (curChar == '\u101b')  
        else if (curChar == '\u101c')  
        else if (curChar == '\u101d')  
        else if (curChar == '\u101e')  
        else if (curChar == '\u101f')  
        else if (curChar == '\u1020')  
        else if (curChar == '\u1021')  
        else if (curChar == '\u1022')  
        else if (curChar == '\u1023')  
        else if (curChar == '\u1024')  
        else if (curChar == '\u1025')  
        else if (curChar == '\u1026')  
        else if (curChar == '\u1027')  
        else if (curChar == '\u1028')  
        else if (curChar == '\u1029')  
        else if (curChar == '\u102a')  
        else if (curChar == '\u102b')  
        else if (curChar == '\u102c')  
        else if (curChar == '\u102d')  
        else if (curChar == '\u102e')  
        else if (curChar == '\u102f')  
        else if (curChar == '\u1030')  
        else if (curChar == '\u1031')  
        else if (curChar == '\u1032')  
        else if (curChar == '\u1033')  
        else if (curChar == '\u1034')  
        else if (curChar == '\u1035')  
        else if (curChar == '\u1036')  
        else if (curChar == '\u1037')  
        else if (curChar == '\u1038')  
        else if (curChar == '\u1039')  
			  	curStr += curChar;
		  	char  curChar = actualJS.charAt(i);
		  	if (curChar == '\u1000')  
		  	else if (curChar == '\u1001')  
        else if (curChar == '\u1002')  
        else if (curChar == '\u1003')  
        else if (curChar == '\u1004')  
        else if (curChar == '\u1005')  
        else if (curChar == '\u1006')  
        else if (curChar == '\u1007')  
        else if (curChar == '\u1008')  
        else if (curChar == '\u1009')  
        else if (curChar == '\u100a')  
        else if (curChar == '\u100b')  
        else if (curChar == '\u100c')  
        else if (curChar == '\u100d')  
        else if (curChar == '\u100e')  
        else if (curChar == '\u100f')  
        else if (curChar == '\u1010')  
        else if (curChar == '\u1011')  
        else if (curChar == '\u1012')  
        else if (curChar == '\u1013')  
        else if (curChar == '\u1014')  
        else if (curChar == '\u1015')  
        else if (curChar == '\u1016')  
        else if (curChar == '\u1017')  
        else if (curChar == '\u1018')  
        else if (curChar == '\u1019')  
        else if (curChar == '\u101a')  
        else if (curChar == '\u101b')  
        else if (curChar == '\u101c')  
        else if (curChar == '\u101d')  
        else if (curChar == '\u101e')  
        else if (curChar == '\u101f')  
        else if (curChar == '\u1020')  
        else if (curChar == '\u1021')  
        else if (curChar == '\u1022')  
        else if (curChar == '\u1023')  
        else if (curChar == '\u1024')  
        else if (curChar == '\u1025')  
        else if (curChar == '\u1026')  
        else if (curChar == '\u1027')  
        else if (curChar == '\u1028')  
        else if (curChar == '\u1029')  
        else if (curChar == '\u102a')  
        else if (curChar == '\u102b')  
        else if (curChar == '\u102c')  
        else if (curChar == '\u102d')  
        else if (curChar == '\u102e')  
        else if (curChar == '\u102f')  
        else if (curChar == '\u1030')  
        else if (curChar == '\u1031')  
        else if (curChar == '\u1032')  
        else if (curChar == '\u1033')  
        else if (curChar == '\u1034')  
        else if (curChar == '\u1035')  
        else if (curChar == '\u1036')  
        else if (curChar == '\u1037')  
        else if (curChar == '\u1038')  
        else if (curChar == '\u1039')  
			  	curStr += curChar;
Possible variable curLine
            String  curLine = curValues.get(j);
            builder.addLine("    " + curLine);
            String  curLine = curValues.get(j);
            builder.addLine("    " + curLine);
Possible variable curValues
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
          for (int j = 0; j < curValues.size(); j++) {
            String  curLine = curValues.get(j);
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
          for (int j = 0; j < curValues.size(); j++) {
            String  curLine = curValues.get(j);
Possible variable current
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
Possible variable data
    builder.addLine("                    oldText.startsWith('data:'))");
    builder.addLine("              if (newText.startsWith('data:'))");
    builder.addLine("                else if (newData.startsWith('data:')) {");
    builder.addLine("                    oldText.startsWith('data:'))");
    builder.addLine("              if (newText.startsWith('data:'))");
    builder.addLine("                else if (newData.startsWith('data:')) {");
Possible variable default
    builder.addLine("        default: {");
    builder.addLine("        default: {");
    builder.addLine("      default: {");
    builder.addLine("          default: {");
    builder.addLine("        default: {");
    builder.addLine("        default: {");
    builder.addLine("      default: {");
    builder.addLine("          default: {");
Possible variable delete
    builder.addLine("        delete searchAttrs['innertext'];");
    builder.addLine("        delete searchAttrs['innertext'];");
Possible variable disabled
    builder.addLine("        matchError = 'disabled';");
    builder.addLine("        matchError = 'disabled';");
Possible variable divisionName
                                    String divisionName,
		if (divisionName == null) {
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'divisionName', divisionNameStr);");
    builder.addLine("                     '" + divisionName + "',");       
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'divisionName', divisionNameStr);");
    builder.addLine("               '" + divisionName + "',");      
                                    String divisionName,
		if (divisionName == null) {
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'divisionName', divisionNameStr);");
    builder.addLine("                     '" + divisionName + "',");       
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'divisionName', divisionNameStr);");
    builder.addLine("               '" + divisionName + "',");      
Possible variable document
    builder.addLine("  document.addEventListener(\"keydown\", event => {");
    builder.addLine("    let domNode = document.createElement(domObj.tag);");
    builder.addLine("      let textNode = document.createTextNode(domText);");
    builder.addLine("    var styleVar = document.createElement('style');");
    builder.addLine("    document.getElementsByTagName('head')[0].appendChild(styleVar);");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("      nodeList = document.querySelectorAll(curMod.cssselector);");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("      nodeList = [document];");
    builder.addLine("        nodeElements = document.getElementsByTagName(nodeTag);");
    builder.addLine("        nodeElement = document.getElementById(nodeId);");
    builder.addLine("        nodeElements = document.getElementsByClassName(nodeClass);");
    builder.addLine("        nodeElements = document.getElementsByName(nodeName);");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("    let pathValueStr = document.location.pathname;");
    builder.addLine("    let pathNameStr = document.location.pathname;");
    builder.addLine("  let HDLmObsTargetNode = document;");
    builder.addLine("    if (document.location.hostname == 'www.themarvelouslandofoz.com' &&");
    builder.addLine("        document.readyState == 'interactive')");
    builder.addLine("    HDLmApplyMods(document.readyState, HDLmIndexValue);");
    builder.addLine("    if (document.readyState == 'complete' ||");
    builder.addLine("      HDLmApplyMods(document.readyState, HDLmIndexValue);");
    builder.addLine("  let pathValueStr = document.location.pathname;");     
    builder.addLine("  document.addEventListener(\"keydown\", event => {");
    builder.addLine("    let domNode = document.createElement(domObj.tag);");
    builder.addLine("      let textNode = document.createTextNode(domText);");
    builder.addLine("    var styleVar = document.createElement('style');");
    builder.addLine("    document.getElementsByTagName('head')[0].appendChild(styleVar);");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("      nodeList = document.querySelectorAll(curMod.cssselector);");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("      nodeList = [document];");
    builder.addLine("        nodeElements = document.getElementsByTagName(nodeTag);");
    builder.addLine("        nodeElement = document.getElementById(nodeId);");
    builder.addLine("        nodeElements = document.getElementsByClassName(nodeClass);");
    builder.addLine("        nodeElements = document.getElementsByName(nodeName);");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("    let pathValueStr = document.location.pathname;");
    builder.addLine("    let pathNameStr = document.location.pathname;");
    builder.addLine("  let HDLmObsTargetNode = document;");
    builder.addLine("    if (document.location.hostname == 'www.themarvelouslandofoz.com' &&");
    builder.addLine("        document.readyState == 'interactive')");
    builder.addLine("    HDLmApplyMods(document.readyState, HDLmIndexValue);");
    builder.addLine("    if (document.readyState == 'complete' ||");
    builder.addLine("      HDLmApplyMods(document.readyState, HDLmIndexValue);");
    builder.addLine("  let pathValueStr = document.location.pathname;");     
Possible variable double
    double  sessionIndexValue = 0.0;
         	double      indexValue = sessionIndexValue * choicesJsonArraySize;
    double  sessionIndexValue = 0.0;
         	double      indexValue = sessionIndexValue * choicesJsonArraySize;
Possible variable element
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
Possible variable else
    builder.addLine("      else {");
    builder.addLine("      else {");
    builder.addLine("      else {");
    builder.addLine("            else");
    builder.addLine("                  else");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("              else if (curNode.hasAttribute(newName))");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("            else if (curType == 'text'        ||");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'remove' ||");
    builder.addLine("            else if (curType == 'textchecked') {");
    builder.addLine("            else {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else {");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("                else if (newData.startsWith('data:')) {");
    builder.addLine("                else if (newData.startsWith('http')) {");
    builder.addLine("                else {");
    builder.addLine("              else {");
    builder.addLine("            else if (curType == 'title' ||");
    builder.addLine("      else");
    builder.addLine("          else  {");
    builder.addLine("    else");
    builder.addLine("    else if (elementClasses.contains(newClass) == false)");
    builder.addLine("    else {");
    builder.addLine("    else if (curMod.xpath !== '') {");
    builder.addLine("    else if (curMod.nodeiden !== null) {");
    builder.addLine("    else {");
    builder.addLine("        else");
    builder.addLine("        else {");
    builder.addLine("      else if (nodeAttributeKey == 'class') {");
    builder.addLine("          else");
    builder.addLine("        else");
    builder.addLine("      else if (nodeAttributeKey == 'innertext') {");
    builder.addLine("      else if (nodeAttributeKey == 'phash') {");
    builder.addLine("      else if (nodeAttributeKey == 'src') {");
    builder.addLine("      else if (nodeAttributeKey == 'style') {");
    builder.addLine("      else {");
    builder.addLine("          else");
    builder.addLine("          else");
    builder.addLine("        else {");
    builder.addLine("      else {");
    builder.addLine("    else");
    builder.addLine("    else if (searchValue.length > 0 && searchValue.charAt(0) == '{') {");
    builder.addLine("    else {");
    builder.addLine("    else");
    else
    else
    builder.addLine("      else {");
    builder.addLine("        else {");
          else {
      else
    else
    else
		  	else if (curChar == '\u1001')  
        else if (curChar == '\u1002')  
        else if (curChar == '\u1003')  
        else if (curChar == '\u1004')  
        else if (curChar == '\u1005')  
        else if (curChar == '\u1006')  
        else if (curChar == '\u1007')  
        else if (curChar == '\u1008')  
        else if (curChar == '\u1009')  
        else if (curChar == '\u100a')  
        else if (curChar == '\u100b')  
        else if (curChar == '\u100c')  
        else if (curChar == '\u100d')  
        else if (curChar == '\u100e')  
        else if (curChar == '\u100f')  
        else if (curChar == '\u1010')  
        else if (curChar == '\u1011')  
        else if (curChar == '\u1012')  
        else if (curChar == '\u1013')  
        else if (curChar == '\u1014')  
        else if (curChar == '\u1015')  
        else if (curChar == '\u1016')  
        else if (curChar == '\u1017')  
        else if (curChar == '\u1018')  
        else if (curChar == '\u1019')  
        else if (curChar == '\u101a')  
        else if (curChar == '\u101b')  
        else if (curChar == '\u101c')  
        else if (curChar == '\u101d')  
        else if (curChar == '\u101e')  
        else if (curChar == '\u101f')  
        else if (curChar == '\u1020')  
        else if (curChar == '\u1021')  
        else if (curChar == '\u1022')  
        else if (curChar == '\u1023')  
        else if (curChar == '\u1024')  
        else if (curChar == '\u1025')  
        else if (curChar == '\u1026')  
        else if (curChar == '\u1027')  
        else if (curChar == '\u1028')  
        else if (curChar == '\u1029')  
        else if (curChar == '\u102a')  
        else if (curChar == '\u102b')  
        else if (curChar == '\u102c')  
        else if (curChar == '\u102d')  
        else if (curChar == '\u102e')  
        else if (curChar == '\u102f')  
        else if (curChar == '\u1030')  
        else if (curChar == '\u1031')  
        else if (curChar == '\u1032')  
        else if (curChar == '\u1033')  
        else if (curChar == '\u1034')  
        else if (curChar == '\u1035')  
        else if (curChar == '\u1036')  
        else if (curChar == '\u1037')  
        else if (curChar == '\u1038')  
        else if (curChar == '\u1039')  
		  	else {
    builder.addLine("      else {");
    builder.addLine("      else {");
    builder.addLine("      else {");
    builder.addLine("            else");
    builder.addLine("                  else");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("              else if (curNode.hasAttribute(newName))");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("            else if (curType == 'text'        ||");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'remove' ||");
    builder.addLine("            else if (curType == 'textchecked') {");
    builder.addLine("            else {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else {");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("                else if (newData.startsWith('data:')) {");
    builder.addLine("                else if (newData.startsWith('http')) {");
    builder.addLine("                else {");
    builder.addLine("              else {");
    builder.addLine("            else if (curType == 'title' ||");
    builder.addLine("      else");
    builder.addLine("          else  {");
    builder.addLine("    else");
    builder.addLine("    else if (elementClasses.contains(newClass) == false)");
    builder.addLine("    else {");
    builder.addLine("    else if (curMod.xpath !== '') {");
    builder.addLine("    else if (curMod.nodeiden !== null) {");
    builder.addLine("    else {");
    builder.addLine("        else");
    builder.addLine("        else {");
    builder.addLine("      else if (nodeAttributeKey == 'class') {");
    builder.addLine("          else");
    builder.addLine("        else");
    builder.addLine("      else if (nodeAttributeKey == 'innertext') {");
    builder.addLine("      else if (nodeAttributeKey == 'phash') {");
    builder.addLine("      else if (nodeAttributeKey == 'src') {");
    builder.addLine("      else if (nodeAttributeKey == 'style') {");
    builder.addLine("      else {");
    builder.addLine("          else");
    builder.addLine("          else");
    builder.addLine("        else {");
    builder.addLine("      else {");
    builder.addLine("    else");
    builder.addLine("    else if (searchValue.length > 0 && searchValue.charAt(0) == '{') {");
    builder.addLine("    else {");
    builder.addLine("    else");
    else
    else
    builder.addLine("      else {");
    builder.addLine("        else {");
          else {
      else
    else
    else
		  	else if (curChar == '\u1001')  
        else if (curChar == '\u1002')  
        else if (curChar == '\u1003')  
        else if (curChar == '\u1004')  
        else if (curChar == '\u1005')  
        else if (curChar == '\u1006')  
        else if (curChar == '\u1007')  
        else if (curChar == '\u1008')  
        else if (curChar == '\u1009')  
        else if (curChar == '\u100a')  
        else if (curChar == '\u100b')  
        else if (curChar == '\u100c')  
        else if (curChar == '\u100d')  
        else if (curChar == '\u100e')  
        else if (curChar == '\u100f')  
        else if (curChar == '\u1010')  
        else if (curChar == '\u1011')  
        else if (curChar == '\u1012')  
        else if (curChar == '\u1013')  
        else if (curChar == '\u1014')  
        else if (curChar == '\u1015')  
        else if (curChar == '\u1016')  
        else if (curChar == '\u1017')  
        else if (curChar == '\u1018')  
        else if (curChar == '\u1019')  
        else if (curChar == '\u101a')  
        else if (curChar == '\u101b')  
        else if (curChar == '\u101c')  
        else if (curChar == '\u101d')  
        else if (curChar == '\u101e')  
        else if (curChar == '\u101f')  
        else if (curChar == '\u1020')  
        else if (curChar == '\u1021')  
        else if (curChar == '\u1022')  
        else if (curChar == '\u1023')  
        else if (curChar == '\u1024')  
        else if (curChar == '\u1025')  
        else if (curChar == '\u1026')  
        else if (curChar == '\u1027')  
        else if (curChar == '\u1028')  
        else if (curChar == '\u1029')  
        else if (curChar == '\u102a')  
        else if (curChar == '\u102b')  
        else if (curChar == '\u102c')  
        else if (curChar == '\u102d')  
        else if (curChar == '\u102e')  
        else if (curChar == '\u102f')  
        else if (curChar == '\u1030')  
        else if (curChar == '\u1031')  
        else if (curChar == '\u1032')  
        else if (curChar == '\u1033')  
        else if (curChar == '\u1034')  
        else if (curChar == '\u1035')  
        else if (curChar == '\u1036')  
        else if (curChar == '\u1037')  
        else if (curChar == '\u1038')  
        else if (curChar == '\u1039')  
		  	else {
Possible variable encodeURIComponent
    builder.addLine("    urlStr = encodeURIComponent(urlStr);");
    builder.addLine("    dataStr = encodeURIComponent(dataStr);");
    builder.addLine("    urlStr = encodeURIComponent(urlStr);");
    builder.addLine("    dataStr = encodeURIComponent(dataStr);");
Possible variable entry
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
	    String  key = entry.getKey();
	    String  value = entry.getValue();
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
	    String  key = entry.getKey();
	    String  value = entry.getValue();
Possible variable error
    builder.addLine("    \"error\": 2,");
    builder.addLine("    \"error\": 2,");
Possible variable event
    builder.addLine("  document.addEventListener(\"keydown\", event => {");
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("        window.addEventListener(key.slice(2), event => {");  
    builder.addLine("          let eventName = HDLmGetObjectName(event);"); 
    builder.addLine("          let eventJson = HDLmGetJsonForEventObject(event, eventName, hostNameStr, pathNameStr, sessionIdValue)");
    builder.addLine("  document.addEventListener(\"keydown\", event => {");
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("        window.addEventListener(key.slice(2), event => {");  
    builder.addLine("          let eventName = HDLmGetObjectName(event);"); 
    builder.addLine("          let eventJson = HDLmGetJsonForEventObject(event, eventName, hostNameStr, pathNameStr, sessionIdValue)");
Possible variable exception
    builder.addLine("      newObj.reason = 'exception';");
    builder.addLine("      newObj.reason = 'exception';");
    builder.addLine("      newObj.reason = 'exception';");
    builder.addLine("      newObj.reason = 'exception';");
Possible variable expected
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
Possible variable extract
    builder.addLine("        case 'extract': {");
    builder.addLine("            let localReason = 'extract';");
    builder.addLine("            postTrace.matcherror = 'extract';");
    builder.addLine("          case 'extract': {");
    builder.addLine("        case 'extract': {");
    builder.addLine("            let localReason = 'extract';");
    builder.addLine("            postTrace.matcherror = 'extract';");
    builder.addLine("          case 'extract': {");
Possible variable failure
    builder.addLine("            HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("              HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("            HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("        HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("            HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("          HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("              HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("            HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
    builder.addLine("        HDLmSendUpdates(localUpdates, 'failure', '1.0', postTrace);");
Possible variable false
    boolean         useCreateFixedJS = false;
    builder.addLine("    let postRuleTracing = false;");
    builder.addLine("    let matchFound = false;");
    builder.addLine("          ignoreProbability = 'false';");
    builder.addLine("      if (matchRes == false) {");
    builder.addLine("      let sessionIndexValueUsed = false;");
    builder.addLine("          let sendUpdates = false;");
    builder.addLine("          let testFlag = false;");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("          let forceSelectFound = false;");
    builder.addLine("              forceSelectFound == false) {");
    builder.addLine("              let testFlag = false;");
    builder.addLine("      if (matchFound === false) {");
    builder.addLine("      if (newIntArray.includes(i) == false)");
    builder.addLine("    let forceBreak = false;");
    builder.addLine("          if (testFlag == false)");
    builder.addLine("          if (changesMatch && testFlag == false)");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("      rv = false;;");
    builder.addLine("    if (disabledStatus == 'false')");
    builder.addLine("      disabledStatus = false;");
    builder.addLine("    else if (elementClasses.contains(newClass) == false)");
    builder.addLine("        if (nodeIden.hasOwnProperty('parent') == false)");
    builder.addLine("        if (nodeIden.hasOwnProperty('grandparent') == false)");
    builder.addLine("    if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag) == false) {");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("        quotes = false;");
    builder.addLine("            quotes = false;");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("    let countHigh = false;");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("    disabledStatus = (disabledStatus == 'true') ? false : true;");
      logRuleMatchingString = "false";
    builder.addLine("            let nodeList = HDLmFind(curMod, false);");
	 	  HDLmAssert.HDLmAssertAction(false, errorText);
    	 	  HDLmAssert.HDLmAssertAction(false, errorText);
    	 	  HDLmAssert.HDLmAssertAction(false, errorText);
      	 	  HDLmAssert.HDLmAssertAction(false, errorText);
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
    builder.addLine("    let forceReadyState = false;");
    boolean         useCreateFixedJS = false;
    builder.addLine("    let postRuleTracing = false;");
    builder.addLine("    let matchFound = false;");
    builder.addLine("          ignoreProbability = 'false';");
    builder.addLine("      if (matchRes == false) {");
    builder.addLine("      let sessionIndexValueUsed = false;");
    builder.addLine("          let sendUpdates = false;");
    builder.addLine("          let testFlag = false;");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("          let forceSelectFound = false;");
    builder.addLine("              forceSelectFound == false) {");
    builder.addLine("              let testFlag = false;");
    builder.addLine("      if (matchFound === false) {");
    builder.addLine("      if (newIntArray.includes(i) == false)");
    builder.addLine("    let forceBreak = false;");
    builder.addLine("          if (testFlag == false)");
    builder.addLine("          if (changesMatch && testFlag == false)");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("      rv = false;;");
    builder.addLine("    if (disabledStatus == 'false')");
    builder.addLine("      disabledStatus = false;");
    builder.addLine("    else if (elementClasses.contains(newClass) == false)");
    builder.addLine("        if (nodeIden.hasOwnProperty('parent') == false)");
    builder.addLine("        if (nodeIden.hasOwnProperty('grandparent') == false)");
    builder.addLine("    if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag) == false) {");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("        quotes = false;");
    builder.addLine("            quotes = false;");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("    let countHigh = false;");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("    disabledStatus = (disabledStatus == 'true') ? false : true;");
      logRuleMatchingString = "false";
    builder.addLine("            let nodeList = HDLmFind(curMod, false);");
	 	  HDLmAssert.HDLmAssertAction(false, errorText);
    	 	  HDLmAssert.HDLmAssertAction(false, errorText);
    	 	  HDLmAssert.HDLmAssertAction(false, errorText);
      	 	  HDLmAssert.HDLmAssertAction(false, errorText);
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
    builder.addLine("    let forceReadyState = false;");
Possible variable family
    builder.addLine("                          'fontfamily':'font-family',");
    builder.addLine("                          'fontfamily':'font-family',");
Possible variable fileExists
    	boolean   fileExists = HDLmUtility.fileExists(fixedJSName);
    	if (fileExists) {
    	boolean   fileExists = HDLmUtility.fileExists(fixedJSName);
    	if (fileExists) {
Possible variable filter
                                      "'filter: grayscale(100%)');");  
                                      "'filter: grayscale(100%)');");  
Possible variable final
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
      final static String  jsonString = 
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
      final static String  jsonString = 
Possible variable finalLookupIndex
    builder.addLine("      let finalLookupIndex = 0;");
    builder.addLine("        finalLookupIndex = tempLookupIndex;");
    builder.addLine("            finalLookupIndex = Math.floor(newCount * lookupValue);");
    builder.addLine("            finalLookupIndex = Math.min(finalLookupIndex, newCount - 1);");
    builder.addLine("            finalLookupIndex = Math.min(finalLookupIndex, newCount - 1);");
    builder.addLine("            if (finalLookupIndex >= 0)");
    builder.addLine("              newText = newTexts[finalLookupIndex];");
    builder.addLine("              finalLookupIndex = i;");
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
    builder.addLine("      let finalLookupIndex = 0;");
    builder.addLine("        finalLookupIndex = tempLookupIndex;");
    builder.addLine("            finalLookupIndex = Math.floor(newCount * lookupValue);");
    builder.addLine("            finalLookupIndex = Math.min(finalLookupIndex, newCount - 1);");
    builder.addLine("            finalLookupIndex = Math.min(finalLookupIndex, newCount - 1);");
    builder.addLine("            if (finalLookupIndex >= 0)");
    builder.addLine("              newText = newTexts[finalLookupIndex];");
    builder.addLine("              finalLookupIndex = i;");
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
Possible variable fixedJSName
    String          fixedJSName = null;
    	fixedJSName = HDLmDefines.getString("HDLMFIXEDFILENAME");
    	boolean   fileExists = HDLmUtility.fileExists(fixedJSName);
        actualJS = HDLmUtility.fileGetContents(fixedJSName);
		  HDLmUtility.fileClearContents(fixedJSName);
		  HDLmUtility.filePutAppend(fixedJSName, 
    String          fixedJSName = null;
    	fixedJSName = HDLmDefines.getString("HDLMFIXEDFILENAME");
    	boolean   fileExists = HDLmUtility.fileExists(fixedJSName);
        actualJS = HDLmUtility.fileGetContents(fixedJSName);
		  HDLmUtility.fileClearContents(fixedJSName);
		  HDLmUtility.filePutAppend(fixedJSName, 
Possible variable font
    builder.addLine("                          'fontfamily':'font-family',");
    builder.addLine("                          'fontkerning':'font-kerning',");
    builder.addLine("                          'fontsize':'font-size',");
    builder.addLine("                          'fontstyle':'font-style',");
    builder.addLine("                          'fontweight':'font-weight'");
    builder.addLine("                          'fontfamily':'font-family',");
    builder.addLine("                          'fontkerning':'font-kerning',");
    builder.addLine("                          'fontsize':'font-size',");
    builder.addLine("                          'fontstyle':'font-style',");
    builder.addLine("                          'fontweight':'font-weight'");
Possible variable fontcolor
    builder.addLine("                          'fontcolor':'color',");
    builder.addLine("        case 'fontcolor':");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("                          'fontcolor':'color',");
    builder.addLine("        case 'fontcolor':");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
Possible variable fontfamily
    builder.addLine("                          'fontfamily':'font-family',");
    builder.addLine("        case 'fontfamily':");
    builder.addLine("                     curType == 'fontfamily'  ||");
    builder.addLine("                     curType == 'fontfamily'  ||");
    builder.addLine("                          'fontfamily':'font-family',");
    builder.addLine("        case 'fontfamily':");
    builder.addLine("                     curType == 'fontfamily'  ||");
    builder.addLine("                     curType == 'fontfamily'  ||");
Possible variable fontkerning
    builder.addLine("                          'fontkerning':'font-kerning',");
    builder.addLine("        case 'fontkerning':");
    builder.addLine("                     curType == 'fontkerning' ||");
    builder.addLine("                     curType == 'fontkerning' ||");
    builder.addLine("                          'fontkerning':'font-kerning',");
    builder.addLine("        case 'fontkerning':");
    builder.addLine("                     curType == 'fontkerning' ||");
    builder.addLine("                     curType == 'fontkerning' ||");
Possible variable fontsize
    builder.addLine("                          'fontsize':'font-size',");
    builder.addLine("        case 'fontsize':");
    builder.addLine("                     curType == 'fontsize'    ||");
    builder.addLine("                     curType == 'fontsize'    ||");
    builder.addLine("              if (curType == 'fontsize')");
    builder.addLine("                          'fontsize':'font-size',");
    builder.addLine("        case 'fontsize':");
    builder.addLine("                     curType == 'fontsize'    ||");
    builder.addLine("                     curType == 'fontsize'    ||");
    builder.addLine("              if (curType == 'fontsize')");
Possible variable fontstyle
    builder.addLine("                          'fontstyle':'font-style',");
    builder.addLine("        case 'fontstyle':");
    builder.addLine("                     curType == 'fontstyle'   ||");
    builder.addLine("                     curType == 'fontstyle'   ||");
    builder.addLine("                          'fontstyle':'font-style',");
    builder.addLine("        case 'fontstyle':");
    builder.addLine("                     curType == 'fontstyle'   ||");
    builder.addLine("                     curType == 'fontstyle'   ||");
Possible variable fontweight
    builder.addLine("                          'fontweight':'font-weight'");
    builder.addLine("        case 'fontweight':");
    builder.addLine("                     curType == 'fontweight') {");
    builder.addLine("                     curType == 'fontweight') {");
    builder.addLine("                          'fontweight':'font-weight'");
    builder.addLine("        case 'fontweight':");
    builder.addLine("                     curType == 'fontweight') {");
    builder.addLine("                     curType == 'fontweight') {");
Possible variable for
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("      for (let attrObjName in attrObj) {");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i in inputSplit) {");
    for (HDLmMod mod: mods) {
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (const keyValue in changesObj) {");
    for (HDLmMod mod: mods) {
        for (int i = 0; i < valueCount; i++) {
          for (int j = 0; j < curValues.size(); j++) {
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    for (int i=0; i < indexJsonArraySize; i++) {
        for (int j=0; j < rulesJsonArraySize; j++) {
    for (int i = 0; i < sessionParametersArrayLength; i++) {
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
		  for (i = 0; i < actualJSLen; i++) {
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("      for (let attrObjName in attrObj) {");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i in inputSplit) {");
    for (HDLmMod mod: mods) {
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (const keyValue in changesObj) {");
    for (HDLmMod mod: mods) {
        for (int i = 0; i < valueCount; i++) {
          for (int j = 0; j < curValues.size(); j++) {
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    for (int i=0; i < indexJsonArraySize; i++) {
        for (int j=0; j < rulesJsonArraySize; j++) {
    for (int i = 0; i < sessionParametersArrayLength; i++) {
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
		  for (i = 0; i < actualJSLen; i++) {
Possible variable form
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
Possible variable full
    builder.addLine("    let nodeIdenCheckType = 'full';");
    builder.addLine("    let nodeIdenCheckType = 'full';");
Possible variable function
    builder.addLine("  function HDLmApplyMod(pathValueStr,");
    builder.addLine("            curNode.addEventListener('click', (function() {");
    builder.addLine("              return function() {");
    builder.addLine("  function HDLmArrayJoin(curArray, joinChar) {");
    builder.addLine("  function HDLmBuildErrorRule(curMod, matchError, pathValueStr) {");
    builder.addLine("  function HDLmBuildNodeFromObject(domObj) {");
    builder.addLine("  function HDLmBuildOrder(newText, totalLength) {");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("  function HDLmBuildSuffix(newValue, suffixStr) {");
    builder.addLine("  function HDLmChangeNodes(curNode, jsonText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("  function HDLmCheckTextMatches(actualText, requiredText,");
    builder.addLine("  function HDLmClassAddSpecialClass(curNode, curType, extraStr) {");
    builder.addLine("  function HDLmClassAddCss(passedName, passedRules) {");
    builder.addLine("  function HDLmClassAddEntry(elementNodeReference, newClass) {");
    builder.addLine("  function HDLmCompareCaseInsensitive(firstStr, secondStr) {");
    builder.addLine("  function HDLmErrorToString(errorObj) {");
    builder.addLine("  function HDLmFind(curMod, nodeIdenTracing, postRuleTracing, postTrace) {");
    builder.addLine("  function HDLmFindNodeIden(curMod, nodeIdenTracing, postRuleTracing, postTrace) {");
    builder.addLine("  function HDLmFindNodeIdenCheck(nodeElements,");
    builder.addLine("  function HDLmFindNodeIdenMatch(nodeElement,");
    builder.addLine("  function HDLmFindOneLevel(nodeList, findEntry) {");
    builder.addLine("        if (typeof curNode.getElementById === 'function' &&");
    builder.addLine("      if (typeof curNode.getElementByClassName === 'function' &&");
    builder.addLine("      if (typeof curNode.getElementsByTagName === 'function' &&");
    builder.addLine("        if (typeof curChild.hasAttribute !== 'function')");
    builder.addLine("        if (typeof curChild.getAttribute !== 'function')");
    builder.addLine("  function HDLmFindPHash(urlStr) {");
    builder.addLine("  function HDLmGetAllPropertyNames(obj) {");
    builder.addLine("  function HDLmGetBackground(domElement, replacementImageName) {");
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("  function HDLmGetObjectName(obj) {");
    builder.addLine("  function HDLmGetUpdateCount(curNode, matchModifiedName, readyState) {");
    builder.addLine("  function HDLmHammingDistance(firstVal, secondVal) {");
    builder.addLine("  function HDLmHammingDistanceAdjusted(firstVal, secondVal) {");
    builder.addLine("  function HDLmHammingDistanceLong(firstVal, secondVal) {");
    builder.addLine("  function HDLmHandleVisitRequest(visitText, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("  function HDLmIncrementUpdateCount(curNode, matchModifiedName) {");
    builder.addLine("  function HDLmModifySearch(searchText) {");
    builder.addLine("  function HDLmObtainValue(searchValue) {");
    builder.addLine("  function HDLmRemoveHost(urlStr) {");
    builder.addLine("  function HDLmRemoveProtocol(urlStr) {");
    builder.addLine("  function HDLmReplaceInString(inStr) {");
    builder.addLine("  function HDLmResetStyleSheetEnablement(titleValue, disabledStatus) {");
    builder.addLine("  function HDLmSaveChange(savedUpdates, indexUsed,");
    builder.addLine("  function HDLmStyleFixValues(inputStyles) {");
    builder.addLine("  function HDLmStyleSplitString(inputString) {");
    builder.addLine("  function HDLmToggleStyleSheetEnablement() {");
    builder.addLine("  function HDLmUpdateJsonStr(jsonStr, keyStr, valueStr) {");
    builder.addLine("  function HDLmApplyMods(readyState, HDLmIndexValue) {");
    builder.addLine("  function HDLmBuildError(errSeverity, curType, errNumber, errText) {");
    builder.addLine("  function HDLmChangeAttributes(curNode, jsonText) {");
          newLine = "  function HDLmExecute" + newName + i + "() {";
    builder.addLine("  function HDLmGetAttributesString(curNode) {");
    builder.addLine("  function HDLmGetLookupIndex(ruleName) {");
    builder.addLine("  function HDLmGetParametersArray() {");
    builder.addLine("  function HDLmGetPHash(urlStr) {");
    builder.addLine("  function HDLmSendData(dataStr) {");
    builder.addLine("  function HDLmSendUpdates(savedUpdates, reasonStr, weightStr, errorStr) {");
    builder.addLine("  let HDLmObsCallback = function (mutationsList, HDLmObsObserver) {");
    builder.addLine("  function HDLmApplyMod(pathValueStr,");
    builder.addLine("            curNode.addEventListener('click', (function() {");
    builder.addLine("              return function() {");
    builder.addLine("  function HDLmArrayJoin(curArray, joinChar) {");
    builder.addLine("  function HDLmBuildErrorRule(curMod, matchError, pathValueStr) {");
    builder.addLine("  function HDLmBuildNodeFromObject(domObj) {");
    builder.addLine("  function HDLmBuildOrder(newText, totalLength) {");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("  function HDLmBuildSuffix(newValue, suffixStr) {");
    builder.addLine("  function HDLmChangeNodes(curNode, jsonText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("  function HDLmCheckTextMatches(actualText, requiredText,");
    builder.addLine("  function HDLmClassAddSpecialClass(curNode, curType, extraStr) {");
    builder.addLine("  function HDLmClassAddCss(passedName, passedRules) {");
    builder.addLine("  function HDLmClassAddEntry(elementNodeReference, newClass) {");
    builder.addLine("  function HDLmCompareCaseInsensitive(firstStr, secondStr) {");
    builder.addLine("  function HDLmErrorToString(errorObj) {");
    builder.addLine("  function HDLmFind(curMod, nodeIdenTracing, postRuleTracing, postTrace) {");
    builder.addLine("  function HDLmFindNodeIden(curMod, nodeIdenTracing, postRuleTracing, postTrace) {");
    builder.addLine("  function HDLmFindNodeIdenCheck(nodeElements,");
    builder.addLine("  function HDLmFindNodeIdenMatch(nodeElement,");
    builder.addLine("  function HDLmFindOneLevel(nodeList, findEntry) {");
    builder.addLine("        if (typeof curNode.getElementById === 'function' &&");
    builder.addLine("      if (typeof curNode.getElementByClassName === 'function' &&");
    builder.addLine("      if (typeof curNode.getElementsByTagName === 'function' &&");
    builder.addLine("        if (typeof curChild.hasAttribute !== 'function')");
    builder.addLine("        if (typeof curChild.getAttribute !== 'function')");
    builder.addLine("  function HDLmFindPHash(urlStr) {");
    builder.addLine("  function HDLmGetAllPropertyNames(obj) {");
    builder.addLine("  function HDLmGetBackground(domElement, replacementImageName) {");
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("  function HDLmGetObjectName(obj) {");
    builder.addLine("  function HDLmGetUpdateCount(curNode, matchModifiedName, readyState) {");
    builder.addLine("  function HDLmHammingDistance(firstVal, secondVal) {");
    builder.addLine("  function HDLmHammingDistanceAdjusted(firstVal, secondVal) {");
    builder.addLine("  function HDLmHammingDistanceLong(firstVal, secondVal) {");
    builder.addLine("  function HDLmHandleVisitRequest(visitText, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("  function HDLmIncrementUpdateCount(curNode, matchModifiedName) {");
    builder.addLine("  function HDLmModifySearch(searchText) {");
    builder.addLine("  function HDLmObtainValue(searchValue) {");
    builder.addLine("  function HDLmRemoveHost(urlStr) {");
    builder.addLine("  function HDLmRemoveProtocol(urlStr) {");
    builder.addLine("  function HDLmReplaceInString(inStr) {");
    builder.addLine("  function HDLmResetStyleSheetEnablement(titleValue, disabledStatus) {");
    builder.addLine("  function HDLmSaveChange(savedUpdates, indexUsed,");
    builder.addLine("  function HDLmStyleFixValues(inputStyles) {");
    builder.addLine("  function HDLmStyleSplitString(inputString) {");
    builder.addLine("  function HDLmToggleStyleSheetEnablement() {");
    builder.addLine("  function HDLmUpdateJsonStr(jsonStr, keyStr, valueStr) {");
    builder.addLine("  function HDLmApplyMods(readyState, HDLmIndexValue) {");
    builder.addLine("  function HDLmBuildError(errSeverity, curType, errNumber, errText) {");
    builder.addLine("  function HDLmChangeAttributes(curNode, jsonText) {");
          newLine = "  function HDLmExecute" + newName + i + "() {";
    builder.addLine("  function HDLmGetAttributesString(curNode) {");
    builder.addLine("  function HDLmGetLookupIndex(ruleName) {");
    builder.addLine("  function HDLmGetParametersArray() {");
    builder.addLine("  function HDLmGetPHash(urlStr) {");
    builder.addLine("  function HDLmSendData(dataStr) {");
    builder.addLine("  function HDLmSendUpdates(savedUpdates, reasonStr, weightStr, errorStr) {");
    builder.addLine("  let HDLmObsCallback = function (mutationsList, HDLmObsObserver) {");
Possible variable functionStr
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
    builder.addLine("                window[functionStr]();");
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
    builder.addLine("                window[functionStr]();");
Possible variable g
    builder.addLine("    newText = newText.replace(/,/g, ' ');");
    builder.addLine("    let urlStrMod = urlStr.replace(/\\+/g, ' ');");
    builder.addLine("    inStr = inStr.replace(/A/g,'\u0e81');");
    builder.addLine("    inStr = inStr.replace(/B/g,'\u0e82');");
    builder.addLine("    inStr = inStr.replace(/C/g,'\u0e84');");
    builder.addLine("    inStr = inStr.replace(/D/g,'\u0e87');");
    builder.addLine("    inStr = inStr.replace(/E/g,'\u0e88');");
    builder.addLine("    inStr = inStr.replace(/F/g,'\u0e8a');");
    builder.addLine("    inStr = inStr.replace(/G/g,'\u0e8d');");
    builder.addLine("    inStr = inStr.replace(/H/g,'\u0e94');");
    builder.addLine("    inStr = inStr.replace(/I/g,'\u0e97');");
    builder.addLine("    inStr = inStr.replace(/J/g,'\u0e99');");
    builder.addLine("    inStr = inStr.replace(/K/g,'\u0e9f');");
    builder.addLine("    inStr = inStr.replace(/L/g,'\u0ea1');");
    builder.addLine("    inStr = inStr.replace(/M/g,'\u0ea3');");
    builder.addLine("    inStr = inStr.replace(/N/g,'\u0ea5');");
    builder.addLine("    inStr = inStr.replace(/O/g,'\u0ea7');");
    builder.addLine("    inStr = inStr.replace(/P/g,'\u0eaa');");
    builder.addLine("    inStr = inStr.replace(/Q/g,'\u0eab');");
    builder.addLine("    inStr = inStr.replace(/R/g,'\u0ead');");
    builder.addLine("    inStr = inStr.replace(/S/g,'\u0eb9');");
    builder.addLine("    inStr = inStr.replace(/T/g,'\u0ebb');");
    builder.addLine("    inStr = inStr.replace(/U/g,'\u0ebd');");
    builder.addLine("    inStr = inStr.replace(/V/g,'\u0ec0');");
    builder.addLine("    inStr = inStr.replace(/W/g,'\u0ec4');");
    builder.addLine("    inStr = inStr.replace(/X/g,'\u0ec6');");
    builder.addLine("    inStr = inStr.replace(/Y/g,'\u0ec8');");
    builder.addLine("    inStr = inStr.replace(/Z/g,'\u0ecd');");
    builder.addLine("    inStr = inStr.replace(/\\s/g,'\u0ed0');");
    builder.addLine("    inStr = inStr.replace(/\\$/g,'\u0ed1');");
    builder.addLine("    inStr = inStr.replace(/\\./g,'\u0ed2');");
    builder.addLine("    inStr = inStr.replace(/\\//g,'\u0ed3');");
    builder.addLine("    inStr = inStr.replace(/\\(/g,'\u0ed4');");
    builder.addLine("    inStr = inStr.replace(/\\)/g,'\u0ed5');");
    builder.addLine("    inputStyles = inputStyles.replace(/\\s+/g, ' ');");
    builder.addLine("    inputString = inputString.replace(/\\s+/g, ' ');");
    builder.addLine("    newText = newText.replace(/,/g, ' ');");
    builder.addLine("    let urlStrMod = urlStr.replace(/\\+/g, ' ');");
    builder.addLine("    inStr = inStr.replace(/A/g,'\u0e81');");
    builder.addLine("    inStr = inStr.replace(/B/g,'\u0e82');");
    builder.addLine("    inStr = inStr.replace(/C/g,'\u0e84');");
    builder.addLine("    inStr = inStr.replace(/D/g,'\u0e87');");
    builder.addLine("    inStr = inStr.replace(/E/g,'\u0e88');");
    builder.addLine("    inStr = inStr.replace(/F/g,'\u0e8a');");
    builder.addLine("    inStr = inStr.replace(/G/g,'\u0e8d');");
    builder.addLine("    inStr = inStr.replace(/H/g,'\u0e94');");
    builder.addLine("    inStr = inStr.replace(/I/g,'\u0e97');");
    builder.addLine("    inStr = inStr.replace(/J/g,'\u0e99');");
    builder.addLine("    inStr = inStr.replace(/K/g,'\u0e9f');");
    builder.addLine("    inStr = inStr.replace(/L/g,'\u0ea1');");
    builder.addLine("    inStr = inStr.replace(/M/g,'\u0ea3');");
    builder.addLine("    inStr = inStr.replace(/N/g,'\u0ea5');");
    builder.addLine("    inStr = inStr.replace(/O/g,'\u0ea7');");
    builder.addLine("    inStr = inStr.replace(/P/g,'\u0eaa');");
    builder.addLine("    inStr = inStr.replace(/Q/g,'\u0eab');");
    builder.addLine("    inStr = inStr.replace(/R/g,'\u0ead');");
    builder.addLine("    inStr = inStr.replace(/S/g,'\u0eb9');");
    builder.addLine("    inStr = inStr.replace(/T/g,'\u0ebb');");
    builder.addLine("    inStr = inStr.replace(/U/g,'\u0ebd');");
    builder.addLine("    inStr = inStr.replace(/V/g,'\u0ec0');");
    builder.addLine("    inStr = inStr.replace(/W/g,'\u0ec4');");
    builder.addLine("    inStr = inStr.replace(/X/g,'\u0ec6');");
    builder.addLine("    inStr = inStr.replace(/Y/g,'\u0ec8');");
    builder.addLine("    inStr = inStr.replace(/Z/g,'\u0ecd');");
    builder.addLine("    inStr = inStr.replace(/\\s/g,'\u0ed0');");
    builder.addLine("    inStr = inStr.replace(/\\$/g,'\u0ed1');");
    builder.addLine("    inStr = inStr.replace(/\\./g,'\u0ed2');");
    builder.addLine("    inStr = inStr.replace(/\\//g,'\u0ed3');");
    builder.addLine("    inStr = inStr.replace(/\\(/g,'\u0ed4');");
    builder.addLine("    inStr = inStr.replace(/\\)/g,'\u0ed5');");
    builder.addLine("    inputStyles = inputStyles.replace(/\\s+/g, ' ');");
    builder.addLine("    inputString = inputString.replace(/\\s+/g, ' ');");
Possible variable generated
        "    \"generated\":" +
        "    \"generated\":" +
Possible variable get
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
Possible variable getIndexJsonArray
    JsonArray   indexJsonArray = getIndexJsonArray(); 
  public static JsonArray  getIndexJsonArray() {
    JsonArray   indexJsonArray = getIndexJsonArray(); 
  public static JsonArray  getIndexJsonArray() {
Possible variable getIndexJsonArrayLocal
    class getIndexJsonArrayLocal {
    return getIndexJsonArrayLocal.rvJsonArray;
    class getIndexJsonArrayLocal {
    return getIndexJsonArrayLocal.rvJsonArray;
Possible variable getJSBuildJs
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
Possible variable getJsBuildJs
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
Possible variable grandparent
    builder.addLine("        if (nodeIden.hasOwnProperty('grandparent') == false)");
    builder.addLine("        if (nodeIden.hasOwnProperty('grandparent') == false)");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
Possible variable grayscale
                                      "'filter: grayscale(100%)');");  
                                      "'filter: grayscale(100%)');");  
Possible variable hash
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
Possible variable hdlmupdated
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
Possible variable head
    builder.addLine("    document.getElementsByTagName('head')[0].appendChild(styleVar);");
    builder.addLine("    document.getElementsByTagName('head')[0].appendChild(styleVar);");
Possible variable height
    builder.addLine("        case 'height':");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("        case 'height':");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("            else if (curType == 'height' ||");
Possible variable host
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
Possible variable hostName
                                    String hostName,
		if (hostName == null) {
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'hostName', hostNameStr);");
    builder.addLine("                     '" + hostName + "',");  
    builder.addLine("                     '" + hostName + "',"); 
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'hostName', hostNameStr);");
    	if (hostName.equals(jsonHostName)) {
    builder.addLine("               '" + hostName + "',");  
    builder.addLine("               '" + hostName + "',"); 
                                    String hostName,
		if (hostName == null) {
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'hostName', hostNameStr);");
    builder.addLine("                     '" + hostName + "',");  
    builder.addLine("                     '" + hostName + "',"); 
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'hostName', hostNameStr);");
    	if (hostName.equals(jsonHostName)) {
    builder.addLine("               '" + hostName + "',");  
    builder.addLine("               '" + hostName + "',"); 
Possible variable href
    builder.addLine("              HDLmSendUpdates(localUpdates, 'href', '1.0', postTrace);");
    builder.addLine("        if (nodeAttributeKey == 'href' &&");
    builder.addLine("              HDLmSendUpdates(localUpdates, 'href', '1.0', postTrace);");
    builder.addLine("        if (nodeAttributeKey == 'href' &&");
Possible variable http
    builder.addLine("                if (oldText.startsWith('http'))");
    builder.addLine("                else if (newData.startsWith('http')) {");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('http');");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('url(\"http');");
    builder.addLine("                if (oldText.startsWith('http'))");
    builder.addLine("                else if (newData.startsWith('http')) {");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('http');");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('url(\"http');");
Possible variable https
    builder.addLine("                curNode.setAttribute('src', 'https:' + newText);");
    builder.addLine("                    newData = 'url(https:' + newData + ')';");
    builder.addLine("                curNode.setAttribute('src', 'https:' + newText);");
    builder.addLine("                    newData = 'url(https:' + newData + ')';");
Possible variable i
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let nodeSend = nodeList[i];");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("            if (newTexts[i].startsWith(forceSelectStringValue)) {");
    builder.addLine("              newText = newTexts[i].substring(forceSelectStringValue.length);");
    builder.addLine("              finalLookupIndex = i;");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("                let curStyle = curModSplit[i];");
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("                  let newValue = newTextSplit[i];");
    builder.addLine("                  curNode.style.setProperty(curModSplit[i], newValue);");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("      if (i > 0)");
    builder.addLine("      let curValue = curArray[i];");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("        let domSubNode = domSubNodes[i];");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("      if (newTextArray[i] == '')");
    builder.addLine("      let tempInt = parseInt(newTextArray[i]);");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("      if (newIntArray.includes(i) == false)");
    builder.addLine("        newIntArray.push(i);");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("      let ix = tempIntArray.indexOf(newIntArray[i]);");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("        let findEntry = findsArray[i];");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("      let currentElement = nodeElements[i];");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("      let nodeAttributeKey = nodeAttributeKeys[i];");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("            let nodeActualValueSplitValue = nodeActualValueSplitArray[i];");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("      let curNode = nodeList[i];");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("          newNode = newNodeList[i];");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("        let curChild = curChildren[i];");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("      let localNode = localNodeList[i];");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("    for (let i in inputSplit) {");
    builder.addLine("      let styleValue = inputSplit[i];");
    builder.addLine("        inputSplit[i] = styleValue;");
    builder.addLine("        inputSplit[i] = styleValue;");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
        for (int i = 0; i < valueCount; i++) {
        for (int i = 0; i < valueCount; i++) {
        for (int i = 0; i < valueCount; i++) {
          String  curValue = mod.getValues().get(i);
          newLine = "  function HDLmExecute" + newName + i + "() {";
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("       outputStr += attrs[i].name + '=' + \"'\" + attrs[i].value + \"'\";");
    builder.addLine("       outputStr += attrs[i].name + '=' + \"'\" + attrs[i].value + \"'\";");
    for (int i=0; i < indexJsonArraySize; i++) {
    for (int i=0; i < indexJsonArraySize; i++) {
    for (int i=0; i < indexJsonArraySize; i++) {
    	JsonElement   indexJsonElement = indexJsonArray.get(i);
    for (int i = 0; i < sessionParametersArrayLength; i++) {
    for (int i = 0; i < sessionParametersArrayLength; i++) {
    for (int i = 0; i < sessionParametersArrayLength; i++) {
      arrayEntry = sessionParametersArray.get(i);
		  int             i;
		  for (i = 0; i < actualJSLen; i++) {
		  for (i = 0; i < actualJSLen; i++) {
		  for (i = 0; i < actualJSLen; i++) {
		  	char  curChar = actualJS.charAt(i);
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let nodeSend = nodeList[i];");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("            if (newTexts[i].startsWith(forceSelectStringValue)) {");
    builder.addLine("              newText = newTexts[i].substring(forceSelectStringValue.length);");
    builder.addLine("              finalLookupIndex = i;");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("                let curStyle = curModSplit[i];");
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("                  let newValue = newTextSplit[i];");
    builder.addLine("                  curNode.style.setProperty(curModSplit[i], newValue);");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("      if (i > 0)");
    builder.addLine("      let curValue = curArray[i];");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("        let domSubNode = domSubNodes[i];");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("      if (newTextArray[i] == '')");
    builder.addLine("      let tempInt = parseInt(newTextArray[i]);");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("      if (newIntArray.includes(i) == false)");
    builder.addLine("        newIntArray.push(i);");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("      let ix = tempIntArray.indexOf(newIntArray[i]);");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("        let findEntry = findsArray[i];");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("      let currentElement = nodeElements[i];");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("      let nodeAttributeKey = nodeAttributeKeys[i];");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("            let nodeActualValueSplitValue = nodeActualValueSplitArray[i];");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("      let curNode = nodeList[i];");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("          newNode = newNodeList[i];");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("        let curChild = curChildren[i];");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("      let localNode = localNodeList[i];");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("    for (let i in inputSplit) {");
    builder.addLine("      let styleValue = inputSplit[i];");
    builder.addLine("        inputSplit[i] = styleValue;");
    builder.addLine("        inputSplit[i] = styleValue;");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
        for (int i = 0; i < valueCount; i++) {
        for (int i = 0; i < valueCount; i++) {
        for (int i = 0; i < valueCount; i++) {
          String  curValue = mod.getValues().get(i);
          newLine = "  function HDLmExecute" + newName + i + "() {";
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("       outputStr += attrs[i].name + '=' + \"'\" + attrs[i].value + \"'\";");
    builder.addLine("       outputStr += attrs[i].name + '=' + \"'\" + attrs[i].value + \"'\";");
    for (int i=0; i < indexJsonArraySize; i++) {
    for (int i=0; i < indexJsonArraySize; i++) {
    for (int i=0; i < indexJsonArraySize; i++) {
    	JsonElement   indexJsonElement = indexJsonArray.get(i);
    for (int i = 0; i < sessionParametersArrayLength; i++) {
    for (int i = 0; i < sessionParametersArrayLength; i++) {
    for (int i = 0; i < sessionParametersArrayLength; i++) {
      arrayEntry = sessionParametersArray.get(i);
		  int             i;
		  for (i = 0; i < actualJSLen; i++) {
		  for (i = 0; i < actualJSLen; i++) {
		  for (i = 0; i < actualJSLen; i++) {
		  	char  curChar = actualJS.charAt(i);
Possible variable id
    builder.addLine("      case 'id': {");
    builder.addLine("          postTrace.nodegetby = 'id';");
    builder.addLine("            findEntry.attributeName       === 'id' &&");
    builder.addLine("      case 'id': {");
    builder.addLine("          postTrace.nodegetby = 'id';");
    builder.addLine("            findEntry.attributeName       === 'id' &&");
Possible variable identifier
    builder.addLine("        postTrace.findtype = 'Node identifier';");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("        postTrace.findtype = 'Node identifier';");
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
Possible variable if
    if (protocol == null) {
		if (hostName == null) {
		if (divisionName == null) {
		if (siteName == null) {
		if (mods == null) {
    if (sessionObj == null) {
    if (logRuleMatching == null) {
    if (serverName == null) {
    if (1 == 2) {
    if (useCreateFixedJS) {
    	if (fileExists) {
    if (mods.size() == 0 &&
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
    builder.addLine("      if (curMod.prob < 100.0) {");
    builder.addLine("        if (ignoreProbability == null)");
    builder.addLine("        if (localRandomValue * 100.0 > curMod.prob &&");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("      if (curMod.enabled != true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("      if (curMod.pathre === true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("      if (matchRes == false) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (logRuleMatching == true) {");
    builder.addLine("      if (typeof(tempLookupIndex) != 'undefined' &&");
    builder.addLine("        if (parameterNumber != null &&");
    builder.addLine("      if (nodeListLength == 0 && curType != 'visit') {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("            if (HDLmIncrementUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("            if (attributeRequest.toUpperCase() == 'USEPROXYHOST') {");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("            if (HDLmSavedExtracts.hasOwnProperty(curMod.name))");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("          if (proxySecureDomain == null) {");
    builder.addLine("            if (curModExtra.toUpperCase() !== 'FIXIFRAMESRC')");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if (HDLmGetUpdateCount(nodeSend, matchModifiedName, readyState) == 0) {");
    builder.addLine("          if (sendUpdates) {");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("                if (curMod.valuesCount <= 0) {");
    builder.addLine("                  if (HDLmSavedNotifies.hasOwnProperty(searchText))");
    builder.addLine("                if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("          if (lookupValue != null) {");
    builder.addLine("            if (finalLookupIndex >= 0)");
    builder.addLine("            if (newTexts[i].startsWith(forceSelectStringValue)) {");
    builder.addLine("          if (lookupValue == null &&");
    builder.addLine("            if (postRuleTracing == true) {");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("              if (curNode.style.hasOwnProperty(newName))");
    builder.addLine("              else if (curNode.hasAttribute(newName))");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("              if (curNode.hasAttribute(curType))");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (curNode.hasAttribute('src')) {");
    builder.addLine("                if (oldText.startsWith('http'))");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("                if (curNode.hasAttribute('style')) {");
    builder.addLine("                  if (curNode.style.hasOwnProperty(curStyle))");
    builder.addLine("                if (curValue == '' &&");
    builder.addLine("                if (curValue != '') {");
    builder.addLine("                  if (oldText != '')");
    builder.addLine("            else if (curType == 'text'        ||");
    builder.addLine("            if (curType == 'textchecked') {");
    builder.addLine("              if (!textMatch) {");
    builder.addLine("            if (curType == 'changenodes') {");
    builder.addLine("              if (matchUpdateCount > 255)");
    builder.addLine("              if (forceBreak == true)");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (matchUpdateCount > 2)");
    builder.addLine("                if (oldText == newText ||");
    builder.addLine("            else if (curType == 'remove' ||");
    builder.addLine("              if (parentNode != null) {");
    builder.addLine("                if (HDLmGetUpdateCount(parentNode, matchModifiedName, readyState) > 0)");
    builder.addLine("            else if (curType == 'textchecked') {");
    builder.addLine("              if (matchUpdateCount > 1)");
    builder.addLine("              if (matchUpdateCount > 0)");
    builder.addLine("            if (curType == 'remove' ||");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              if (readyState == 'complete')");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("              if (newText.trim() != '')");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("              if (curType == 'fontsize')");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (newText.startsWith('//'))");
    builder.addLine("              if (newText.startsWith('data:'))");
    builder.addLine("              if (1 == 1) {");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("              if (HDLmCompareCaseInsensitive(newText, 'yes'))");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("              if (newText != '') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              if (readyState == 'complete') {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("              if (curModExtra == 'background-image') {");
    builder.addLine("                if (newData.startsWith('url')) {");
    builder.addLine("                else if (newData.startsWith('data:')) {");
    builder.addLine("                else if (newData.startsWith('http')) {");
    builder.addLine("                  if (newData.startsWith('//'))");
    builder.addLine("                if (1 == 1) {");
    builder.addLine("                if (1 == 2) {");
    builder.addLine("                  if (newValue == 'none')");
    builder.addLine("            else if (curType == 'title' ||");
    builder.addLine("      if (matchFound === false) {");
    builder.addLine("        if (matchError === '') {");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("    if (matchError != '' &&");
    builder.addLine("    if (arrayType == 'undefined') {");
    builder.addLine("    if (curArray == null) {");
    builder.addLine("    if (arrayLength <= 0)");
    builder.addLine("      if (i > 0)");
    builder.addLine("      if (curValue == null)");
    builder.addLine("    if (Array.isArray(curMod.find) &&");
    builder.addLine("    if (domObj.type != 'Element')");
    builder.addLine("    if (domObj.tag == null)");
    builder.addLine("    if (attrObj != null) {");
    builder.addLine("    if (domText != null) {");
    builder.addLine("    if (domSubNodes != null) {");
    builder.addLine("        if (domSubNodeNode != null)");
    builder.addLine("      if (newTextArray[i] == '')");
    builder.addLine("      if (typeof(tempInt) != 'number')");
    builder.addLine("      if (newIntArray.includes(i) == false)");
    builder.addLine("    if ((typeof(newValue) == 'number') &&");
    builder.addLine("      if (!changesObj.hasOwnProperty(keyValue))");
    builder.addLine("          if (matchUpdateCount > 0) {");
    builder.addLine("          if (testFlag == false)");
    builder.addLine("          if (matchUpdateCount > 1) {");
    builder.addLine("          if (changesMatch && testFlag == false)");
    builder.addLine("          if (countHigh == true)");
    builder.addLine("          if (matchUpdateCount > 0) {");
    builder.addLine("          if (changesValue == null) {");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("            if (changesType == 'number') {");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("    if (actualTextLower.indexOf(requiredTextLower) === -1) {");
    builder.addLine("      if (postRuleTracing == true) {");
    builder.addLine("    if (curType == 'order')");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("    if (disabledStatus == 'true')");
    builder.addLine("    if (disabledStatus == 'false')");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("        if (styleSheet.disabled != disabledStatus)");
    builder.addLine("    if (elementClasses.length == 0)");
    builder.addLine("    else if (elementClasses.contains(newClass) == false)");
    builder.addLine("    if (typeof errorObj === 'string') {");
    builder.addLine("    if (curMod.cssselector !== '') {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("    else if (curMod.xpath !== '') {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("    else if (curMod.nodeiden !== null) {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("        if (nodeElement != null)");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("        if (nodeAttributes.hasOwnProperty('bestclass'))");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("    if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("      if (nodeValue != null)");
    builder.addLine("    if (nodeCounts[nodeType] == 1 && nodeElementsLength == 1)");
    builder.addLine("      if (nodeCounter > 1)");
    builder.addLine("      if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("      if (currentMatchValue < 0.95)");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (nodeIden.hasOwnProperty('parent') == false)");
    builder.addLine("        if (nodeCounter > 1)");
    builder.addLine("        if (typeof nodeParentAttributes == 'undefined' ||");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (parentMatchValue < 0.95)");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (nodeIden.hasOwnProperty('grandparent') == false)");
    builder.addLine("        if (typeof grandParentElement == 'undefined' ||");
    builder.addLine("        if (nodeCounter > 1)");
    builder.addLine("        if (typeof nodeGrandParentAttributes == 'undefined' ||");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (grandParentMatchValue < 0.95)");
    builder.addLine("    if (postRuleTracing) {");
    builder.addLine("      if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag))");
    builder.addLine("    if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag) == false) {");
    builder.addLine("      if (nodeAttributeKey == 'bestclass')");
    builder.addLine("      if (nodeAttributeKey == 'tag') {");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeActualValue, nodeAttributeValue))");
    builder.addLine("      else if (nodeAttributeKey == 'class') {");
    builder.addLine("        if (Array.isArray(nodeAttributeValue) &&");
    builder.addLine("        if (nodeActualValueString != null) {");
    builder.addLine("            if (nodeActualValueSplitValue.endsWith('\\n')) {");
    builder.addLine("            if (nodeActualValueSplitValue.length > 0)");
    builder.addLine("          if (nodeActualValueSplit.length > 0) {");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (nodeActualValue.includes(nodeAttributeValue))");
    builder.addLine("      else if (nodeAttributeKey == 'innertext') {");
    builder.addLine("        if ((typeof nodeInnerText) == 'undefined')");
    builder.addLine("        if (nodeInnerText != null) {");
    builder.addLine("          if (nodeIndexOf >= 0)");
    builder.addLine("          if (nodeIndexOf >= 0)");
    builder.addLine("          if (nodeInnerText.length > 20)");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("      else if (nodeAttributeKey == 'phash') {");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("      else if (nodeAttributeKey == 'src') {");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("          if (nodeAttributesPHashSimilarity < 0.10) {");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("      else if (nodeAttributeKey == 'style') {");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("          if (nodeAttributesPHashSimilarity < 0.10) {");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("        if (nodeAttributeKey == 'href' &&");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("    if (postRuleTracing)");
    builder.addLine("        if (typeof curNode.getElementById === 'function' &&");
    builder.addLine("        if (newNode !== null) {");
    builder.addLine("          if (findEntry.tag !== '') {");
    builder.addLine("            if (findEntry.tag.toUpperCase() === newNode.tagName.toUpperCase())");
    builder.addLine("      if (typeof curNode.getElementByClassName === 'function' &&");
    builder.addLine("          if (findEntry.tag !== '') {");
    builder.addLine("            if (findEntry.tag.toUpperCase() === newNode.tagName.toUpperCase())");
    builder.addLine("      if (typeof curNode.getElementsByTagName === 'function' &&");
    builder.addLine("        if (findEntry.attributeName  !== '' &&");
    builder.addLine("            if (!newNode.hasAttribute(findEntry.attributeName))");
    builder.addLine("            if (newNode.getAttribute(findEntry.attributeName) !== findEntry.attributeValue)");
    builder.addLine("        if (typeof curChild.hasAttribute !== 'function')");
    builder.addLine("        if (typeof curChild.getAttribute !== 'function')");
    builder.addLine("        if (!curChild.hasAttribute(findEntry.attributeName))");
    builder.addLine("        if (curChild.getAttribute(findEntry.attributeName) !== findEntry.attributeValue)");
    builder.addLine("    if (HDLmPHashObject.hasOwnProperty(urlStrMod))");
    builder.addLine("      if (computedStyle == null)");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("      if (backLast > 0)");
    builder.addLine("      if (typeValue == 'number'  ||");
    builder.addLine("      if (typeValue == 'string') {");
    builder.addLine("        if (lengthValue >= 2) {");
    builder.addLine("          if (objValueFirst == '{' && objValueLast == '}') {");
    builder.addLine("        if (quotes)");
    builder.addLine("        if (quotes)");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("      if (firstVal.length > 8) {");
    builder.addLine("    if (isNaN(window[updateName]))");
    builder.addLine("      if (window[updateName] > 0)");
    builder.addLine("    if (countHigh || testFlag)");
    builder.addLine("    if ((typeof visitText) != 'undefined' &&");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("    if (searchAttrs.hasOwnProperty('innertext')) {");
    builder.addLine("      if (searchIndex >= 0) {");
    builder.addLine("    if (searchValue.length > 0 && searchValue.charAt(0) == '/') {");
    builder.addLine("    else if (searchValue.length > 0 && searchValue.charAt(0) == '{') {");
    builder.addLine("    if (urlStrIndexOfColon < 0 ||");
    builder.addLine("    if (urlIndex < 0)");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("    if (!savedUpdates.hasOwnProperty('updates'))");
    builder.addLine("    if (inputStyles.indexOf(';') >= 0)");
    builder.addLine("      if (splitOn == ';')");
    builder.addLine("      if (styleValue == 'unchanged' ||");
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("    if (jsonStr == null)");
      if (counter < modsCount)
    if (logRuleMatching == HDLmLogMatchingTypes.LOGMATCHINGYES)
    builder.addLine("              if (HDLmSavedExtracts.hasOwnProperty(curMod.name) &&");
    builder.addLine("              if (HDLmSavedNotifies.hasOwnProperty(searchText) &&");
    if (secureHostName != null) 
    builder.addLine("      if (!changesObj.hasOwnProperty(keyValue))");
    builder.addLine("      if (changesValue == null)");
    builder.addLine("        if (keyValue == 'class') {");
    	if (mod.getType() != HDLmModTypes.SCRIPT)
    builder.addLine("    if (!curNode.hasAttributes())");
    builder.addLine("      if (outputStr != '')");
		if (!indexJsonArray.isJsonArray()) {
		if (logIsDebugEnabled) {
    if (sessionIndexStr != null &&
    	if (hostName.equals(jsonHostName)) {
    		if (!rulesJsonArray.isJsonArray()) {
    		if (!choicesJsonArray.isJsonArray()) {
        if (sessionIndexStr != null &&
      		if (!choiceJsonArray.isJsonArray()) {
      		if (!ruleJsonElement.isJsonPrimitive()) {
          if (sessionIndexStr == null ||
        		if (!choiceJsonElement.isJsonPrimitive()) {
          if (counter < rulesJsonArraySize)  
      if (arrayEntry == null)
      if (counter < sessionParametersArrayLength)
    builder.addLine("      if (key.startsWith('onmouse'))");
    builder.addLine("      if (key.startsWith('onpointer'))");
    builder.addLine("      if (/^on/.test(key)) {");
        if (counter < mapSize)
    if (sessionIndexStr == null ||
    builder.addLine("    if (document.location.hostname == 'www.themarvelouslandofoz.com' &&");
    builder.addLine("    if (document.readyState == 'complete' ||");
    if (secureHostName != null) 
		if (useCreateFixedJS) {
		  	if (curChar == '\u1000')  
		  	else if (curChar == '\u1001')  
        else if (curChar == '\u1002')  
        else if (curChar == '\u1003')  
        else if (curChar == '\u1004')  
        else if (curChar == '\u1005')  
        else if (curChar == '\u1006')  
        else if (curChar == '\u1007')  
        else if (curChar == '\u1008')  
        else if (curChar == '\u1009')  
        else if (curChar == '\u100a')  
        else if (curChar == '\u100b')  
        else if (curChar == '\u100c')  
        else if (curChar == '\u100d')  
        else if (curChar == '\u100e')  
        else if (curChar == '\u100f')  
        else if (curChar == '\u1010')  
        else if (curChar == '\u1011')  
        else if (curChar == '\u1012')  
        else if (curChar == '\u1013')  
        else if (curChar == '\u1014')  
        else if (curChar == '\u1015')  
        else if (curChar == '\u1016')  
        else if (curChar == '\u1017')  
        else if (curChar == '\u1018')  
        else if (curChar == '\u1019')  
        else if (curChar == '\u101a')  
        else if (curChar == '\u101b')  
        else if (curChar == '\u101c')  
        else if (curChar == '\u101d')  
        else if (curChar == '\u101e')  
        else if (curChar == '\u101f')  
        else if (curChar == '\u1020')  
        else if (curChar == '\u1021')  
        else if (curChar == '\u1022')  
        else if (curChar == '\u1023')  
        else if (curChar == '\u1024')  
        else if (curChar == '\u1025')  
        else if (curChar == '\u1026')  
        else if (curChar == '\u1027')  
        else if (curChar == '\u1028')  
        else if (curChar == '\u1029')  
        else if (curChar == '\u102a')  
        else if (curChar == '\u102b')  
        else if (curChar == '\u102c')  
        else if (curChar == '\u102d')  
        else if (curChar == '\u102e')  
        else if (curChar == '\u102f')  
        else if (curChar == '\u1030')  
        else if (curChar == '\u1031')  
        else if (curChar == '\u1032')  
        else if (curChar == '\u1033')  
        else if (curChar == '\u1034')  
        else if (curChar == '\u1035')  
        else if (curChar == '\u1036')  
        else if (curChar == '\u1037')  
        else if (curChar == '\u1038')  
        else if (curChar == '\u1039')  
    if (protocol == null) {
		if (hostName == null) {
		if (divisionName == null) {
		if (siteName == null) {
		if (mods == null) {
    if (sessionObj == null) {
    if (logRuleMatching == null) {
    if (serverName == null) {
    if (1 == 2) {
    if (useCreateFixedJS) {
    	if (fileExists) {
    if (mods.size() == 0 &&
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
    builder.addLine("      if (curMod.prob < 100.0) {");
    builder.addLine("        if (ignoreProbability == null)");
    builder.addLine("        if (localRandomValue * 100.0 > curMod.prob &&");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("      if (curMod.enabled != true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("      if (curMod.pathre === true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("      if (matchRes == false) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (logRuleMatching == true) {");
    builder.addLine("      if (typeof(tempLookupIndex) != 'undefined' &&");
    builder.addLine("        if (parameterNumber != null &&");
    builder.addLine("      if (nodeListLength == 0 && curType != 'visit') {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("            if (HDLmIncrementUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("            if (attributeRequest.toUpperCase() == 'USEPROXYHOST') {");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("            if (HDLmSavedExtracts.hasOwnProperty(curMod.name))");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("          if (proxySecureDomain == null) {");
    builder.addLine("            if (curModExtra.toUpperCase() !== 'FIXIFRAMESRC')");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if (HDLmGetUpdateCount(nodeSend, matchModifiedName, readyState) == 0) {");
    builder.addLine("          if (sendUpdates) {");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if (HDLmGetUpdateCount(curNode, matchModifiedName, readyState) > 0)");
    builder.addLine("                if (curMod.valuesCount <= 0) {");
    builder.addLine("                  if (HDLmSavedNotifies.hasOwnProperty(searchText))");
    builder.addLine("                if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("          if (lookupValue != null) {");
    builder.addLine("            if (finalLookupIndex >= 0)");
    builder.addLine("            if (newTexts[i].startsWith(forceSelectStringValue)) {");
    builder.addLine("          if (lookupValue == null &&");
    builder.addLine("            if (postRuleTracing == true) {");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("              if (curNode.style.hasOwnProperty(newName))");
    builder.addLine("              else if (curNode.hasAttribute(newName))");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("              if (curNode.hasAttribute(curType))");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (curNode.hasAttribute('src')) {");
    builder.addLine("                if (oldText.startsWith('http'))");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("                if (curNode.hasAttribute('style')) {");
    builder.addLine("                  if (curNode.style.hasOwnProperty(curStyle))");
    builder.addLine("                if (curValue == '' &&");
    builder.addLine("                if (curValue != '') {");
    builder.addLine("                  if (oldText != '')");
    builder.addLine("            else if (curType == 'text'        ||");
    builder.addLine("            if (curType == 'textchecked') {");
    builder.addLine("              if (!textMatch) {");
    builder.addLine("            if (curType == 'changenodes') {");
    builder.addLine("              if (matchUpdateCount > 255)");
    builder.addLine("              if (forceBreak == true)");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (matchUpdateCount > 2)");
    builder.addLine("                if (oldText == newText ||");
    builder.addLine("            else if (curType == 'remove' ||");
    builder.addLine("              if (parentNode != null) {");
    builder.addLine("                if (HDLmGetUpdateCount(parentNode, matchModifiedName, readyState) > 0)");
    builder.addLine("            else if (curType == 'textchecked') {");
    builder.addLine("              if (matchUpdateCount > 1)");
    builder.addLine("              if (matchUpdateCount > 0)");
    builder.addLine("            if (curType == 'remove' ||");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              if (readyState == 'complete')");
    builder.addLine("            if (curType == 'changeattrs') {");
    builder.addLine("              if (newText.trim() != '')");
    builder.addLine("            else if (curType == 'changenodes') {");
    builder.addLine("            else if (curType == 'fontcolor'   ||");
    builder.addLine("              if (curType == 'fontsize')");
    builder.addLine("            else if (curType == 'height' ||");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (newText.startsWith('//'))");
    builder.addLine("              if (newText.startsWith('data:'))");
    builder.addLine("              if (1 == 1) {");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("              if (HDLmCompareCaseInsensitive(newText, 'yes'))");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("              if (newText != '') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("              if (readyState == 'complete') {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("              if (curModExtra == 'background-image') {");
    builder.addLine("                if (newData.startsWith('url')) {");
    builder.addLine("                else if (newData.startsWith('data:')) {");
    builder.addLine("                else if (newData.startsWith('http')) {");
    builder.addLine("                  if (newData.startsWith('//'))");
    builder.addLine("                if (1 == 1) {");
    builder.addLine("                if (1 == 2) {");
    builder.addLine("                  if (newValue == 'none')");
    builder.addLine("            else if (curType == 'title' ||");
    builder.addLine("      if (matchFound === false) {");
    builder.addLine("        if (matchError === '') {");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("    if (matchError != '' &&");
    builder.addLine("    if (arrayType == 'undefined') {");
    builder.addLine("    if (curArray == null) {");
    builder.addLine("    if (arrayLength <= 0)");
    builder.addLine("      if (i > 0)");
    builder.addLine("      if (curValue == null)");
    builder.addLine("    if (Array.isArray(curMod.find) &&");
    builder.addLine("    if (domObj.type != 'Element')");
    builder.addLine("    if (domObj.tag == null)");
    builder.addLine("    if (attrObj != null) {");
    builder.addLine("    if (domText != null) {");
    builder.addLine("    if (domSubNodes != null) {");
    builder.addLine("        if (domSubNodeNode != null)");
    builder.addLine("      if (newTextArray[i] == '')");
    builder.addLine("      if (typeof(tempInt) != 'number')");
    builder.addLine("      if (newIntArray.includes(i) == false)");
    builder.addLine("    if ((typeof(newValue) == 'number') &&");
    builder.addLine("      if (!changesObj.hasOwnProperty(keyValue))");
    builder.addLine("          if (matchUpdateCount > 0) {");
    builder.addLine("          if (testFlag == false)");
    builder.addLine("          if (matchUpdateCount > 1) {");
    builder.addLine("          if (changesMatch && testFlag == false)");
    builder.addLine("          if (countHigh == true)");
    builder.addLine("          if (matchUpdateCount > 0) {");
    builder.addLine("          if (changesValue == null) {");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("            if (changesType == 'number') {");
    builder.addLine("            if (testFlag == false)");
    builder.addLine("    if (actualTextLower.indexOf(requiredTextLower) === -1) {");
    builder.addLine("      if (postRuleTracing == true) {");
    builder.addLine("    if (curType == 'order')");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("    if (disabledStatus == 'true')");
    builder.addLine("    if (disabledStatus == 'false')");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("        if (styleSheet.disabled != disabledStatus)");
    builder.addLine("    if (elementClasses.length == 0)");
    builder.addLine("    else if (elementClasses.contains(newClass) == false)");
    builder.addLine("    if (typeof errorObj === 'string') {");
    builder.addLine("    if (curMod.cssselector !== '') {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("    else if (curMod.xpath !== '') {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("    else if (curMod.nodeiden !== null) {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("      if (postRuleTracing) {");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("        if (nodeElement != null)");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("        if (nodeAttributes.hasOwnProperty('bestclass'))");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("    if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("      if (nodeValue != null)");
    builder.addLine("    if (nodeCounts[nodeType] == 1 && nodeElementsLength == 1)");
    builder.addLine("      if (nodeCounter > 1)");
    builder.addLine("      if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("      if (currentMatchValue < 0.95)");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (nodeIden.hasOwnProperty('parent') == false)");
    builder.addLine("        if (nodeCounter > 1)");
    builder.addLine("        if (typeof nodeParentAttributes == 'undefined' ||");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (parentMatchValue < 0.95)");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (nodeIden.hasOwnProperty('grandparent') == false)");
    builder.addLine("        if (typeof grandParentElement == 'undefined' ||");
    builder.addLine("        if (nodeCounter > 1)");
    builder.addLine("        if (typeof nodeGrandParentAttributes == 'undefined' ||");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (grandParentMatchValue < 0.95)");
    builder.addLine("    if (postRuleTracing) {");
    builder.addLine("      if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag))");
    builder.addLine("    if (HDLmCompareCaseInsensitive(nodeElement.tagName, nodeAttributes.tag) == false) {");
    builder.addLine("      if (nodeAttributeKey == 'bestclass')");
    builder.addLine("      if (nodeAttributeKey == 'tag') {");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeActualValue, nodeAttributeValue))");
    builder.addLine("      else if (nodeAttributeKey == 'class') {");
    builder.addLine("        if (Array.isArray(nodeAttributeValue) &&");
    builder.addLine("        if (nodeActualValueString != null) {");
    builder.addLine("            if (nodeActualValueSplitValue.endsWith('\\n')) {");
    builder.addLine("            if (nodeActualValueSplitValue.length > 0)");
    builder.addLine("          if (nodeActualValueSplit.length > 0) {");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (nodeActualValue.includes(nodeAttributeValue))");
    builder.addLine("      else if (nodeAttributeKey == 'innertext') {");
    builder.addLine("        if ((typeof nodeInnerText) == 'undefined')");
    builder.addLine("        if (nodeInnerText != null) {");
    builder.addLine("          if (nodeIndexOf >= 0)");
    builder.addLine("          if (nodeIndexOf >= 0)");
    builder.addLine("          if (nodeInnerText.length > 20)");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("      else if (nodeAttributeKey == 'phash') {");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (HDLmCompareCaseInsensitive(nodeAttributeValue, nodeActualValue))");
    builder.addLine("      else if (nodeAttributeKey == 'src') {");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("          if (nodeAttributesPHashSimilarity < 0.10) {");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("      else if (nodeAttributeKey == 'style') {");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("          if (nodeActualIndex < 0)");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("          if (nodeAttributesPHashSimilarity < 0.10) {");
    builder.addLine("        if (nodePHashCheck == false) {");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("            if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (postRuleTracing) {");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("        if (nodeAttributeKey == 'href' &&");
    builder.addLine("        if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeIdenTracing == HDLmNodeIdenTracing.all ||");
    builder.addLine("        if (postRuleTracing) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (nodeAttributeValue == nodeActualValue)");
    builder.addLine("    if (postRuleTracing)");
    builder.addLine("        if (typeof curNode.getElementById === 'function' &&");
    builder.addLine("        if (newNode !== null) {");
    builder.addLine("          if (findEntry.tag !== '') {");
    builder.addLine("            if (findEntry.tag.toUpperCase() === newNode.tagName.toUpperCase())");
    builder.addLine("      if (typeof curNode.getElementByClassName === 'function' &&");
    builder.addLine("          if (findEntry.tag !== '') {");
    builder.addLine("            if (findEntry.tag.toUpperCase() === newNode.tagName.toUpperCase())");
    builder.addLine("      if (typeof curNode.getElementsByTagName === 'function' &&");
    builder.addLine("        if (findEntry.attributeName  !== '' &&");
    builder.addLine("            if (!newNode.hasAttribute(findEntry.attributeName))");
    builder.addLine("            if (newNode.getAttribute(findEntry.attributeName) !== findEntry.attributeValue)");
    builder.addLine("        if (typeof curChild.hasAttribute !== 'function')");
    builder.addLine("        if (typeof curChild.getAttribute !== 'function')");
    builder.addLine("        if (!curChild.hasAttribute(findEntry.attributeName))");
    builder.addLine("        if (curChild.getAttribute(findEntry.attributeName) !== findEntry.attributeValue)");
    builder.addLine("    if (HDLmPHashObject.hasOwnProperty(urlStrMod))");
    builder.addLine("      if (computedStyle == null)");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("      if (backLast > 0)");
    builder.addLine("      if (typeValue == 'number'  ||");
    builder.addLine("      if (typeValue == 'string') {");
    builder.addLine("        if (lengthValue >= 2) {");
    builder.addLine("          if (objValueFirst == '{' && objValueLast == '}') {");
    builder.addLine("        if (quotes)");
    builder.addLine("        if (quotes)");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("      if (firstVal.length > 8) {");
    builder.addLine("    if (isNaN(window[updateName]))");
    builder.addLine("      if (window[updateName] > 0)");
    builder.addLine("    if (countHigh || testFlag)");
    builder.addLine("    if ((typeof visitText) != 'undefined' &&");
    builder.addLine("    if (curNode.hasAttribute(attributeName) == false) {");
    builder.addLine("    if (searchAttrs.hasOwnProperty('innertext')) {");
    builder.addLine("      if (searchIndex >= 0) {");
    builder.addLine("    if (searchValue.length > 0 && searchValue.charAt(0) == '/') {");
    builder.addLine("    else if (searchValue.length > 0 && searchValue.charAt(0) == '{') {");
    builder.addLine("    if (urlStrIndexOfColon < 0 ||");
    builder.addLine("    if (urlIndex < 0)");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("    if (!savedUpdates.hasOwnProperty('updates'))");
    builder.addLine("    if (inputStyles.indexOf(';') >= 0)");
    builder.addLine("      if (splitOn == ';')");
    builder.addLine("      if (styleValue == 'unchanged' ||");
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("    if (jsonStr == null)");
      if (counter < modsCount)
    if (logRuleMatching == HDLmLogMatchingTypes.LOGMATCHINGYES)
    builder.addLine("              if (HDLmSavedExtracts.hasOwnProperty(curMod.name) &&");
    builder.addLine("              if (HDLmSavedNotifies.hasOwnProperty(searchText) &&");
    if (secureHostName != null) 
    builder.addLine("      if (!changesObj.hasOwnProperty(keyValue))");
    builder.addLine("      if (changesValue == null)");
    builder.addLine("        if (keyValue == 'class') {");
    	if (mod.getType() != HDLmModTypes.SCRIPT)
    builder.addLine("    if (!curNode.hasAttributes())");
    builder.addLine("      if (outputStr != '')");
		if (!indexJsonArray.isJsonArray()) {
		if (logIsDebugEnabled) {
    if (sessionIndexStr != null &&
    	if (hostName.equals(jsonHostName)) {
    		if (!rulesJsonArray.isJsonArray()) {
    		if (!choicesJsonArray.isJsonArray()) {
        if (sessionIndexStr != null &&
      		if (!choiceJsonArray.isJsonArray()) {
      		if (!ruleJsonElement.isJsonPrimitive()) {
          if (sessionIndexStr == null ||
        		if (!choiceJsonElement.isJsonPrimitive()) {
          if (counter < rulesJsonArraySize)  
      if (arrayEntry == null)
      if (counter < sessionParametersArrayLength)
    builder.addLine("      if (key.startsWith('onmouse'))");
    builder.addLine("      if (key.startsWith('onpointer'))");
    builder.addLine("      if (/^on/.test(key)) {");
        if (counter < mapSize)
    if (sessionIndexStr == null ||
    builder.addLine("    if (document.location.hostname == 'www.themarvelouslandofoz.com' &&");
    builder.addLine("    if (document.readyState == 'complete' ||");
    if (secureHostName != null) 
		if (useCreateFixedJS) {
		  	if (curChar == '\u1000')  
		  	else if (curChar == '\u1001')  
        else if (curChar == '\u1002')  
        else if (curChar == '\u1003')  
        else if (curChar == '\u1004')  
        else if (curChar == '\u1005')  
        else if (curChar == '\u1006')  
        else if (curChar == '\u1007')  
        else if (curChar == '\u1008')  
        else if (curChar == '\u1009')  
        else if (curChar == '\u100a')  
        else if (curChar == '\u100b')  
        else if (curChar == '\u100c')  
        else if (curChar == '\u100d')  
        else if (curChar == '\u100e')  
        else if (curChar == '\u100f')  
        else if (curChar == '\u1010')  
        else if (curChar == '\u1011')  
        else if (curChar == '\u1012')  
        else if (curChar == '\u1013')  
        else if (curChar == '\u1014')  
        else if (curChar == '\u1015')  
        else if (curChar == '\u1016')  
        else if (curChar == '\u1017')  
        else if (curChar == '\u1018')  
        else if (curChar == '\u1019')  
        else if (curChar == '\u101a')  
        else if (curChar == '\u101b')  
        else if (curChar == '\u101c')  
        else if (curChar == '\u101d')  
        else if (curChar == '\u101e')  
        else if (curChar == '\u101f')  
        else if (curChar == '\u1020')  
        else if (curChar == '\u1021')  
        else if (curChar == '\u1022')  
        else if (curChar == '\u1023')  
        else if (curChar == '\u1024')  
        else if (curChar == '\u1025')  
        else if (curChar == '\u1026')  
        else if (curChar == '\u1027')  
        else if (curChar == '\u1028')  
        else if (curChar == '\u1029')  
        else if (curChar == '\u102a')  
        else if (curChar == '\u102b')  
        else if (curChar == '\u102c')  
        else if (curChar == '\u102d')  
        else if (curChar == '\u102e')  
        else if (curChar == '\u102f')  
        else if (curChar == '\u1030')  
        else if (curChar == '\u1031')  
        else if (curChar == '\u1032')  
        else if (curChar == '\u1033')  
        else if (curChar == '\u1034')  
        else if (curChar == '\u1035')  
        else if (curChar == '\u1036')  
        else if (curChar == '\u1037')  
        else if (curChar == '\u1038')  
        else if (curChar == '\u1039')  
Possible variable ignoreProbability
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
    builder.addLine("        if (ignoreProbability == null)");
    builder.addLine("          ignoreProbability = 'false';");
    builder.addLine("            ignoreProbability != 'true') {");
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
    builder.addLine("        if (ignoreProbability == null)");
    builder.addLine("          ignoreProbability = 'false';");
    builder.addLine("            ignoreProbability != 'true') {");
Possible variable image
    builder.addLine("        case 'image':");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (curModExtra == 'background-image') {");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('background-image');");
    builder.addLine("      let backStr = computedStyle['background-image'];");
    builder.addLine("        case 'image':");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("            else if (curType == 'image') {");
    builder.addLine("              if (curModExtra == 'background-image') {");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('background-image');");
    builder.addLine("      let backStr = computedStyle['background-image'];");
Possible variable in
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("      for (let attrObjName in attrObj) {");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("    for (let i in inputSplit) {");
    builder.addLine("    for (const keyValue in changesObj) {");
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("      for (let attrObjName in attrObj) {");
    builder.addLine("    for (const keyValue in changesObj) {");
    builder.addLine("    for (let i in inputSplit) {");
    builder.addLine("    for (const keyValue in changesObj) {");
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
Possible variable indexJsonArray
    JsonArray   indexJsonArray = getIndexJsonArray(); 
		if (!indexJsonArray.isJsonArray()) {
    int   indexJsonArraySize = indexJsonArray.size();
    	JsonElement   indexJsonElement = indexJsonArray.get(i);
    JsonArray   indexJsonArray = getIndexJsonArray(); 
		if (!indexJsonArray.isJsonArray()) {
    int   indexJsonArraySize = indexJsonArray.size();
    	JsonElement   indexJsonElement = indexJsonArray.get(i);
Possible variable indexJsonArraySize
    int   indexJsonArraySize = indexJsonArray.size();
    for (int i=0; i < indexJsonArraySize; i++) {
    int   indexJsonArraySize = indexJsonArray.size();
    for (int i=0; i < indexJsonArraySize; i++) {
Possible variable indexJsonElement
    	JsonElement   indexJsonElement = indexJsonArray.get(i);
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
    	JsonElement   indexJsonElement = indexJsonArray.get(i);
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
    		JsonArray   choicesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "choices");
Possible variable indexUsed
    builder.addLine("  function HDLmSaveChange(savedUpdates, indexUsed,");
    builder.addLine("    updateObj.indexUsed = indexUsed;");
    builder.addLine("  function HDLmSaveChange(savedUpdates, indexUsed,");
    builder.addLine("    updateObj.indexUsed = indexUsed;");
Possible variable indexValue
         	double      indexValue = sessionIndexValue * choicesJsonArraySize;
        	int         indexValueInt = (int) Math.floor(indexValue);
         	double      indexValue = sessionIndexValue * choicesJsonArraySize;
        	int         indexValueInt = (int) Math.floor(indexValue);
Possible variable indexValueInt
        	int         indexValueInt = (int) Math.floor(indexValue);
        	choiceJsonArray = (JsonArray) choicesJsonArray.get(indexValueInt);
        	int         indexValueInt = (int) Math.floor(indexValue);
        	choiceJsonArray = (JsonArray) choicesJsonArray.get(indexValueInt);
Possible variable innertext
    builder.addLine("      else if (nodeAttributeKey == 'innertext') {");
    builder.addLine("    if (searchAttrs.hasOwnProperty('innertext')) {");
    builder.addLine("        delete searchAttrs['innertext'];");
    builder.addLine("      else if (nodeAttributeKey == 'innertext') {");
    builder.addLine("    if (searchAttrs.hasOwnProperty('innertext')) {");
    builder.addLine("        delete searchAttrs['innertext'];");
Possible variable int
    int         counter;
    int         modsCount = mods.size(); 
        int   valueCount = mod.getValues().size();
        for (int i = 0; i < valueCount; i++) {
          for (int j = 0; j < curValues.size(); j++) {
    int   indexJsonArraySize = indexJsonArray.size();
    for (int i=0; i < indexJsonArraySize; i++) {
    		int         rulesJsonArraySize = rulesJsonArray.size();
    		int         choicesJsonArraySize = choicesJsonArray.size();
        	int         indexValueInt = (int) Math.floor(indexValue);
        	int         indexValueInt = (int) Math.floor(indexValue);
        for (int j=0; j < rulesJsonArraySize; j++) {
    int   sessionParametersArrayLength = sessionParametersArray.size();
    for (int i = 0; i < sessionParametersArrayLength; i++) {
		  int             i;
		  int             actualJSLen;
    int         counter;
    int         modsCount = mods.size(); 
        int   valueCount = mod.getValues().size();
        for (int i = 0; i < valueCount; i++) {
          for (int j = 0; j < curValues.size(); j++) {
    int   indexJsonArraySize = indexJsonArray.size();
    for (int i=0; i < indexJsonArraySize; i++) {
    		int         rulesJsonArraySize = rulesJsonArray.size();
    		int         choicesJsonArraySize = choicesJsonArray.size();
        	int         indexValueInt = (int) Math.floor(indexValue);
        	int         indexValueInt = (int) Math.floor(indexValue);
        for (int j=0; j < rulesJsonArraySize; j++) {
    int   sessionParametersArrayLength = sessionParametersArray.size();
    for (int i = 0; i < sessionParametersArrayLength; i++) {
		  int             i;
		  int             actualJSLen;
Possible variable interactive
    builder.addLine("        document.readyState == 'interactive')");
    builder.addLine("        document.readyState == 'interactive')");
Possible variable invalid
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
Possible variable is
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
    	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      	 	  String  errorText = "JSON array in getJSBuildJs is invalid";
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
Possible variable isNaN
    builder.addLine("    if (isNaN(window[updateName]))");
    builder.addLine("    if (isNaN(window[updateName]))");
Possible variable j
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                  let searchText = curMod.values[j];");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("                curNode.appendChild(curNode.children[newOrder[j]]);");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("              let curNode = nodeList[j];");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("              let searchText = curMod.values[j];");
          for (int j = 0; j < curValues.size(); j++) {
          for (int j = 0; j < curValues.size(); j++) {
          for (int j = 0; j < curValues.size(); j++) {
            String  curLine = curValues.get(j);
        for (int j=0; j < rulesJsonArraySize; j++) {
        for (int j=0; j < rulesJsonArraySize; j++) {
        for (int j=0; j < rulesJsonArraySize; j++) {
        	JsonElement   ruleJsonElement = rulesJsonArray.get(j);
            JsonElement   choiceJsonElement = choiceJsonArray.get(j); 
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                  let searchText = curMod.values[j];");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("                curNode.appendChild(curNode.children[newOrder[j]]);");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("              let curNode = nodeList[j];");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("              let searchText = curMod.values[j];");
          for (int j = 0; j < curValues.size(); j++) {
          for (int j = 0; j < curValues.size(); j++) {
          for (int j = 0; j < curValues.size(); j++) {
            String  curLine = curValues.get(j);
        for (int j=0; j < rulesJsonArraySize; j++) {
        for (int j=0; j < rulesJsonArraySize; j++) {
        for (int j=0; j < rulesJsonArraySize; j++) {
        	JsonElement   ruleJsonElement = rulesJsonArray.get(j);
            JsonElement   choiceJsonElement = choiceJsonArray.get(j); 
Possible variable java
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
Possible variable jsonHostName
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
    	if (hostName.equals(jsonHostName)) {
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
    	if (hostName.equals(jsonHostName)) {
Possible variable jsonString
      final static String  jsonString = 
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
      final static String  jsonString = 
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
Possible variable junk
    builder.addLine("                  let finalUrl = HDLmGetBackground(curNode, 'junk.jpg');");
    builder.addLine("                  let finalUrl = HDLmGetBackground(curNode, 'junk.jpg');");
Possible variable kerning
    builder.addLine("                          'fontkerning':'font-kerning',");
    builder.addLine("                          'fontkerning':'font-kerning',");
Possible variable key
    builder.addLine("      errorText += \" key (\";");
    builder.addLine("    Object.keys(window).forEach(key => {"); 
    builder.addLine("      if (key.startsWith('onmouse'))");
    builder.addLine("      if (key.startsWith('onpointer'))");
    builder.addLine("      if (/^on/.test(key)) {");
    builder.addLine("        window.addEventListener(key.slice(2), event => {");  
	    String  key = entry.getKey();
        newLine += key;
    builder.addLine("      errorText += \" key (\";");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) actual (${nodeActualValue}) expected (${nodeAttributeValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("    Object.keys(window).forEach(key => {"); 
    builder.addLine("      if (key.startsWith('onmouse'))");
    builder.addLine("      if (key.startsWith('onpointer'))");
    builder.addLine("      if (/^on/.test(key)) {");
    builder.addLine("        window.addEventListener(key.slice(2), event => {");  
	    String  key = entry.getKey();
        newLine += key;
Possible variable keydown
    builder.addLine("  document.addEventListener(\"keydown\", event => {");
    builder.addLine("  document.addEventListener(\"keydown\", event => {");
Possible variable let
    builder.addLine("  let HDLmNodeIdenTracing = {");
    builder.addLine("    let nodeIdenTracing = HDLmNodeIdenTracing.off;");
    builder.addLine("    let postRuleTracing = false;");
    builder.addLine("    let matchFound = false;");
    builder.addLine("    let matchError = '';");
    builder.addLine("    let matchModifiedName = hostNameValue + '/' + divisionNameValue + '/' + siteNameValue + '/' + curMod.name");
    builder.addLine("    let curType = curMod.type;");
    builder.addLine("      let postTrace = new Object();");
    builder.addLine("        let localRandomValue = Math.random();");
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("      let matchRes;");
    builder.addLine("      let matchRe;");
    builder.addLine("        let curModLen = curMod.path.length;");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          let errorText = HDLmBuildErrorRule(curMod, 'match', pathValueStr);");
    builder.addLine("      let parameterNumber = -1;");
    builder.addLine("      let finalLookupIndex = 0;");
    builder.addLine("      let lookupValue = -1.0;");
    builder.addLine("      let sessionIndexValueUsed = false;");
    builder.addLine("      let tempLookupIndex = HDLmGetLookupIndex(curMod.name);");
    builder.addLine("      let nodeList = HDLmFind(curMod, nodeIdenTracing, postRuleTracing, postTrace);");
    builder.addLine("      let nodeListLength = nodeList.length;");
    builder.addLine("          let   localUpdates = new Object();");
    builder.addLine("          let curModExtra = curMod.extra;");
    builder.addLine("          let curModExtraArray = curModExtra.split('/');");
    builder.addLine("          let attributeName = curModExtraArray[0];");
    builder.addLine("          let attributeRequest = curModExtraArray[1]");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("              let attributeValue = curNode.getAttribute(attributeName);");
    builder.addLine("              let oldText = attributeValue;");
    builder.addLine("              let nodeURL = new URL(attributeValue);");
    builder.addLine("              let newText = nodeURL.href;");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            let oldText;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localReason = 'extract';");
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            let nodeSrc = curNode.getAttribute('src');");
    builder.addLine("            let oldText = nodeSrc;");
    builder.addLine("            let nodeURL = new URL(nodeSrc);");
    builder.addLine("            let newText = nodeURL.href + '&HDLmSessionId=' + sessionIdJS;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localReason = 'modify';");
    builder.addLine("          let sendUpdates = false;");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let nodeSend = nodeList[i];");
    builder.addLine("          let curModExtra = curMod.extra;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localReason = 'notify';");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("                let localUpdates = new Object();");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                  let searchText = curMod.values[j];");
    builder.addLine("                  let searchValue;");
    builder.addLine("                let localReason = 'notify';");
    builder.addLine("                let curModExtra = curMod.extra;");
    builder.addLine("          let testFlag = false;");
    builder.addLine("          let newTexts = curMod.values;");
    builder.addLine("          let newCount = curMod.valuesCount;");
    builder.addLine("          let forceSelectFound = false;");
    builder.addLine("          let newText;");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            let oldText;");
    builder.addLine("              let newName = fontNames[curType];");
    builder.addLine("              let curModSplit = HDLmStyleSplitString(curModExtra);");
    builder.addLine("              let curModSplitLength = curModSplit.length;");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("                let curStyle = curModSplit[i];");
    builder.addLine("                let curValue = '';");
    builder.addLine("              let textMatch = HDLmCheckTextMatches(oldText, curModExtra,");
    builder.addLine("            let matchUpdateCount = HDLmGetUpdateCount(curNode, matchModifiedName, readyState);");
    builder.addLine("              let testFlag = true;");
    builder.addLine("              let forceBreak = HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("              let parentNode = curNode.parentNode;");
    builder.addLine("              let parentNode = curNode.parentNode;");
    builder.addLine("              let testFlag = false;");
    builder.addLine("              let newName = fontNames[curType];");
    builder.addLine("              let nodeChildrenLength = curNode.children.length;");
    builder.addLine("              let newOrder = HDLmBuildOrder(newText, nodeChildrenLength);");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("                let parentNode = curNode.parentNode;");
    builder.addLine("                let newNodeObj = JSON.parse(newText);");
    builder.addLine("                let newNode = HDLmBuildNodeFromObject(newNodeObj);");
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
    builder.addLine("                let newData = newText;");
    builder.addLine("                  let finalUrl = HDLmGetBackground(curNode, 'junk.jpg');");
    builder.addLine("                let curModSplit = HDLmStyleSplitString(curModExtra);");
    builder.addLine("                let newTextSplit = HDLmStyleFixValues(newText);");
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("                  let newValue = newTextSplit[i];");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("      let errorText = HDLmBuildErrorRule(curMod, matchError, pathValueStr);");
    builder.addLine("    let rv = \"\";");
    builder.addLine("    let arrayType = typeof(curArray);");
    builder.addLine("    let arrayLength = curArray.length;");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("      let curValue = curArray[i];");
    builder.addLine("    let errorText = \"Modification \" + matchError + \" - \";");
    builder.addLine("      let findFirst = curMod.find[0];");
    builder.addLine("    let domNode = document.createElement(domObj.tag);");
    builder.addLine("    let attrObj = domObj.attributes;");
    builder.addLine("      for (let attrObjName in attrObj) {");
    builder.addLine("    let domText = domObj.text;");
    builder.addLine("      let textNode = document.createTextNode(domText);");
    builder.addLine("    let domSubNodes = domObj.subnodes;");
    builder.addLine("      let domSubNodesLength = domSubNodes.length;");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("        let domSubNode = domSubNodes[i];");
    builder.addLine("        let domSubNodeNode = HDLmBuildNodeFromObject(domSubNode);");
    builder.addLine("    let newTextArray = newText.split(' ');");
    builder.addLine("    let newIntArray = [];");
    builder.addLine("    let outIntArray = [];");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("      let tempInt = parseInt(newTextArray[i]);");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("      let ix = tempIntArray.indexOf(newIntArray[i]);");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("    let forceBreak = false;");
    builder.addLine("      let changesValue = changesObj[keyValue];");
    builder.addLine("          let actualText = curNode.textContent;");
    builder.addLine("          let requiredText = changesValue[0];");
    builder.addLine("          let changesMatch = HDLmCheckTextMatches(actualText, requiredText,");
    builder.addLine("          let countHigh = HDLmHandleVisitRequest(changesValue, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("            let changesType = typeof changesValue;");
    builder.addLine("    let rv;");
    builder.addLine("    let requiredTextLower = requiredText.toLowerCase();");
    builder.addLine("    let actualTextLower = actualText.toLowerCase();");
    builder.addLine("        let localUpdates = new Object();");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    let newObj = {};");
    builder.addLine("    let nodeList = [];");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("      let thisNode = nodeIter.iterateNext();");
    builder.addLine("      let findsArray = curMod.find;");
    builder.addLine("      let findsArrayLength = findsArray.length");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("        let findEntry = findsArray[i];");
    builder.addLine("    let   nodeElement;");
    builder.addLine("    let   nodeElements = [];");
    builder.addLine("    let   nodeIden = curMod.nodeiden;");
    builder.addLine("    let   nodeList = [];");
    builder.addLine("    let   nodeAttributes = nodeIden.attributes;");
    builder.addLine("    let   nodeCounts = nodeIden.counts;");
    builder.addLine("    let   nodeType = nodeIden.type;");
    builder.addLine("    let   nodeValue = null;");
    builder.addLine("        let nodeTag = nodeAttributes.tag;");
    builder.addLine("        let nodeId = nodeAttributes.id;");
    builder.addLine("        let nodeClass;");
    builder.addLine("          let nodeClassList = nodeAttributes.class;");
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
    builder.addLine("        let nodeName = nodeAttributes.name;");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("    let   nodeElementsLength = nodeElements.length;");
    builder.addLine("      let   nodeText = nodeType;");
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
    builder.addLine("    let nodeIdenCheckType = 'full';");
    builder.addLine("    let nodeList = [];");
    builder.addLine("    let nodeCounter = 0;");
    builder.addLine("    let postTraceName;");
    builder.addLine("    let nodeElementsLength = nodeElements.length;");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("      let currentElement = nodeElements[i];");
    builder.addLine("      let   grandParentElement;");
    builder.addLine("      let   parentElement;");
    builder.addLine("      let   nodeCurrentAttributes = nodeIden.attributes;");
    builder.addLine("      let   currentMatchValue = HDLmFindNodeIdenMatch(currentElement,");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("        let   nodeParentAttributes = nodeIden.parent;");
    builder.addLine("        let   parentMatchValue = HDLmFindNodeIdenMatch(parentElement,");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("        let   nodeGrandParentAttributes = nodeIden.grandparent;");
    builder.addLine("        let   grandParentMatchValue = HDLmFindNodeIdenMatch(grandParentElement,");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("    let   denominator = 0.0;");
    builder.addLine("    let   nodeActualValue;");
    builder.addLine("    let   nodeAttributeValue;");
    builder.addLine("    let   nodeAttributeChecks = [];");
    builder.addLine("    let   numerator = 0.0;");
    builder.addLine("    let   numeratorIncrementValue;");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      let   traceValue = 0.0;");
    builder.addLine("    let nodeAttributeKeys = Object.keys(nodeAttributes);");
    builder.addLine("    let nodeAttributeKeysLength = nodeAttributeKeys.length;");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("      let nodeAttributeKey = nodeAttributeKeys[i];");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("        let nodeActualValueString = nodeElement.getAttribute('class');");
    builder.addLine("          let nodeActualValueSplitArray = nodeActualValueString.split(' ');");
    builder.addLine("          let nodeActualValueSplitArrayLen = nodeActualValueSplitArray.length;");
    builder.addLine("          let nodeActualValueSplit = [];");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("            let nodeActualValueSplitValue = nodeActualValueSplitArray[i];");
    builder.addLine("              let nodeActualValueSplitValueLen = nodeActualValueSplitValue.length;");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("        let nodeIndexOf;");
    builder.addLine("        let nodeInnerText = nodeElement.innerText;");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("          let   nodeActualIndex;");
    builder.addLine("          let   nodeActualPHash;");
    builder.addLine("          let   nodeActualUrl;");
    builder.addLine("          let   nodeAttributesPHashSimilarity;");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("          let   nodeActualIndex;");
    builder.addLine("          let   nodeActualPHash;");
    builder.addLine("          let   nodeActualUrl;");
    builder.addLine("          let   nodeAttributesPHashSimilarity;");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("    let outArray = [];");
    builder.addLine("    let nodeListLength = nodeList.length;");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("      let curNode = nodeList[i];");
    builder.addLine("      let nodeType = curNode.constructor.name;");
    builder.addLine("        let newNode = curNode.getElementById(findEntry.attributeValue);");
    builder.addLine("        let newNodeList = curNode.getElementByClassName(findEntry.attributeValue);");
    builder.addLine("        let newNodeListLength = newNodeList.length;");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("        let newNodesList = curNode.getElementsByTagName(findEntry.tag);");
    builder.addLine("        let newNodesListLength = newNodesList.length;");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("      let curChildren = curNode.childNodes;");
    builder.addLine("      let curChildrenLength = curChildren.length;");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("        let curChild = curChildren[i];");
    builder.addLine("    let urlStrMod = urlStr.replace(/\\+/g, ' ');");
    builder.addLine("    let result = new Set();");
    builder.addLine("    let firstElement = domElement;");
    builder.addLine("    let finalUrl = null;");
    builder.addLine("      let computedStyle = window.getComputedStyle(domElement);");
    builder.addLine("      let backStr = computedStyle['background-image'];");
    builder.addLine("      let backType = typeof backStr;");
    builder.addLine("      let backLast = backStr.lastIndexOf('/');");
    builder.addLine("    let objProps = HDLmGetAllPropertyNames(obj);");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("      let objValue = obj[prop];");
    builder.addLine("      let typeValue = typeof objValue;");
    builder.addLine("      let quotes = true;");
    builder.addLine("        let lengthValue = objValue.length;");
    builder.addLine("          let objValueFirst = objValue.charAt(0);");
    builder.addLine("          let objValueLast = objValue.charAt(lengthValue-1);");
    builder.addLine("      let oldRvLength = rv.length;");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let result = obj.constructor.name;");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    let currentCount = curNode.getAttribute(attributeName);");
    builder.addLine("    let xorValue = firstVal ^ secondVal;");
    builder.addLine("    let distanceCount = 0;");
    builder.addLine("    let distanceValue = HDLmHammingDistanceLong(firstVal, secondVal);");
    builder.addLine("    let distanceFinal = 0;");
    builder.addLine("    let firstSub, secondSub;");
    builder.addLine("      let firstInt = parseInt(firstSub, 16);");
    builder.addLine("      let secondInt = parseInt(secondSub, 16);");
    builder.addLine("    let countHigh = false;");
    builder.addLine("    let updateName = 'HDLmUpdateCount' + curMod.name;");
    builder.addLine("    let localUpdates = new Object();");
    builder.addLine("    let oldText = null;");
    builder.addLine("    let newText = null;");
    builder.addLine("    let localReason = curMod.type;");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    let currentCount = curNode.getAttribute(attributeName);");
    builder.addLine("    let searchObj = JSON.parse(searchText);");
    builder.addLine("    let searchAttrs = searchObj.attributes;");
    builder.addLine("      let searchInner = searchAttrs.innertext;");
    builder.addLine("      let searchIndex = searchInner.indexOf('$');");
    builder.addLine("    let textValue = null;");
    builder.addLine("    let localMod = {};");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("    let localNodeListLen = localNodeList.length;");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("      let localNode = localNodeList[i];");
    builder.addLine("    let urlStrIndexOfColon = urlStr.indexOf(':');");
    builder.addLine("    let urlObj = new URL(urlStr);");
    builder.addLine("    let urlIndex = urlStr.indexOf(':');");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    let updateObj = {};");
    builder.addLine("    let splitOn;");
    builder.addLine("    let inputSplit = inputStyles.split(splitOn);");
    builder.addLine("    for (let i in inputSplit) {");
    builder.addLine("      let styleValue = inputSplit[i];");
    builder.addLine("    let inputSplit = inputString.split(' ');");
    builder.addLine("    let jsonObj = JSON.parse(jsonStr);");
    builder.addLine("    let pathValueStr = document.location.pathname;");
    builder.addLine("    let modsArrayLength = modsArray.length;");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("            let nodeList = HDLmFind(curMod, false);");
    builder.addLine("            let nodeListLen = nodeList.length;");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("              let curNode = nodeList[j];");
    builder.addLine("              let oldText = curNode.textContent;");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("              let searchText = curMod.values[j];");
    builder.addLine("              let searchValue = HDLmObtainValue(searchText);");
    builder.addLine("        let errorStr = HDLmErrorToString(errorObj);");
    builder.addLine("        let nameStr = curMod.name;"); 
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("        let errorStr = HDLmErrorToString(errorObj);");
    builder.addLine("        let nameStr = curMod.name;");
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("    let errorStr = '';");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("      let changesValue = changesObj[keyValue];");
    builder.addLine("    let outputStr = '';");
    builder.addLine("    let attrs = curNode.attributes;");
    builder.addLine("    let attrsLength = attrs.length;");
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("    let lookupData = {");
    builder.addLine("    let lookupIndex = lookupData[ruleName];");
    builder.addLine("    let outputStr = '';");
    builder.addLine("    let xHttpReq = new XMLHttpRequest();");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlVal = '" + protocolStringGetPHash + "://' + serverNameValue + '/" + HDLmConfigInfo.getPHashName() + "';");
    builder.addLine("    let hostNameStr = location.hostname;");
    builder.addLine("    let linkStr = location.href;");
    builder.addLine("    let pathNameStr = document.location.pathname;");
    builder.addLine("    let sessionIdValue = '" + sessionIdJava + "';");
    builder.addLine("    let eventJson = HDLmGetJsonForLink(linkStr, hostNameStr, pathNameStr, sessionIdValue)");
    builder.addLine("          let eventName = HDLmGetObjectName(event);"); 
    builder.addLine("          let eventJson = HDLmGetJsonForEventObject(event, eventName, hostNameStr, pathNameStr, sessionIdValue)");
    builder.addLine("  let HDLmSavedUpdates = new Object();");
    builder.addLine("  let HDLmSavedExtracts = new Object();");
    builder.addLine("  let HDLmSavedNotifies = new Object();");
    builder.addLine("    let httpReq = new XMLHttpRequest();");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
    builder.addLine("    let updateStr = JSON.stringify(savedUpdates);");
      builder.addLine("  let HDLmIndexValue = null;");
    	builder.addLine("  let HDLmIndexValue = " + sessionIndexStr + ";");
    builder.addLine("  let HDLmObsTargetNode = document;");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsCallback = function (mutationsList, HDLmObsObserver) {");
    builder.addLine("    let forceReadyState = false;");
    builder.addLine("  let HDLmObsObserver = new MutationObserver(HDLmObsCallback);");
    builder.addLine("  let pathValueStr = document.location.pathname;");     
    builder.addLine("  let curMod = {};");      
    builder.addLine("  let HDLmNodeIdenTracing = {");
    builder.addLine("    let nodeIdenTracing = HDLmNodeIdenTracing.off;");
    builder.addLine("    let postRuleTracing = false;");
    builder.addLine("    let matchFound = false;");
    builder.addLine("    let matchError = '';");
    builder.addLine("    let matchModifiedName = hostNameValue + '/' + divisionNameValue + '/' + siteNameValue + '/' + curMod.name");
    builder.addLine("    let curType = curMod.type;");
    builder.addLine("      let postTrace = new Object();");
    builder.addLine("        let localRandomValue = Math.random();");
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("      let matchRes;");
    builder.addLine("      let matchRe;");
    builder.addLine("        let curModLen = curMod.path.length;");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          let errorText = HDLmBuildErrorRule(curMod, 'match', pathValueStr);");
    builder.addLine("      let parameterNumber = -1;");
    builder.addLine("      let finalLookupIndex = 0;");
    builder.addLine("      let lookupValue = -1.0;");
    builder.addLine("      let sessionIndexValueUsed = false;");
    builder.addLine("      let tempLookupIndex = HDLmGetLookupIndex(curMod.name);");
    builder.addLine("      let nodeList = HDLmFind(curMod, nodeIdenTracing, postRuleTracing, postTrace);");
    builder.addLine("      let nodeListLength = nodeList.length;");
    builder.addLine("          let   localUpdates = new Object();");
    builder.addLine("          let curModExtra = curMod.extra;");
    builder.addLine("          let curModExtraArray = curModExtra.split('/');");
    builder.addLine("          let attributeName = curModExtraArray[0];");
    builder.addLine("          let attributeRequest = curModExtraArray[1]");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("              let attributeValue = curNode.getAttribute(attributeName);");
    builder.addLine("              let oldText = attributeValue;");
    builder.addLine("              let nodeURL = new URL(attributeValue);");
    builder.addLine("              let newText = nodeURL.href;");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            let oldText;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localReason = 'extract';");
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            let nodeSrc = curNode.getAttribute('src');");
    builder.addLine("            let oldText = nodeSrc;");
    builder.addLine("            let nodeURL = new URL(nodeSrc);");
    builder.addLine("            let newText = nodeURL.href + '&HDLmSessionId=' + sessionIdJS;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localReason = 'modify';");
    builder.addLine("          let sendUpdates = false;");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let nodeSend = nodeList[i];");
    builder.addLine("          let curModExtra = curMod.extra;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localReason = 'notify';");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("                let localUpdates = new Object();");
    builder.addLine("                for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("                  let searchText = curMod.values[j];");
    builder.addLine("                  let searchValue;");
    builder.addLine("                let localReason = 'notify';");
    builder.addLine("                let curModExtra = curMod.extra;");
    builder.addLine("          let testFlag = false;");
    builder.addLine("          let newTexts = curMod.values;");
    builder.addLine("          let newCount = curMod.valuesCount;");
    builder.addLine("          let forceSelectFound = false;");
    builder.addLine("          let newText;");
    builder.addLine("          for (let i = 0; i < newCount; i++) {");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("          for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("            let curNode = nodeList[i];");
    builder.addLine("            let curModExtra = curMod.extra;");
    builder.addLine("            let oldText;");
    builder.addLine("              let newName = fontNames[curType];");
    builder.addLine("              let curModSplit = HDLmStyleSplitString(curModExtra);");
    builder.addLine("              let curModSplitLength = curModSplit.length;");
    builder.addLine("              for (let i = 0; i < curModSplitLength; i++) {");
    builder.addLine("                let curStyle = curModSplit[i];");
    builder.addLine("                let curValue = '';");
    builder.addLine("              let textMatch = HDLmCheckTextMatches(oldText, curModExtra,");
    builder.addLine("            let matchUpdateCount = HDLmGetUpdateCount(curNode, matchModifiedName, readyState);");
    builder.addLine("              let testFlag = true;");
    builder.addLine("              let forceBreak = HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("              let parentNode = curNode.parentNode;");
    builder.addLine("              let parentNode = curNode.parentNode;");
    builder.addLine("              let testFlag = false;");
    builder.addLine("              let newName = fontNames[curType];");
    builder.addLine("              let nodeChildrenLength = curNode.children.length;");
    builder.addLine("              let newOrder = HDLmBuildOrder(newText, nodeChildrenLength);");
    builder.addLine("              for (let j = 0; j < newOrder.length; j++) {");
    builder.addLine("                let parentNode = curNode.parentNode;");
    builder.addLine("                let newNodeObj = JSON.parse(newText);");
    builder.addLine("                let newNode = HDLmBuildNodeFromObject(newNodeObj);");
    builder.addLine("                let functionStr = 'HDLmExecute' + HDLmReplaceInString(curMod.name) + finalLookupIndex;");
    builder.addLine("                let newData = newText;");
    builder.addLine("                  let finalUrl = HDLmGetBackground(curNode, 'junk.jpg');");
    builder.addLine("                let curModSplit = HDLmStyleSplitString(curModExtra);");
    builder.addLine("                let newTextSplit = HDLmStyleFixValues(newText);");
    builder.addLine("                for (let i in curModSplit) {");
    builder.addLine("                  let newValue = newTextSplit[i];");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("      let errorText = HDLmBuildErrorRule(curMod, matchError, pathValueStr);");
    builder.addLine("    let rv = \"\";");
    builder.addLine("    let arrayType = typeof(curArray);");
    builder.addLine("    let arrayLength = curArray.length;");
    builder.addLine("    for (let i = 0; i < arrayLength; i++) {");
    builder.addLine("      let curValue = curArray[i];");
    builder.addLine("    let errorText = \"Modification \" + matchError + \" - \";");
    builder.addLine("      let findFirst = curMod.find[0];");
    builder.addLine("    let domNode = document.createElement(domObj.tag);");
    builder.addLine("    let attrObj = domObj.attributes;");
    builder.addLine("      for (let attrObjName in attrObj) {");
    builder.addLine("    let domText = domObj.text;");
    builder.addLine("      let textNode = document.createTextNode(domText);");
    builder.addLine("    let domSubNodes = domObj.subnodes;");
    builder.addLine("      let domSubNodesLength = domSubNodes.length;");
    builder.addLine("      for (let i = 0; i < domSubNodesLength; i++) {");
    builder.addLine("        let domSubNode = domSubNodes[i];");
    builder.addLine("        let domSubNodeNode = HDLmBuildNodeFromObject(domSubNode);");
    builder.addLine("    let newTextArray = newText.split(' ');");
    builder.addLine("    let newIntArray = [];");
    builder.addLine("    let outIntArray = [];");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    for (let i = 0; i < newTextArray.length; i++) {");
    builder.addLine("      let tempInt = parseInt(newTextArray[i]);");
    builder.addLine("    for (let i = 0; i < totalLength; i++)");
    builder.addLine("    for (let i = 0; i < totalLength; i++) {");
    builder.addLine("      let ix = tempIntArray.indexOf(newIntArray[i]);");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("    let forceBreak = false;");
    builder.addLine("      let changesValue = changesObj[keyValue];");
    builder.addLine("          let actualText = curNode.textContent;");
    builder.addLine("          let requiredText = changesValue[0];");
    builder.addLine("          let changesMatch = HDLmCheckTextMatches(actualText, requiredText,");
    builder.addLine("          let countHigh = HDLmHandleVisitRequest(changesValue, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("            let changesType = typeof changesValue;");
    builder.addLine("    let rv;");
    builder.addLine("    let requiredTextLower = requiredText.toLowerCase();");
    builder.addLine("    let actualTextLower = actualText.toLowerCase();");
    builder.addLine("        let localUpdates = new Object();");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    let newObj = {};");
    builder.addLine("    let nodeList = [];");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("      let thisNode = nodeIter.iterateNext();");
    builder.addLine("      let findsArray = curMod.find;");
    builder.addLine("      let findsArrayLength = findsArray.length");
    builder.addLine("      for (let i = 0; i < findsArrayLength; i++) {");
    builder.addLine("        let findEntry = findsArray[i];");
    builder.addLine("    let   nodeElement;");
    builder.addLine("    let   nodeElements = [];");
    builder.addLine("    let   nodeIden = curMod.nodeiden;");
    builder.addLine("    let   nodeList = [];");
    builder.addLine("    let   nodeAttributes = nodeIden.attributes;");
    builder.addLine("    let   nodeCounts = nodeIden.counts;");
    builder.addLine("    let   nodeType = nodeIden.type;");
    builder.addLine("    let   nodeValue = null;");
    builder.addLine("        let nodeTag = nodeAttributes.tag;");
    builder.addLine("        let nodeId = nodeAttributes.id;");
    builder.addLine("        let nodeClass;");
    builder.addLine("          let nodeClassList = nodeAttributes.class;");
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
    builder.addLine("        let nodeName = nodeAttributes.name;");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("    let   nodeElementsLength = nodeElements.length;");
    builder.addLine("      let   nodeText = nodeType;");
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
    builder.addLine("    let nodeIdenCheckType = 'full';");
    builder.addLine("    let nodeList = [];");
    builder.addLine("    let nodeCounter = 0;");
    builder.addLine("    let postTraceName;");
    builder.addLine("    let nodeElementsLength = nodeElements.length;");
    builder.addLine("    elementLoop:for (let i = 0; i < nodeElementsLength; i++) {");
    builder.addLine("      let currentElement = nodeElements[i];");
    builder.addLine("      let   grandParentElement;");
    builder.addLine("      let   parentElement;");
    builder.addLine("      let   nodeCurrentAttributes = nodeIden.attributes;");
    builder.addLine("      let   currentMatchValue = HDLmFindNodeIdenMatch(currentElement,");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("        let   nodeParentAttributes = nodeIden.parent;");
    builder.addLine("        let   parentMatchValue = HDLmFindNodeIdenMatch(parentElement,");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("        let   nodeGrandParentAttributes = nodeIden.grandparent;");
    builder.addLine("        let   grandParentMatchValue = HDLmFindNodeIdenMatch(grandParentElement,");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("    let   denominator = 0.0;");
    builder.addLine("    let   nodeActualValue;");
    builder.addLine("    let   nodeAttributeValue;");
    builder.addLine("    let   nodeAttributeChecks = [];");
    builder.addLine("    let   numerator = 0.0;");
    builder.addLine("    let   numeratorIncrementValue;");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      let   traceValue = 0.0;");
    builder.addLine("    let nodeAttributeKeys = Object.keys(nodeAttributes);");
    builder.addLine("    let nodeAttributeKeysLength = nodeAttributeKeys.length;");
    builder.addLine("    for (let i = 0; i < nodeAttributeKeysLength; i++) {");
    builder.addLine("      let nodeAttributeKey = nodeAttributeKeys[i];");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("        let nodeActualValueString = nodeElement.getAttribute('class');");
    builder.addLine("          let nodeActualValueSplitArray = nodeActualValueString.split(' ');");
    builder.addLine("          let nodeActualValueSplitArrayLen = nodeActualValueSplitArray.length;");
    builder.addLine("          let nodeActualValueSplit = [];");
    builder.addLine("          for (let i = 0; i < nodeActualValueSplitArrayLen; i++) {");
    builder.addLine("            let nodeActualValueSplitValue = nodeActualValueSplitArray[i];");
    builder.addLine("              let nodeActualValueSplitValueLen = nodeActualValueSplitValue.length;");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("        let nodeIndexOf;");
    builder.addLine("        let nodeInnerText = nodeElement.innerText;");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("          let   nodeActualIndex;");
    builder.addLine("          let   nodeActualPHash;");
    builder.addLine("          let   nodeActualUrl;");
    builder.addLine("          let   nodeAttributesPHashSimilarity;");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("        let   nodePHashCheck = false;");
    builder.addLine("          let   nodeActualIndex;");
    builder.addLine("          let   nodeActualPHash;");
    builder.addLine("          let   nodeActualUrl;");
    builder.addLine("          let   nodeAttributesPHashSimilarity;");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   errorText;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("            let   traceValue = 0.0;");
    builder.addLine("          let   errorText;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("          let   traceValue = 0.0;");
    builder.addLine("    let outArray = [];");
    builder.addLine("    let nodeListLength = nodeList.length;");
    builder.addLine("    for (let i = 0; i < nodeListLength; i++) {");
    builder.addLine("      let curNode = nodeList[i];");
    builder.addLine("      let nodeType = curNode.constructor.name;");
    builder.addLine("        let newNode = curNode.getElementById(findEntry.attributeValue);");
    builder.addLine("        let newNodeList = curNode.getElementByClassName(findEntry.attributeValue);");
    builder.addLine("        let newNodeListLength = newNodeList.length;");
    builder.addLine("        for (let i = 0; i < newNodeListLength; i++) {");
    builder.addLine("        let newNodesList = curNode.getElementsByTagName(findEntry.tag);");
    builder.addLine("        let newNodesListLength = newNodesList.length;");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("          for (let i = 0; i < newNodesListLength; i++) {");
    builder.addLine("            let newNode = newNodesList[i];");
    builder.addLine("      let curChildren = curNode.childNodes;");
    builder.addLine("      let curChildrenLength = curChildren.length;");
    builder.addLine("      for (let i = 0; i < curChildrenLength; i++) {");
    builder.addLine("        let curChild = curChildren[i];");
    builder.addLine("    let urlStrMod = urlStr.replace(/\\+/g, ' ');");
    builder.addLine("    let result = new Set();");
    builder.addLine("    let firstElement = domElement;");
    builder.addLine("    let finalUrl = null;");
    builder.addLine("      let computedStyle = window.getComputedStyle(domElement);");
    builder.addLine("      let backStr = computedStyle['background-image'];");
    builder.addLine("      let backType = typeof backStr;");
    builder.addLine("      let backLast = backStr.lastIndexOf('/');");
    builder.addLine("    let objProps = HDLmGetAllPropertyNames(obj);");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("      let objValue = obj[prop];");
    builder.addLine("      let typeValue = typeof objValue;");
    builder.addLine("      let quotes = true;");
    builder.addLine("        let lengthValue = objValue.length;");
    builder.addLine("          let objValueFirst = objValue.charAt(0);");
    builder.addLine("          let objValueLast = objValue.charAt(lengthValue-1);");
    builder.addLine("      let oldRvLength = rv.length;");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let result = obj.constructor.name;");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    let currentCount = curNode.getAttribute(attributeName);");
    builder.addLine("    let xorValue = firstVal ^ secondVal;");
    builder.addLine("    let distanceCount = 0;");
    builder.addLine("    let distanceValue = HDLmHammingDistanceLong(firstVal, secondVal);");
    builder.addLine("    let distanceFinal = 0;");
    builder.addLine("    let firstSub, secondSub;");
    builder.addLine("      let firstInt = parseInt(firstSub, 16);");
    builder.addLine("      let secondInt = parseInt(secondSub, 16);");
    builder.addLine("    let countHigh = false;");
    builder.addLine("    let updateName = 'HDLmUpdateCount' + curMod.name;");
    builder.addLine("    let localUpdates = new Object();");
    builder.addLine("    let oldText = null;");
    builder.addLine("    let newText = null;");
    builder.addLine("    let localReason = curMod.type;");
    builder.addLine("    let attributeName = 'hdlmupdated'+matchModifiedName;");
    builder.addLine("    let currentCount = curNode.getAttribute(attributeName);");
    builder.addLine("    let searchObj = JSON.parse(searchText);");
    builder.addLine("    let searchAttrs = searchObj.attributes;");
    builder.addLine("      let searchInner = searchAttrs.innertext;");
    builder.addLine("      let searchIndex = searchInner.indexOf('$');");
    builder.addLine("    let textValue = null;");
    builder.addLine("    let localMod = {};");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("    let localNodeListLen = localNodeList.length;");
    builder.addLine("    for (let i = 0; i < localNodeListLen; i++) {");
    builder.addLine("      let localNode = localNodeList[i];");
    builder.addLine("    let urlStrIndexOfColon = urlStr.indexOf(':');");
    builder.addLine("    let urlObj = new URL(urlStr);");
    builder.addLine("    let urlIndex = urlStr.indexOf(':');");
    builder.addLine("    for (let i = 0; i < styleSheetList.length; i++) {");
    builder.addLine("    let updateObj = {};");
    builder.addLine("    let splitOn;");
    builder.addLine("    let inputSplit = inputStyles.split(splitOn);");
    builder.addLine("    for (let i in inputSplit) {");
    builder.addLine("      let styleValue = inputSplit[i];");
    builder.addLine("    let inputSplit = inputString.split(' ');");
    builder.addLine("    let jsonObj = JSON.parse(jsonStr);");
    builder.addLine("    let pathValueStr = document.location.pathname;");
    builder.addLine("    let modsArrayLength = modsArray.length;");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("            let nodeList = HDLmFind(curMod, false);");
    builder.addLine("            let nodeListLen = nodeList.length;");
    builder.addLine("            for (let j = 0; j < nodeListLen; j++) {");
    builder.addLine("              let curNode = nodeList[j];");
    builder.addLine("              let oldText = curNode.textContent;");
    builder.addLine("            for (let j = 0; j < curMod.valuesCount; j++) {");
    builder.addLine("              let searchText = curMod.values[j];");
    builder.addLine("              let searchValue = HDLmObtainValue(searchText);");
    builder.addLine("        let errorStr = HDLmErrorToString(errorObj);");
    builder.addLine("        let nameStr = curMod.name;"); 
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("    for (let i=0; i < modsArrayLength; i++) {");
    builder.addLine("      let curMod = modsArray[i];");
    builder.addLine("        let errorStr = HDLmErrorToString(errorObj);");
    builder.addLine("        let nameStr = curMod.name;");
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        let divisionNameStr ='" + divisionName + "';");
    builder.addLine("        let hostNameStr = '" + hostName + "';");
    builder.addLine("        let builtStr = 'Modification (' + nameStr + ') Host (' + hostNameStr + ') Error (' + errorStr + ')';");
    builder.addLine("    let errorStr = '';");
    builder.addLine("    let changesObj = JSON.parse(jsonText);");
    builder.addLine("      let changesValue = changesObj[keyValue];");
    builder.addLine("    let outputStr = '';");
    builder.addLine("    let attrs = curNode.attributes;");
    builder.addLine("    let attrsLength = attrs.length;");
    builder.addLine("    for (let i = attrsLength - 1; i >= 0; i--) {");
    builder.addLine("    let lookupData = {");
    builder.addLine("    let lookupIndex = lookupData[ruleName];");
    builder.addLine("    let outputStr = '';");
    builder.addLine("    let xHttpReq = new XMLHttpRequest();");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlVal = '" + protocolStringGetPHash + "://' + serverNameValue + '/" + HDLmConfigInfo.getPHashName() + "';");
    builder.addLine("    let hostNameStr = location.hostname;");
    builder.addLine("    let linkStr = location.href;");
    builder.addLine("    let pathNameStr = document.location.pathname;");
    builder.addLine("    let sessionIdValue = '" + sessionIdJava + "';");
    builder.addLine("    let eventJson = HDLmGetJsonForLink(linkStr, hostNameStr, pathNameStr, sessionIdValue)");
    builder.addLine("          let eventName = HDLmGetObjectName(event);"); 
    builder.addLine("          let eventJson = HDLmGetJsonForEventObject(event, eventName, hostNameStr, pathNameStr, sessionIdValue)");
    builder.addLine("  let HDLmSavedUpdates = new Object();");
    builder.addLine("  let HDLmSavedExtracts = new Object();");
    builder.addLine("  let HDLmSavedNotifies = new Object();");
    builder.addLine("    let httpReq = new XMLHttpRequest();");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
    builder.addLine("    let updateStr = JSON.stringify(savedUpdates);");
      builder.addLine("  let HDLmIndexValue = null;");
    	builder.addLine("  let HDLmIndexValue = " + sessionIndexStr + ";");
    builder.addLine("  let HDLmObsTargetNode = document;");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsCallback = function (mutationsList, HDLmObsObserver) {");
    builder.addLine("    let forceReadyState = false;");
    builder.addLine("  let HDLmObsObserver = new MutationObserver(HDLmObsCallback);");
    builder.addLine("  let pathValueStr = document.location.pathname;");     
    builder.addLine("  let curMod = {};");      
Possible variable link
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
Possible variable localRandomValue
    builder.addLine("        let localRandomValue = Math.random();");
    builder.addLine("        if (localRandomValue * 100.0 > curMod.prob &&");
    builder.addLine("        let localRandomValue = Math.random();");
    builder.addLine("        if (localRandomValue * 100.0 > curMod.prob &&");
Possible variable location
    builder.addLine("    let hostNameStr = location.hostname;");
    builder.addLine("    let linkStr = location.href;");
    builder.addLine("    let hostNameStr = location.hostname;");
    builder.addLine("    let linkStr = location.href;");
Possible variable logIsDebugEnabled
    boolean   logIsDebugEnabled = LOG.isDebugEnabled();
		if (logIsDebugEnabled) {
    boolean   logIsDebugEnabled = LOG.isDebugEnabled();
		if (logIsDebugEnabled) {
Possible variable long
    long  mapSize = mapObj.size();
    long  mapSize = mapObj.size();
Possible variable lookup
    builder.addLine("            matchError = 'Null lookup value';");
    builder.addLine("            matchError = 'Null lookup value';");
Possible variable m
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
Possible variable mapObj
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
    long  mapSize = mapObj.size();
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
    Map<String, String>  mapObj = HDLmPHashCache.getMap();
    long  mapSize = mapObj.size();
		for (Map.Entry<String, String> entry: mapObj.entrySet()) {
Possible variable mapSize
    long  mapSize = mapObj.size();
        if (counter < mapSize)
    long  mapSize = mapObj.size();
        if (counter < mapSize)
Possible variable match
    builder.addLine("          let errorText = HDLmBuildErrorRule(curMod, 'match', pathValueStr);");
    builder.addLine("          let errorText = HDLmBuildErrorRule(curMod, 'match', pathValueStr);");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
Possible variable matching
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
Possible variable mismatch
    builder.addLine("        matchError = 'Path value mismatch';");
    builder.addLine("        matchError = 'Path value mismatch';");
Possible variable mod
    for (HDLmMod mod: mods) {
      newLine += mod.getJsonSpecialSerializeNulls();
    for (HDLmMod mod: mods) {
    	if (mod.getType() != HDLmModTypes.SCRIPT)
    	String  newName = HDLmMod.replaceInString(mod.getName());
        int   valueCount = mod.getValues().size();
          String  curValue = mod.getValues().get(i);
    for (HDLmMod mod: mods) {
      newLine += mod.getJsonSpecialSerializeNulls();
    for (HDLmMod mod: mods) {
    	if (mod.getType() != HDLmModTypes.SCRIPT)
    	String  newName = HDLmMod.replaceInString(mod.getName());
        int   valueCount = mod.getValues().size();
          String  curValue = mod.getValues().get(i);
Possible variable modification
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'modification', nameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'modification', nameStr);");
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'modification', nameStr);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'modification', nameStr);");
Possible variable modify
    builder.addLine("        case 'modify': {");
    builder.addLine("            let localReason = 'modify';");
    builder.addLine("            postTrace.matcherror = 'modify';");
    builder.addLine("        case 'modify': {");
    builder.addLine("            let localReason = 'modify';");
    builder.addLine("            postTrace.matcherror = 'modify';");
Possible variable mods
                                    ArrayList<HDLmMod> mods, 
		if (mods == null) {
    if (mods.size() == 0 &&
    		mods.size() != 0)
    int         modsCount = mods.size(); 
    for (HDLmMod mod: mods) {
    for (HDLmMod mod: mods) {
                                    ArrayList<HDLmMod> mods, 
		if (mods == null) {
    if (mods.size() == 0 &&
    		mods.size() != 0)
    int         modsCount = mods.size(); 
    for (HDLmMod mod: mods) {
    for (HDLmMod mod: mods) {
Possible variable modsCount
    int         modsCount = mods.size(); 
      if (counter < modsCount)
    int         modsCount = mods.size(); 
      if (counter < modsCount)
Possible variable n
    builder.addLine("            if (nodeActualValueSplitValue.endsWith('\\n')) {");
    builder.addLine("          nodeIndexOf = nodeInnerText.indexOf('\\n');");
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
    actualJS = builder.getLinesWithSuffix("\r\n");
    builder.addLine("            if (nodeActualValueSplitValue.endsWith('\\n')) {");
    builder.addLine("          nodeIndexOf = nodeInnerText.indexOf('\\n');");
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
    actualJS = builder.getLinesWithSuffix("\r\n");
Possible variable name
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
    builder.addLine("    errorText += \"name (\";");
    builder.addLine("      case 'name': {");
    builder.addLine("          postTrace.nodegetby = 'name';");
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
    builder.addLine("    errorText += \"name (\";");
    builder.addLine("      case 'name': {");
    builder.addLine("          postTrace.nodegetby = 'name';");
Possible variable new
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
    builder = new HDLmBuildLines("JS");
    builder.addLine("      let postTrace = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("        matchRe = new RegExp(curMod.path.substr(2, curModLen-3));");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          let   localUpdates = new Object();");
    builder.addLine("              let nodeURL = new URL(attributeValue);");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let nodeURL = new URL(nodeSrc);");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("                let localUpdates = new Object();");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("        let localUpdates = new Object();");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("    let result = new Set();");
    builder.addLine("    let localUpdates = new Object();");
    builder.addLine("    let urlObj = new URL(urlStr);");
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
    builder.addLine("    let xHttpReq = new XMLHttpRequest();");
    builder.addLine("  let HDLmSavedUpdates = new Object();");
    builder.addLine("  let HDLmSavedExtracts = new Object();");
    builder.addLine("  let HDLmSavedNotifies = new Object();");
    builder.addLine("    let httpReq = new XMLHttpRequest();");
    builder.addLine("  let HDLmObsObserver = new MutationObserver(HDLmObsCallback);");
		  StringBuilder   actualJSAdjustedBuilder = new StringBuilder();
	    static JsonParser  parser = new JsonParser();  
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
    builder = new HDLmBuildLines("JS");
    builder.addLine("      let postTrace = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("        matchRe = new RegExp(curMod.path.substr(2, curModLen-3));");
    builder.addLine("          let localUpdates = new Object();");
    builder.addLine("          let   localUpdates = new Object();");
    builder.addLine("              let nodeURL = new URL(attributeValue);");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let nodeURL = new URL(nodeSrc);");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("                let localUpdates = new Object();");
    builder.addLine("              let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("            let localUpdates = new Object();");
    builder.addLine("        let localUpdates = new Object();");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("      let   nodeAttributeCheck = new Object();");
    builder.addLine("    let result = new Set();");
    builder.addLine("    let localUpdates = new Object();");
    builder.addLine("    let urlObj = new URL(urlStr);");
          ArrayList<String>   curValues = new ArrayList<String>(Arrays.asList(curValue.split("/n")));
    builder.addLine("    let xHttpReq = new XMLHttpRequest();");
    builder.addLine("  let HDLmSavedUpdates = new Object();");
    builder.addLine("  let HDLmSavedExtracts = new Object();");
    builder.addLine("  let HDLmSavedNotifies = new Object();");
    builder.addLine("    let httpReq = new XMLHttpRequest();");
    builder.addLine("  let HDLmObsObserver = new MutationObserver(HDLmObsCallback);");
		  StringBuilder   actualJSAdjustedBuilder = new StringBuilder();
	    static JsonParser  parser = new JsonParser();  
Possible variable newLine
    String      newLine;
      newLine = " ".repeat(24);
      newLine += mod.getJsonSpecialSerializeNulls();
        newLine += ",";
      builder.addLine(newLine);
          newLine = "  function HDLmExecute" + newName + i + "() {";
          builder.addLine(newLine);
          newLine = "  }";
          builder.addLine(newLine);
          newLine = " ".repeat(23);
          newLine += "'"; 
          newLine += ruleName;
          newLine += "': ";
          	newLine += "null";
            newLine += choiceJsonString;
            newLine += ",";       
          builder.addLine(newLine);
      newLine = " ".repeat(30);
        newLine += "null";
        newLine += arrayEntry;
        newLine += ",";
      builder.addLine(newLine);
      newLine = " ".repeat(28);
        newLine += "\"";
        newLine += key;
        newLine += "\":\"";
        newLine += value;
        newLine += "\"";
          newLine += ",";
      builder.addLine(newLine);
    String      newLine;
      newLine = " ".repeat(24);
      newLine += mod.getJsonSpecialSerializeNulls();
        newLine += ",";
      builder.addLine(newLine);
          newLine = "  function HDLmExecute" + newName + i + "() {";
          builder.addLine(newLine);
          newLine = "  }";
          builder.addLine(newLine);
          newLine = " ".repeat(23);
          newLine += "'"; 
          newLine += ruleName;
          newLine += "': ";
          	newLine += "null";
            newLine += choiceJsonString;
            newLine += ",";       
          builder.addLine(newLine);
      newLine = " ".repeat(30);
        newLine += "null";
        newLine += arrayEntry;
        newLine += ",";
      builder.addLine(newLine);
      newLine = " ".repeat(28);
        newLine += "\"";
        newLine += key;
        newLine += "\":\"";
        newLine += value;
        newLine += "\"";
          newLine += ",";
      builder.addLine(newLine);
Possible variable no
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
Possible variable node
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("          let   errorText = `Node identifier - node class is (${nodeClass})`;");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
Possible variable nodegrandparent
    builder.addLine("        postTraceName = 'nodegrandparent';");
    builder.addLine("        postTraceName = 'nodegrandparent';");
Possible variable nodeparent
    builder.addLine("        postTraceName = 'nodeparent';");
    builder.addLine("        postTraceName = 'nodeparent';");
Possible variable nodes
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
Possible variable nodetarget
    builder.addLine("      postTraceName = 'nodetarget';");
    builder.addLine("      postTraceName = 'nodetarget';");
Possible variable nomatch
    builder.addLine("          matchError = 'nomatch';");
    builder.addLine("          matchError = 'nomatch';");
Possible variable none
    builder.addLine("    \"none\":  0,");
    builder.addLine("                  if (newValue == 'none')");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("          styleValue == 'none'      ||");
    builder.addLine("        styleValue = 'none';");
    builder.addLine("    \"none\":  0,");
    builder.addLine("                  if (newValue == 'none')");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("          styleValue == 'none'      ||");
    builder.addLine("        styleValue = 'none';");
Possible variable nonodes
    builder.addLine("        matchError = 'nonodes';");
    builder.addLine("        matchError = 'nonodes';");
Possible variable not
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
Possible variable notify
    builder.addLine("        case 'notify': {");
    builder.addLine("            let localReason = 'notify';");
    builder.addLine("            postTrace.matcherror = 'notify';");
    builder.addLine("                let localReason = 'notify';");
    builder.addLine("          case 'notify': {");
    builder.addLine("        case 'notify': {");
    builder.addLine("            let localReason = 'notify';");
    builder.addLine("            postTrace.matcherror = 'notify';");
    builder.addLine("                let localReason = 'notify';");
    builder.addLine("          case 'notify': {");
Possible variable novalue
    builder.addLine("          styleValue == 'novalue'   ||");
    builder.addLine("          styleValue == 'novalue'   ||");
Possible variable null
    if (protocol == null) {
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		if (hostName == null) {
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		if (divisionName == null) {
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		if (siteName == null) {
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		if (mods == null) {
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
    if (sessionObj == null) {
		  String  errorText = "Session object passed to getJsBuildJs is null";
    if (logRuleMatching == null) {
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
    if (serverName == null) {
		  String  errorText = "Server name string passed to getJsBuildJs is null";
    String          fixedJSName = null;
    builder.addLine("        if (ignoreProbability == null)");
    builder.addLine("            HDLmSaveChange(localUpdates, null,");
    builder.addLine("                          null, null,");
    builder.addLine("                          null, null,");
    builder.addLine("                          curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                          curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          HDLmSaveChange(localUpdates, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          HDLmSaveChange(localUpdates, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          tempLookupIndex != null) {");
    builder.addLine("        if (parameterNumber != null &&");
    builder.addLine("                         null, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                             null, null,");
    builder.addLine("                             null, null,");
    builder.addLine("              oldText = null;");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null,");
    builder.addLine("                           oldText, null);");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("          if (proxySecureDomain == null) {");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null);");
    builder.addLine("                           null, null);");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null);");
    builder.addLine("                           null, null);");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 null, null);");
    builder.addLine("                                 null, null);");
    builder.addLine("                    searchValue = null;");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 searchValue, null);");
    builder.addLine("                    curModExtra          != null        &&");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("          if (lookupValue != null) {");
    builder.addLine("          if (lookupValue == null &&");
    builder.addLine("                             null, null,");
    builder.addLine("                             null, null,");
    builder.addLine("                             null, null);");
    builder.addLine("                             null, null);");
    builder.addLine("              if (parentNode != null) {");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null);");
    builder.addLine("                           null, null);");
    builder.addLine("    if (curArray == null) {");
    builder.addLine("      rv = null;");
    builder.addLine("      if (curValue == null)");
    builder.addLine("        rv += 'null';");
    builder.addLine("      return null;");
    builder.addLine("    if (domObj.tag == null)");
    builder.addLine("      return null;");
    builder.addLine("    if (attrObj != null) {");
    builder.addLine("    if (domText != null) {");
    builder.addLine("    if (domSubNodes != null) {");
    builder.addLine("        if (domSubNodeNode != null)");
    builder.addLine("          if (changesValue == null) {");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("                                       null);");
    builder.addLine("    else if (curMod.nodeiden !== null) {");
    builder.addLine("    let   nodeValue = null;");
    builder.addLine("        if (nodeElement != null)");
    builder.addLine("      if (nodeValue != null)");
    builder.addLine("            parentElement == null)");
    builder.addLine("            nodeParentAttributes == null)");
    builder.addLine("            parentElement == null)");
    builder.addLine("            grandParentElement == null)");
    builder.addLine("            nodeGrandParentAttributes == null)");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (nodeActualValueString != null) {");
    builder.addLine("            nodeActualValue = null;");
    builder.addLine("          nodeActualValue = null;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          nodeInnerText = null;");
    builder.addLine("        if (nodeInnerText != null) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            nodeActualValue != null)");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (newNode !== null) {");
    builder.addLine("    return null;");
    builder.addLine("    let finalUrl = null;");
    builder.addLine("    while (domElement != null) {");
    builder.addLine("      if (computedStyle == null)");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("          objValue == null)");
    builder.addLine("    let oldText = null;");
    builder.addLine("    let newText = null;");
    builder.addLine("        visitText          != null        &&");
    builder.addLine("    let textValue = null;");
    builder.addLine("      localMod.nodeiden = null;");
    builder.addLine("      localMod.nodeiden = null;");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("    if (jsonStr == null)");
    builder.addLine("                  HDLmSavedExtracts[curMod.name] != null)");
    builder.addLine("                  HDLmSavedNotifies[searchText] != null)");
    if (secureHostName != null) 
      builder.addLine("                     null,"); 
    builder.addLine("      if (changesValue == null)");
    if (sessionIndexStr != null &&
    		!sessionIndexStr.equals("null"))  
    		JsonArray   choiceJsonArray = null;
        if (sessionIndexStr != null &&
        		!sessionIndexStr.equals("null")) { 
          if (sessionIndexStr == null ||
          		sessionIndexStr.equals("null"))
          	newLine += "null";
      if (arrayEntry == null)
        newLine += "null";
    if (sessionIndexStr == null ||
        sessionIndexStr.equals("null"))
      builder.addLine("  let HDLmIndexValue = null;");
    if (secureHostName != null) 
      builder.addLine("               null,");
    if (protocol == null) {
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		if (hostName == null) {
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		if (divisionName == null) {
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		if (siteName == null) {
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		if (mods == null) {
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
    if (sessionObj == null) {
		  String  errorText = "Session object passed to getJsBuildJs is null";
    if (logRuleMatching == null) {
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
    if (serverName == null) {
		  String  errorText = "Server name string passed to getJsBuildJs is null";
    String          fixedJSName = null;
    builder.addLine("        if (ignoreProbability == null)");
    builder.addLine("            HDLmSaveChange(localUpdates, null,");
    builder.addLine("                          null, null,");
    builder.addLine("                          null, null,");
    builder.addLine("                          curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                          curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          HDLmSaveChange(localUpdates, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          HDLmSaveChange(localUpdates, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("          tempLookupIndex != null) {");
    builder.addLine("        if (parameterNumber != null &&");
    builder.addLine("                         null, null,");
    builder.addLine("                         null, null,");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                         curMod.path, curMod.type, pathValueStr, null, null);");
    builder.addLine("                             null, null,");
    builder.addLine("                             null, null,");
    builder.addLine("              oldText = null;");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null,");
    builder.addLine("                           oldText, null);");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("          if (proxySecureDomain == null) {");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null);");
    builder.addLine("                           null, null);");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null);");
    builder.addLine("                           null, null);");
    builder.addLine("                curModExtra          != null        &&");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 null, null);");
    builder.addLine("                                 null, null);");
    builder.addLine("                    searchValue = null;");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 null, null,");
    builder.addLine("                                 searchValue, null);");
    builder.addLine("                    curModExtra          != null        &&");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("          if (lookupValue != null) {");
    builder.addLine("          if (lookupValue == null &&");
    builder.addLine("                             null, null,");
    builder.addLine("                             null, null,");
    builder.addLine("                             null, null);");
    builder.addLine("                             null, null);");
    builder.addLine("              if (parentNode != null) {");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null,");
    builder.addLine("                           null, null);");
    builder.addLine("                           null, null);");
    builder.addLine("    if (curArray == null) {");
    builder.addLine("      rv = null;");
    builder.addLine("      if (curValue == null)");
    builder.addLine("        rv += 'null';");
    builder.addLine("      return null;");
    builder.addLine("    if (domObj.tag == null)");
    builder.addLine("      return null;");
    builder.addLine("    if (attrObj != null) {");
    builder.addLine("    if (domText != null) {");
    builder.addLine("    if (domSubNodes != null) {");
    builder.addLine("        if (domSubNodeNode != null)");
    builder.addLine("          if (changesValue == null) {");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("      let nodeIter = document.evaluate(curMod.xpath, document, null,");
    builder.addLine("                                       null);");
    builder.addLine("    else if (curMod.nodeiden !== null) {");
    builder.addLine("    let   nodeValue = null;");
    builder.addLine("        if (nodeElement != null)");
    builder.addLine("      if (nodeValue != null)");
    builder.addLine("            parentElement == null)");
    builder.addLine("            nodeParentAttributes == null)");
    builder.addLine("            parentElement == null)");
    builder.addLine("            grandParentElement == null)");
    builder.addLine("            nodeGrandParentAttributes == null)");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (nodeActualValueString != null) {");
    builder.addLine("            nodeActualValue = null;");
    builder.addLine("          nodeActualValue = null;");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          nodeInnerText = null;");
    builder.addLine("        if (nodeInnerText != null) {");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("          if (nodeActualPHash == null) {");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("            if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue == null)");
    builder.addLine("            nodeActualValue != null)");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("          if (nodeActualValue != null &&");
    builder.addLine("        if (nodeActualValue == null)");
    builder.addLine("        if (newNode !== null) {");
    builder.addLine("    return null;");
    builder.addLine("    let finalUrl = null;");
    builder.addLine("    while (domElement != null) {");
    builder.addLine("      if (computedStyle == null)");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("          objValue == null)");
    builder.addLine("    let oldText = null;");
    builder.addLine("    let newText = null;");
    builder.addLine("        visitText          != null        &&");
    builder.addLine("    let textValue = null;");
    builder.addLine("      localMod.nodeiden = null;");
    builder.addLine("      localMod.nodeiden = null;");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("    let localNodeList = HDLmFind(localMod, false, null, null);");
    builder.addLine("      if (styleSheet.title != null &&");
    builder.addLine("    if (disabledStatus == null)");
    builder.addLine("    if (jsonStr == null)");
    builder.addLine("                  HDLmSavedExtracts[curMod.name] != null)");
    builder.addLine("                  HDLmSavedNotifies[searchText] != null)");
    if (secureHostName != null) 
      builder.addLine("                     null,"); 
    builder.addLine("      if (changesValue == null)");
    if (sessionIndexStr != null &&
    		!sessionIndexStr.equals("null"))  
    		JsonArray   choiceJsonArray = null;
        if (sessionIndexStr != null &&
        		!sessionIndexStr.equals("null")) { 
          if (sessionIndexStr == null ||
          		sessionIndexStr.equals("null"))
          	newLine += "null";
      if (arrayEntry == null)
        newLine += "null";
    if (sessionIndexStr == null ||
        sessionIndexStr.equals("null"))
      builder.addLine("  let HDLmIndexValue = null;");
    if (secureHostName != null) 
      builder.addLine("               null,");
Possible variable object
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
Possible variable off
    builder.addLine("    \"off\":   1,");
    builder.addLine("    \"off\":   1,");
Possible variable on
    builder.addLine("      if (/^on/.test(key)) {");
    builder.addLine("      if (/^on/.test(key)) {");
Possible variable onmouse
    builder.addLine("      if (key.startsWith('onmouse'))");
    builder.addLine("      if (key.startsWith('onmouse'))");
Possible variable onpointer
    builder.addLine("      if (key.startsWith('onpointer'))");
    builder.addLine("      if (key.startsWith('onpointer'))");
Possible variable order
    builder.addLine("        case 'order':");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("    if (curType == 'order')");
    builder.addLine("        case 'order':");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("            else if (curType == 'order') {");
    builder.addLine("    if (curType == 'order')");
Possible variable org
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
Possible variable p
    builder.addLine("      Object.getOwnPropertyNames(obj).forEach(p => result.add(p));");
    builder.addLine("      Object.getOwnPropertyNames(obj).forEach(p => result.add(p));");
    builder.addLine("      Object.getOwnPropertyNames(obj).forEach(p => result.add(p));");
    builder.addLine("      Object.getOwnPropertyNames(obj).forEach(p => result.add(p));");
Possible variable parent
    builder.addLine("        if (nodeIden.hasOwnProperty('parent') == false)");
    builder.addLine("        if (nodeIden.hasOwnProperty('parent') == false)");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
Possible variable parseInt
    builder.addLine("      let tempInt = parseInt(newTextArray[i]);");
    builder.addLine("      let firstInt = parseInt(firstSub, 16);");
    builder.addLine("      let secondInt = parseInt(secondSub, 16);");
    builder.addLine("      let tempInt = parseInt(newTextArray[i]);");
    builder.addLine("      let firstInt = parseInt(firstSub, 16);");
    builder.addLine("      let secondInt = parseInt(secondSub, 16);");
Possible variable parser
	    static JsonParser  parser = new JsonParser();  
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
	    static JsonParser  parser = new JsonParser();  
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
Possible variable partial
    builder.addLine("      nodeIdenCheckType = 'partial';");
    builder.addLine("      nodeIdenCheckType = 'partial';");
Possible variable passed
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
Possible variable pathName
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
Possible variable perceptual
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) actual (${nodeActualPHash}) expected (${nodeAttributesPHashValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
Possible variable phash
    builder.addLine("      else if (nodeAttributeKey == 'phash') {");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("      else if (nodeAttributeKey == 'phash') {");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
    builder.addLine("          if (nodeAttributes.hasOwnProperty('phash') == false)");
    builder.addLine("          let nodeAttributesPHashValue = nodeAttributes['phash'];");
Possible variable primitive
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
Possible variable private
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
	private HDLmBuildJs() {}
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
	private HDLmBuildJs() {}
Possible variable probability
    builder.addLine("          matchError = 'probability';");
    builder.addLine("          matchError = 'probability';");
Possible variable prop
    builder.addLine("    objProps.forEach(prop => {");
    builder.addLine("      let objValue = obj[prop];");
    builder.addLine("        rv += ',\"' + prop + '\":';");
    builder.addLine("    objProps.forEach(prop => {");
    builder.addLine("      let objValue = obj[prop];");
    builder.addLine("        rv += ',\"' + prop + '\":';");
Possible variable protocol
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
    if (protocol == null) {
    protocolStringGetPHash = protocol.toString().toLowerCase();
    protocolStringLower = protocol.toString().toLowerCase();
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
    if (protocol == null) {
    protocolStringGetPHash = protocol.toString().toLowerCase();
    protocolStringLower = protocol.toString().toLowerCase();
Possible variable public
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
  public static JsonArray  getIndexJsonArray() {
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
  public static JsonArray  getIndexJsonArray() {
Possible variable px
    builder.addLine("                newText = HDLmBuildSuffix(newText, 'px');");
    builder.addLine("              newText = HDLmBuildSuffix(newText, 'px');");
    builder.addLine("              changesValue += 'px';");
    builder.addLine("        styleValue += 'px';");
    builder.addLine("                newText = HDLmBuildSuffix(newText, 'px');");
    builder.addLine("              newText = HDLmBuildSuffix(newText, 'px');");
    builder.addLine("              changesValue += 'px';");
    builder.addLine("        styleValue += 'px';");
Possible variable q
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
Possible variable r
    actualJS = builder.getLinesWithSuffix("\r\n");
    actualJS = builder.getLinesWithSuffix("\r\n");
Possible variable reference
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
Possible variable remove
    builder.addLine("        case 'remove':");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("            else if (curType == 'remove' ||");
    builder.addLine("            if (curType == 'remove' ||");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("        case 'remove':");
    builder.addLine("            else if (curType == 'remove') {");
    builder.addLine("            else if (curType == 'remove' ||");
    builder.addLine("            if (curType == 'remove' ||");
    builder.addLine("            else if (curType == 'remove') {");
Possible variable repeat
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
    builder.addLine("                  curNode.style.setProperty('background-repeat', 'no-repeat');");
Possible variable replace
    builder.addLine("        case 'replace':");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("                curType == 'replace') {");
    builder.addLine("                curType == 'replace') {");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("        case 'replace':");
    builder.addLine("            else if (curType == 'replace') {");
    builder.addLine("                curType == 'replace') {");
    builder.addLine("                curType == 'replace') {");
    builder.addLine("            else if (curType == 'replace') {");
Possible variable return
      return actualJS;
        return actualJS;
      return "<script></script>";
    builder.addLine("              return function() {");
    builder.addLine("    return matchFound;");
    builder.addLine("      return rv;");
    builder.addLine("      return rv;");
    builder.addLine("      return rv;");
    builder.addLine("    return rv;");
    builder.addLine("    return errorText;");
    builder.addLine("      return null;");
    builder.addLine("      return null;");
    builder.addLine("    return domNode;");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    return outIntArray;");
    builder.addLine("    return newValue");
    builder.addLine("    return forceBreak;");
    builder.addLine("    return rv;");
    builder.addLine("      return;");
    builder.addLine("      return;");
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
    builder.addLine("    return JSON.stringify(newObj);");
    builder.addLine("    return nodeList;");
    builder.addLine("    return nodeList;");
    builder.addLine("    return nodeList;");
    builder.addLine("      return 0.0;");
    builder.addLine("    return numerator / denominator;");
    builder.addLine("    return outArray;");
    builder.addLine("      return HDLmPHashObject[urlStrMod];");
    builder.addLine("    return null;");
    builder.addLine("    return [...result];");
    builder.addLine("    return finalUrl;");
    builder.addLine("    return rv;");
    builder.addLine("    return rv;");
    builder.addLine("    return result;");
    builder.addLine("      return 0;");
    builder.addLine("    return currentCount;");
    builder.addLine("    return distanceCount;");
    builder.addLine("    return distanceValue/(4.0 * firstVal.length);");
    builder.addLine("    return distanceFinal;");
    builder.addLine("      return countHigh;");
    builder.addLine("    return countHigh;");
    builder.addLine("      return 1;");
    builder.addLine("    return currentCount;");
    builder.addLine("    return searchText;");
    builder.addLine("    return textValue;");
    builder.addLine("      return urlStr;");
    builder.addLine("    return urlStr.substring(urlObj.origin.length);");
    builder.addLine("      return urlStr;");
    builder.addLine("    return urlStr.substring(urlIndex+1);");
    builder.addLine("    return inStr;");
    builder.addLine("    return inputSplit;");
    builder.addLine("    return inputSplit;");
    builder.addLine("    return jsonStr;");
    builder.addLine("      return outputStr;");
    builder.addLine("    return outputStr;");
    builder.addLine("    return lookupIndex;");
    builder.addLine("    return parametersArray;");
    builder.addLine("        return;");
    builder.addLine("        return;"); 
    return actualJS;
    return getIndexJsonArrayLocal.rvJsonArray;
      return actualJS;
        return actualJS;
      return "<script></script>";
    builder.addLine("              return function() {");
    builder.addLine("    return matchFound;");
    builder.addLine("      return rv;");
    builder.addLine("      return rv;");
    builder.addLine("      return rv;");
    builder.addLine("    return rv;");
    builder.addLine("    return errorText;");
    builder.addLine("      return null;");
    builder.addLine("      return null;");
    builder.addLine("    return domNode;");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("    return outIntArray;");
    builder.addLine("    return newValue");
    builder.addLine("    return forceBreak;");
    builder.addLine("    return rv;");
    builder.addLine("      return;");
    builder.addLine("      return;");
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
    builder.addLine("    return JSON.stringify(newObj);");
    builder.addLine("    return nodeList;");
    builder.addLine("    return nodeList;");
    builder.addLine("    return nodeList;");
    builder.addLine("      return 0.0;");
    builder.addLine("    return numerator / denominator;");
    builder.addLine("    return outArray;");
    builder.addLine("      return HDLmPHashObject[urlStrMod];");
    builder.addLine("    return null;");
    builder.addLine("    return [...result];");
    builder.addLine("    return finalUrl;");
    builder.addLine("    return rv;");
    builder.addLine("    return rv;");
    builder.addLine("    return result;");
    builder.addLine("      return 0;");
    builder.addLine("    return currentCount;");
    builder.addLine("    return distanceCount;");
    builder.addLine("    return distanceValue/(4.0 * firstVal.length);");
    builder.addLine("    return distanceFinal;");
    builder.addLine("      return countHigh;");
    builder.addLine("    return countHigh;");
    builder.addLine("      return 1;");
    builder.addLine("    return currentCount;");
    builder.addLine("    return searchText;");
    builder.addLine("    return textValue;");
    builder.addLine("      return urlStr;");
    builder.addLine("    return urlStr.substring(urlObj.origin.length);");
    builder.addLine("      return urlStr;");
    builder.addLine("    return urlStr.substring(urlIndex+1);");
    builder.addLine("    return inStr;");
    builder.addLine("    return inputSplit;");
    builder.addLine("    return inputSplit;");
    builder.addLine("    return jsonStr;");
    builder.addLine("      return outputStr;");
    builder.addLine("    return outputStr;");
    builder.addLine("    return lookupIndex;");
    builder.addLine("    return parametersArray;");
    builder.addLine("        return;");
    builder.addLine("        return;"); 
    return actualJS;
    return getIndexJsonArrayLocal.rvJsonArray;
Possible variable returned
    builder.addLine("      let   errorText = `Node identifier - get for (${nodeText}) returned (${nodeElementsLength}) nodes`;");
Possible variable rule
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
Possible variable ruleJsonElement
        	JsonElement   ruleJsonElement = rulesJsonArray.get(j);
      		if (!ruleJsonElement.isJsonPrimitive()) {
        	String        ruleName = ruleJsonElement.getAsString();
        	JsonElement   ruleJsonElement = rulesJsonArray.get(j);
      		if (!ruleJsonElement.isJsonPrimitive()) {
        	String        ruleName = ruleJsonElement.getAsString();
Possible variable rules
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
        "    \"rules\":" +
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
        "    \"rules\":" +
Possible variable rulesJsonArray
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
    		if (!rulesJsonArray.isJsonArray()) {
    		int         rulesJsonArraySize = rulesJsonArray.size();
        	JsonElement   ruleJsonElement = rulesJsonArray.get(j);
    		JsonArray   rulesJsonArray = HDLmJson.getJsonArray(indexJsonElement, "rules");
    		if (!rulesJsonArray.isJsonArray()) {
    		int         rulesJsonArraySize = rulesJsonArray.size();
        	JsonElement   ruleJsonElement = rulesJsonArray.get(j);
Possible variable rulesJsonArraySize
    		int         rulesJsonArraySize = rulesJsonArray.size();
        for (int j=0; j < rulesJsonArraySize; j++) {
          if (counter < rulesJsonArraySize)  
    		int         rulesJsonArraySize = rulesJsonArray.size();
        for (int j=0; j < rulesJsonArraySize; j++) {
          if (counter < rulesJsonArraySize)  
Possible variable rv
    builder.addLine("    let rv = \"\";");
    builder.addLine("      rv = 'undefined';");
    builder.addLine("      return rv;");
    builder.addLine("      rv = null;");
    builder.addLine("      return rv;");
    builder.addLine("      return rv;");
    builder.addLine("        rv += joinChar;");
    builder.addLine("        rv += 'null';");
    builder.addLine("        rv += String(curValue);");
    builder.addLine("    return rv;");
    builder.addLine("    let rv;");
    builder.addLine("      rv = false;;");
    builder.addLine("      rv = true;");
    builder.addLine("    return rv;");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("      let oldRvLength = rv.length;");
    builder.addLine("        rv += ',\"' + prop + '\":';");
    builder.addLine("          rv += '\"';");
    builder.addLine("        rv += objValue;");
    builder.addLine("          rv += '\"';");
    builder.addLine("        rv = rv.substring(0, oldRvLength);");
    builder.addLine("        rv = rv.substring(0, oldRvLength);");
    builder.addLine("    rv += '}';");
    builder.addLine("    return rv;");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    rv += '}';");
    builder.addLine("    return rv;");
    builder.addLine("    let rv = \"\";");
    builder.addLine("      rv = 'undefined';");
    builder.addLine("      return rv;");
    builder.addLine("      rv = null;");
    builder.addLine("      return rv;");
    builder.addLine("      return rv;");
    builder.addLine("        rv += joinChar;");
    builder.addLine("        rv += 'null';");
    builder.addLine("        rv += String(curValue);");
    builder.addLine("    return rv;");
    builder.addLine("    let rv;");
    builder.addLine("      rv = false;;");
    builder.addLine("      rv = true;");
    builder.addLine("    return rv;");
    builder.addLine("    let rv = '{\"eventName\":\"' + objName + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("      let oldRvLength = rv.length;");
    builder.addLine("        rv += ',\"' + prop + '\":';");
    builder.addLine("          rv += '\"';");
    builder.addLine("        rv += objValue;");
    builder.addLine("          rv += '\"';");
    builder.addLine("        rv = rv.substring(0, oldRvLength);");
    builder.addLine("        rv = rv.substring(0, oldRvLength);");
    builder.addLine("    rv += '}';");
    builder.addLine("    return rv;");
    builder.addLine("    let rv = '{\"link\":\"' + link + '\"' + ',\"hostName\":\"' + hostName + '\"' + ',\"pathName\":\"' + pathName + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    rv += '}';");
    builder.addLine("    return rv;");
Possible variable rvJsonArray
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
Possible variable s
    builder.addLine("    inStr = inStr.replace(/\\s/g,'\u0ed0');");
    builder.addLine("    inputStyles = inputStyles.replace(/\\s+/g, ' ');");
    builder.addLine("    inputString = inputString.replace(/\\s+/g, ' ');");
    builder.addLine("    inStr = inStr.replace(/\\s/g,'\u0ed0');");
    builder.addLine("    inputStyles = inputStyles.replace(/\\s+/g, ' ');");
    builder.addLine("    inputString = inputString.replace(/\\s+/g, ' ');");
Possible variable script
      return "<script></script>";
      return "<script></script>";
    builder.addLine("<script>");
    builder.addLine("        case 'script':");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("</script>");
      return "<script></script>";
      return "<script></script>";
    builder.addLine("<script>");
    builder.addLine("        case 'script':");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("            else if (curType == 'script') {");
    builder.addLine("</script>");
Possible variable secure
    builder.addLine("            let   errorText = `No secure host name for (${hostNameValue})`;");
Possible variable sensitivity
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
Possible variable serverName
                                    String serverName) {
    if (serverName == null) {
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
                                    String serverName) {
    if (serverName == null) {
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
Possible variable serverNameValue
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlVal = '" + protocolStringGetPHash + "://' + serverNameValue + '/" + HDLmConfigInfo.getPHashName() + "';");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlVal = '" + protocolStringGetPHash + "://' + serverNameValue + '/" + HDLmConfigInfo.getPHashName() + "';");
    builder.addLine("    let serverNameValue = '" + serverName + "';");
    builder.addLine("    let urlStr = '" + protocolStringLower + "://' + serverNameValue + '/" + HDLmDefines.getString("HDLMPOSTDATA") + "';");
Possible variable sessionId
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'sessionId', sessionIdJS);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'sessionId', sessionIdJS);");
    builder.addLine("  function HDLmGetJsonForEventObject(obj, objName, hostName, pathName, sessionId) {");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("  function HDLmGetJsonForLink(link, hostName, pathName, sessionId) {");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("    rv += ',\"sessionId\":\"' + sessionId + '\"';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'sessionId', sessionIdJS);");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'sessionId', sessionIdJS);");
Possible variable sessionIndexValue
    builder.addLine("                        sessionIndexValue,");
    builder.addLine("                          sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("        lookupValue = sessionIndexValue;");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                             sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                             sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                               sessionIndexValue, parameterNumber, lookupValue,");
    builder.addLine("                              sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                       sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                  sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                   sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                          sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("    updateObj.indexValue = sessionIndexValue;");
    double  sessionIndexValue = 0.0;
    	sessionIndexValue = Double.parseDouble(sessionIndexStr);    	 
         	double      indexValue = sessionIndexValue * choicesJsonArraySize;
    builder.addLine("                        sessionIndexValue,");
    builder.addLine("                          sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("        lookupValue = sessionIndexValue;");
    builder.addLine("                         sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                             sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                             sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                               sessionIndexValue, parameterNumber, lookupValue,");
    builder.addLine("                              sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                           sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                                 sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                       sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                                  sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                   sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("                          sessionIndexValue, parametersArray, sessionIdJS,");
    builder.addLine("    updateObj.indexValue = sessionIndexValue;");
    double  sessionIndexValue = 0.0;
    	sessionIndexValue = Double.parseDouble(sessionIndexStr);    	 
         	double      indexValue = sessionIndexValue * choicesJsonArraySize;
Possible variable sessionIndexValueUsed
    builder.addLine("      let sessionIndexValueUsed = false;");
    builder.addLine("        sessionIndexValueUsed = true;");
    builder.addLine("          HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("              HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                  HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                  HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("          HDLmHandleVisitRequest(curMod.extra, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("              HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("              let forceBreak = HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("              HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("  function HDLmChangeNodes(curNode, jsonText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("          let countHigh = HDLmHandleVisitRequest(changesValue, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("        HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("  function HDLmHandleVisitRequest(visitText, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("    HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("      let sessionIndexValueUsed = false;");
    builder.addLine("        sessionIndexValueUsed = true;");
    builder.addLine("          HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("              HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                  HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("                  HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("          HDLmHandleVisitRequest(curMod.extra, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("          if (lookupValue != null && sessionIndexValueUsed == false) {");
    builder.addLine("              HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("              let forceBreak = HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("              HDLmChangeNodes(curNode, newText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("            HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("  function HDLmChangeNodes(curNode, jsonText, matchUpdateCount, testFlag, sessionIndexValueUsed,");
    builder.addLine("          let countHigh = HDLmHandleVisitRequest(changesValue, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("        HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
    builder.addLine("  function HDLmHandleVisitRequest(visitText, postTrace, testFlag, sessionIndexValueUsed,");
    builder.addLine("    HDLmSaveChange(localUpdates, sessionIndexValueUsed,");
Possible variable sessionObj
                                    HDLmSession sessionObj,
    if (sessionObj == null) {
    String        sessionIdJava = sessionObj.getSessionId();
    String        sessionIndexStr = sessionObj.getIndex();
    String        sessionParametersStr = sessionObj.getParameters();
                                    HDLmSession sessionObj,
    if (sessionObj == null) {
    String        sessionIdJava = sessionObj.getSessionId();
    String        sessionIndexStr = sessionObj.getIndex();
    String        sessionParametersStr = sessionObj.getParameters();
Possible variable sessionParametersArray
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
    int   sessionParametersArrayLength = sessionParametersArray.size();
      arrayEntry = sessionParametersArray.get(i);
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
    int   sessionParametersArrayLength = sessionParametersArray.size();
      arrayEntry = sessionParametersArray.get(i);
Possible variable sessionParametersArrayLength
    int   sessionParametersArrayLength = sessionParametersArray.size();
    for (int i = 0; i < sessionParametersArrayLength; i++) {
      if (counter < sessionParametersArrayLength)
    int   sessionParametersArrayLength = sessionParametersArray.size();
    for (int i = 0; i < sessionParametersArrayLength; i++) {
      if (counter < sessionParametersArrayLength)
Possible variable sessionParametersStr
    String        sessionParametersStr = sessionObj.getParameters();
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
    String        sessionParametersStr = sessionObj.getParameters();
    ArrayList<Double>   sessionParametersArray = HDLmMain.getParametersArray(sessionParametersStr);
Possible variable sessionStorage
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugRulesEnabled\", 'true');");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugNodeIdenEnabled\", 'all');");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionPostRuleTracingEnabled\", 'true');");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionIgnoreProbability\", 'true');");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoHostName\", hostNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoDivisionName\", divisionNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoSiteName\", siteNameValue);");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
    builder.addLine("    var disabledStatus = sessionStorage.getItem(styleTitle + 'Disabled');");
    builder.addLine("    disabledStatus = sessionStorage.getItem(titleValue + 'Disabled');");
    builder.addLine("    sessionStorage.setItem(titleValue + 'Disabled', disabledStatus);");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugRulesEnabled\", 'true');");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugNodeIdenEnabled\", 'all');");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionPostRuleTracingEnabled\", 'true');");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionIgnoreProbability\", 'true');");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoHostName\", hostNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoDivisionName\", divisionNameValue);");
    builder.addLine("    sessionStorage.setItem(\"HDLmSessionRuleInfoSiteName\", siteNameValue);");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugNodeIdenEnabled') == 'all')");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
    builder.addLine("        let ignoreProbability = sessionStorage.getItem('HDLmSessionIgnoreProbability');");
    builder.addLine("    var disabledStatus = sessionStorage.getItem(styleTitle + 'Disabled');");
    builder.addLine("    disabledStatus = sessionStorage.getItem(titleValue + 'Disabled');");
    builder.addLine("    sessionStorage.setItem(titleValue + 'Disabled', disabledStatus);");
Possible variable siteName
                                    String siteName,
		if (siteName == null) {
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'siteName', siteNameStr);");
    builder.addLine("                     '" + siteName + "',"); 
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'siteName', siteNameStr);");
    builder.addLine("               '" + siteName + "',");
                                    String siteName,
		if (siteName == null) {
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'siteName', siteNameStr);");
    builder.addLine("                     '" + siteName + "',"); 
    builder.addLine("        let siteNameStr = '" + siteName + "';");
    builder.addLine("        errorStr = HDLmUpdateJsonStr(errorStr, 'siteName', siteNameStr);");
    builder.addLine("               '" + siteName + "',");
Possible variable size
    builder.addLine("                          'fontsize':'font-size',");
    builder.addLine("                curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                  curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                          'fontsize':'font-size',");
    builder.addLine("                curNode.style.setProperty('background-size', 'cover');");
    builder.addLine("                  curNode.style.setProperty('background-size', 'cover');");
Possible variable src
    builder.addLine("            let nodeSrc = curNode.getAttribute('src');");
    builder.addLine("            curNode.setAttribute('src', newText);");
    builder.addLine("              if (curNode.hasAttribute('src')) {");
    builder.addLine("                oldText = curNode.getAttribute('src');");
    builder.addLine("                curNode.setAttribute('src', 'https:' + newText);");
    builder.addLine("                curNode.setAttribute('src', newText);");
    builder.addLine("      else if (nodeAttributeKey == 'src') {");
    builder.addLine("            let nodeSrc = curNode.getAttribute('src');");
    builder.addLine("            curNode.setAttribute('src', newText);");
    builder.addLine("              if (curNode.hasAttribute('src')) {");
    builder.addLine("                oldText = curNode.getAttribute('src');");
    builder.addLine("                curNode.setAttribute('src', 'https:' + newText);");
    builder.addLine("                curNode.setAttribute('src', newText);");
    builder.addLine("      else if (nodeAttributeKey == 'src') {");
Possible variable static
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
  public static JsonArray  getIndexJsonArray() {
      final static String  jsonString = 
	    static JsonParser  parser = new JsonParser();  
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
  private static final Logger LOG = LoggerFactory.getLogger(HDLmBuildJs.class);
  public static String getJsBuildJs(HDLmProtocolTypes protocol,
  public static JsonArray  getIndexJsonArray() {
      final static String  jsonString = 
	    static JsonParser  parser = new JsonParser();  
	    static JsonArray   rvJsonArray = (JsonArray) parser.parse(jsonString);
Possible variable strict
    builder.addLine("  \"use strict\";");
    builder.addLine("  \"use strict\";");
Possible variable string
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
    builder.addLine("    if (typeof errorObj === 'string') {");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("      if (typeValue == 'string') {");
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
    builder.addLine("    if (typeof errorObj === 'string') {");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("      if (typeValue == 'string') {");
Possible variable style
    builder.addLine("                          'fontstyle':'font-style',");
    builder.addLine("        case 'style':");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("                if (curNode.hasAttribute('style')) {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("    var styleVar = document.createElement('style');");
    builder.addLine("      else if (nodeAttributeKey == 'style') {");
    builder.addLine("                          'fontstyle':'font-style',");
    builder.addLine("        case 'style':");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("                if (curNode.hasAttribute('style')) {");
    builder.addLine("            else if (curType == 'style') {");
    builder.addLine("    if (curType == 'style' && extraStr == 'background-image') {");
    builder.addLine("    var styleVar = document.createElement('style');");
    builder.addLine("      else if (nodeAttributeKey == 'style') {");
Possible variable subtree
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
Possible variable switch
    builder.addLine("      switch (curType) {");
    builder.addLine("      switch (keyValue) {");
    builder.addLine("    switch (nodeType) {");
    builder.addLine("        switch (curMod.type) {");
    builder.addLine("      switch (curType) {");
    builder.addLine("      switch (keyValue) {");
    builder.addLine("    switch (nodeType) {");
    builder.addLine("        switch (curMod.type) {");
Possible variable tag
    builder.addLine("      case 'tag': {");
    builder.addLine("          postTrace.nodegetby = 'tag';");
    builder.addLine("      nodeAttributeCheck.type = 'tag';");
    builder.addLine("      postTrace[postName + 'tag'] = nodeAttributeCheck;");
    builder.addLine("      if (nodeAttributeKey == 'tag') {");
    builder.addLine("      case 'tag': {");
    builder.addLine("          postTrace.nodegetby = 'tag';");
    builder.addLine("      nodeAttributeCheck.type = 'tag';");
    builder.addLine("      postTrace[postName + 'tag'] = nodeAttributeCheck;");
    builder.addLine("      if (nodeAttributeKey == 'tag') {");
Possible variable text
    builder.addLine("        case 'text':");
    builder.addLine("            else if (curType == 'text'        ||");
    builder.addLine("                curNode.style.setProperty('text-align', 'center');");
    builder.addLine("                     curType == 'text'  ||");
    builder.addLine("        case 'text':");
    builder.addLine("    styleVar.type = 'text/css';");
    builder.addLine("        case 'text':");
    builder.addLine("            else if (curType == 'text'        ||");
    builder.addLine("                curNode.style.setProperty('text-align', 'center');");
    builder.addLine("                     curType == 'text'  ||");
    builder.addLine("        case 'text':");
    builder.addLine("    styleVar.type = 'text/css';");
Possible variable textchecked
    builder.addLine("        case 'textchecked':");
    builder.addLine("                     curType == 'textchecked' ||");
    builder.addLine("            if (curType == 'textchecked') {");
    builder.addLine("            else if (curType == 'textchecked') {");
    builder.addLine("                     curType == 'textchecked') {");
    builder.addLine("        case 'textchecked': {");
    builder.addLine("        case 'textchecked':");
    builder.addLine("                     curType == 'textchecked' ||");
    builder.addLine("            if (curType == 'textchecked') {");
    builder.addLine("            else if (curType == 'textchecked') {");
    builder.addLine("                     curType == 'textchecked') {");
    builder.addLine("        case 'textchecked': {");
Possible variable textunequal
    builder.addLine("                matchError = 'textunequal';");
    builder.addLine("        matchError = 'textunequal';");
    builder.addLine("                matchError = 'textunequal';");
    builder.addLine("        matchError = 'textunequal';");
Possible variable throw
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
      throw new NullPointerException(errorText);
Possible variable title
    builder.addLine("        case 'title':");
    builder.addLine("                     curType == 'title') {");
    builder.addLine("            else if (curType == 'title' ||");
    builder.addLine("        case 'title': {");
    builder.addLine("        case 'title':");
    builder.addLine("                     curType == 'title') {");
    builder.addLine("            else if (curType == 'title' ||");
    builder.addLine("        case 'title': {");
Possible variable to
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
		  String  errorText = "Protocol string passed to getJsBuildJs is null";
		  String  errorText = "Host name string passed to getJsBuildJs is null";
		  String  errorText = "Division name string passed to getJsBuildJs is null";
		  String  errorText = "Site name string passed to getJsBuildJs is null";
		  String  errorText = "Modifications array passed to getJsBuildJs is null";
		  String  errorText = "Session object passed to getJsBuildJs is null";
		  String  errorText = "Log rule matching reference passed to getJsBuildJs is null";
		  String  errorText = "Server name string passed to getJsBuildJs is null";
Possible variable true
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugRulesEnabled\", 'true');");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionPostRuleTracingEnabled\", 'true');");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionIgnoreProbability\", 'true');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
    builder.addLine("      logRuleMatching = true;");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
    builder.addLine("      postRuleTracing = true;");
    builder.addLine("    while (true) {");
    builder.addLine("            ignoreProbability != 'true') {");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("      if (curMod.enabled != true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("      if (curMod.pathre === true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (logRuleMatching == true) {");
    builder.addLine("        sessionIndexValueUsed = true;");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("            matchFound = true;");
    builder.addLine("            matchFound = true;");
    builder.addLine("            matchFound = true;");
    builder.addLine("              sendUpdates = true;");
    builder.addLine("            matchFound = true;");
    builder.addLine("              forceSelectFound = true;");
    builder.addLine("            if (postRuleTracing == true) {");
    builder.addLine("            matchFound = true;");
    builder.addLine("              let testFlag = true;");
    builder.addLine("              if (forceBreak == true)");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("        logRuleMatching == true) {");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            forceBreak = true;");
    builder.addLine("          if (countHigh == true)");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            forceBreak = true;");
    builder.addLine("      if (postRuleTracing == true) {");
    builder.addLine("      rv = true;");
    builder.addLine("      disabledStatus = true;");
    builder.addLine("    if (disabledStatus == 'true')");
    builder.addLine("      disabledStatus = true;");
    builder.addLine("      while (true) {");
    builder.addLine("      while (true) {");
    builder.addLine("        while (true) {");
    builder.addLine("          nodePHashCheck = true;");
    builder.addLine("        while (true) {");
    builder.addLine("          nodePHashCheck = true;");
    builder.addLine("      let quotes = true;");
    builder.addLine("        countHigh = true;");
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
    builder.addLine("      disabledStatus = 'true';");
    builder.addLine("    disabledStatus = (disabledStatus == 'true') ? false : true;");
    builder.addLine("    disabledStatus = (disabledStatus == 'true') ? false : true;");
      logRuleMatchingString = "true";
    builder.addLine("  var HDLmCheckVariable = true;");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("      forceReadyState = true;");
    builder.addLine("        forceReadyState == true) {");
    builder.addLine("  curMod.enabled = true;");  
    builder.addLine("  curMod.pathre = true;");   
    builder.addLine("    if (event.key == 'b' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionDebugRulesEnabled\", 'true');");
    builder.addLine("    if (event.key == 'i' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'm' && event.ctrlKey == true)");
    builder.addLine("    if (event.key == 'q' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionPostRuleTracingEnabled\", 'true');");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("      sessionStorage.setItem(\"HDLmSessionIgnoreProbability\", 'true');");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionDebugRulesEnabled') == 'true')");
    builder.addLine("      logRuleMatching = true;");
    builder.addLine("    if (sessionStorage.getItem('HDLmSessionPostRuleTracingEnabled') == 'true')");
    builder.addLine("      postRuleTracing = true;");
    builder.addLine("    while (true) {");
    builder.addLine("            ignoreProbability != 'true') {");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("      if (curMod.enabled != true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("      if (curMod.pathre === true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("        if (logRuleMatching == true) {");
    builder.addLine("        sessionIndexValueUsed = true;");
    builder.addLine("        if (postRuleTracing == true) {");
    builder.addLine("            matchFound = true;");
    builder.addLine("            matchFound = true;");
    builder.addLine("            matchFound = true;");
    builder.addLine("              sendUpdates = true;");
    builder.addLine("            matchFound = true;");
    builder.addLine("              forceSelectFound = true;");
    builder.addLine("            if (postRuleTracing == true) {");
    builder.addLine("            matchFound = true;");
    builder.addLine("              let testFlag = true;");
    builder.addLine("              if (forceBreak == true)");
    builder.addLine("          if (postRuleTracing == true) {");
    builder.addLine("        logRuleMatching == true) {");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            forceBreak = true;");
    builder.addLine("          if (countHigh == true)");
    builder.addLine("            forceBreak = true;");
    builder.addLine("            forceBreak = true;");
    builder.addLine("      if (postRuleTracing == true) {");
    builder.addLine("      rv = true;");
    builder.addLine("      disabledStatus = true;");
    builder.addLine("    if (disabledStatus == 'true')");
    builder.addLine("      disabledStatus = true;");
    builder.addLine("      while (true) {");
    builder.addLine("      while (true) {");
    builder.addLine("        while (true) {");
    builder.addLine("          nodePHashCheck = true;");
    builder.addLine("        while (true) {");
    builder.addLine("          nodePHashCheck = true;");
    builder.addLine("      let quotes = true;");
    builder.addLine("        countHigh = true;");
    builder.addLine("      if (Number.isInteger(Number(styleValue)) == true) {");
    builder.addLine("      disabledStatus = 'true';");
    builder.addLine("    disabledStatus = (disabledStatus == 'true') ? false : true;");
    builder.addLine("    disabledStatus = (disabledStatus == 'true') ? false : true;");
      logRuleMatchingString = "true";
    builder.addLine("  var HDLmCheckVariable = true;");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("  let HDLmObsConfig = {attributes: true, childList: true, subtree: true};");
    builder.addLine("      forceReadyState = true;");
    builder.addLine("        forceReadyState == true) {");
    builder.addLine("  curMod.enabled = true;");  
    builder.addLine("  curMod.pathre = true;");   
Possible variable try
    builder.addLine("      try {");
    builder.addLine("      try {");
    builder.addLine("      try {");
    builder.addLine("      try {");
    builder.addLine("      try {");
    builder.addLine("      try {");
Possible variable type
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
Possible variable typeof
    builder.addLine("      if (typeof(tempLookupIndex) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("    let arrayType = typeof(curArray);");
    builder.addLine("      if (typeof(tempInt) != 'number')");
    builder.addLine("    if ((typeof(newValue) == 'number') &&");
    builder.addLine("            let changesType = typeof changesValue;");
    builder.addLine("    if (typeof errorObj === 'string') {");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (typeof nodeParentAttributes == 'undefined' ||");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (typeof grandParentElement == 'undefined' ||");
    builder.addLine("        if (typeof nodeGrandParentAttributes == 'undefined' ||");
    builder.addLine("        if ((typeof nodeInnerText) == 'undefined')");
    builder.addLine("        if (typeof curNode.getElementById === 'function' &&");
    builder.addLine("      if (typeof curNode.getElementByClassName === 'function' &&");
    builder.addLine("      if (typeof curNode.getElementsByTagName === 'function' &&");
    builder.addLine("        if (typeof curChild.hasAttribute !== 'function')");
    builder.addLine("        if (typeof curChild.getAttribute !== 'function')");
    builder.addLine("      let backType = typeof backStr;");
    builder.addLine("      let typeValue = typeof objValue;");
    builder.addLine("    if ((typeof visitText) != 'undefined' &&");
    builder.addLine("      if (typeof(tempLookupIndex) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("    let arrayType = typeof(curArray);");
    builder.addLine("      if (typeof(tempInt) != 'number')");
    builder.addLine("    if ((typeof(newValue) == 'number') &&");
    builder.addLine("            let changesType = typeof changesValue;");
    builder.addLine("    if (typeof errorObj === 'string') {");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (typeof nodeParentAttributes == 'undefined' ||");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (typeof grandParentElement == 'undefined' ||");
    builder.addLine("        if (typeof nodeGrandParentAttributes == 'undefined' ||");
    builder.addLine("        if ((typeof nodeInnerText) == 'undefined')");
    builder.addLine("        if (typeof curNode.getElementById === 'function' &&");
    builder.addLine("      if (typeof curNode.getElementByClassName === 'function' &&");
    builder.addLine("      if (typeof curNode.getElementsByTagName === 'function' &&");
    builder.addLine("        if (typeof curChild.hasAttribute !== 'function')");
    builder.addLine("        if (typeof curChild.getAttribute !== 'function')");
    builder.addLine("      let backType = typeof backStr;");
    builder.addLine("      let typeValue = typeof objValue;");
    builder.addLine("    if ((typeof visitText) != 'undefined' &&");
Possible variable u0e81
    builder.addLine("    inStr = inStr.replace(/A/g,'\u0e81');");
    builder.addLine("    inStr = inStr.replace(/A/g,'\u0e81');");
Possible variable u0e82
    builder.addLine("    inStr = inStr.replace(/B/g,'\u0e82');");
    builder.addLine("    inStr = inStr.replace(/B/g,'\u0e82');");
Possible variable u0e84
    builder.addLine("    inStr = inStr.replace(/C/g,'\u0e84');");
    builder.addLine("    inStr = inStr.replace(/C/g,'\u0e84');");
Possible variable u0e87
    builder.addLine("    inStr = inStr.replace(/D/g,'\u0e87');");
    builder.addLine("    inStr = inStr.replace(/D/g,'\u0e87');");
Possible variable u0e88
    builder.addLine("    inStr = inStr.replace(/E/g,'\u0e88');");
    builder.addLine("    inStr = inStr.replace(/E/g,'\u0e88');");
Possible variable u0e8a
    builder.addLine("    inStr = inStr.replace(/F/g,'\u0e8a');");
    builder.addLine("    inStr = inStr.replace(/F/g,'\u0e8a');");
Possible variable u0e8d
    builder.addLine("    inStr = inStr.replace(/G/g,'\u0e8d');");
    builder.addLine("    inStr = inStr.replace(/G/g,'\u0e8d');");
Possible variable u0e94
    builder.addLine("    inStr = inStr.replace(/H/g,'\u0e94');");
    builder.addLine("    inStr = inStr.replace(/H/g,'\u0e94');");
Possible variable u0e97
    builder.addLine("    inStr = inStr.replace(/I/g,'\u0e97');");
    builder.addLine("    inStr = inStr.replace(/I/g,'\u0e97');");
Possible variable u0e99
    builder.addLine("    inStr = inStr.replace(/J/g,'\u0e99');");
    builder.addLine("    inStr = inStr.replace(/J/g,'\u0e99');");
Possible variable u0e9f
    builder.addLine("    inStr = inStr.replace(/K/g,'\u0e9f');");
    builder.addLine("    inStr = inStr.replace(/K/g,'\u0e9f');");
Possible variable u0ea1
    builder.addLine("    inStr = inStr.replace(/L/g,'\u0ea1');");
    builder.addLine("    inStr = inStr.replace(/L/g,'\u0ea1');");
Possible variable u0ea3
    builder.addLine("    inStr = inStr.replace(/M/g,'\u0ea3');");
    builder.addLine("    inStr = inStr.replace(/M/g,'\u0ea3');");
Possible variable u0ea5
    builder.addLine("    inStr = inStr.replace(/N/g,'\u0ea5');");
    builder.addLine("    inStr = inStr.replace(/N/g,'\u0ea5');");
Possible variable u0ea7
    builder.addLine("    inStr = inStr.replace(/O/g,'\u0ea7');");
    builder.addLine("    inStr = inStr.replace(/O/g,'\u0ea7');");
Possible variable u0eaa
    builder.addLine("    inStr = inStr.replace(/P/g,'\u0eaa');");
    builder.addLine("    inStr = inStr.replace(/P/g,'\u0eaa');");
Possible variable u0eab
    builder.addLine("    inStr = inStr.replace(/Q/g,'\u0eab');");
    builder.addLine("    inStr = inStr.replace(/Q/g,'\u0eab');");
Possible variable u0ead
    builder.addLine("    inStr = inStr.replace(/R/g,'\u0ead');");
    builder.addLine("    inStr = inStr.replace(/R/g,'\u0ead');");
Possible variable u0eb9
    builder.addLine("    inStr = inStr.replace(/S/g,'\u0eb9');");
    builder.addLine("    inStr = inStr.replace(/S/g,'\u0eb9');");
Possible variable u0ebb
    builder.addLine("    inStr = inStr.replace(/T/g,'\u0ebb');");
    builder.addLine("    inStr = inStr.replace(/T/g,'\u0ebb');");
Possible variable u0ebd
    builder.addLine("    inStr = inStr.replace(/U/g,'\u0ebd');");
    builder.addLine("    inStr = inStr.replace(/U/g,'\u0ebd');");
Possible variable u0ec0
    builder.addLine("    inStr = inStr.replace(/V/g,'\u0ec0');");
    builder.addLine("    inStr = inStr.replace(/V/g,'\u0ec0');");
Possible variable u0ec4
    builder.addLine("    inStr = inStr.replace(/W/g,'\u0ec4');");
    builder.addLine("    inStr = inStr.replace(/W/g,'\u0ec4');");
Possible variable u0ec6
    builder.addLine("    inStr = inStr.replace(/X/g,'\u0ec6');");
    builder.addLine("    inStr = inStr.replace(/X/g,'\u0ec6');");
Possible variable u0ec8
    builder.addLine("    inStr = inStr.replace(/Y/g,'\u0ec8');");
    builder.addLine("    inStr = inStr.replace(/Y/g,'\u0ec8');");
Possible variable u0ecd
    builder.addLine("    inStr = inStr.replace(/Z/g,'\u0ecd');");
    builder.addLine("    inStr = inStr.replace(/Z/g,'\u0ecd');");
Possible variable u0ed0
    builder.addLine("    inStr = inStr.replace(/\\s/g,'\u0ed0');");
    builder.addLine("    inStr = inStr.replace(/\\s/g,'\u0ed0');");
Possible variable u0ed1
    builder.addLine("    inStr = inStr.replace(/\\$/g,'\u0ed1');");
    builder.addLine("    inStr = inStr.replace(/\\$/g,'\u0ed1');");
Possible variable u0ed2
    builder.addLine("    inStr = inStr.replace(/\\./g,'\u0ed2');");
    builder.addLine("    inStr = inStr.replace(/\\./g,'\u0ed2');");
Possible variable u0ed3
    builder.addLine("    inStr = inStr.replace(/\\//g,'\u0ed3');");
    builder.addLine("    inStr = inStr.replace(/\\//g,'\u0ed3');");
Possible variable u0ed4
    builder.addLine("    inStr = inStr.replace(/\\(/g,'\u0ed4');");
    builder.addLine("    inStr = inStr.replace(/\\(/g,'\u0ed4');");
Possible variable u0ed5
    builder.addLine("    inStr = inStr.replace(/\\)/g,'\u0ed5');");
    builder.addLine("    inStr = inStr.replace(/\\)/g,'\u0ed5');");
Possible variable u1000
		  	if (curChar == '\u1000')  
		  	  curStr = "\\u1000";		  
		  	if (curChar == '\u1000')  
		  	  curStr = "\\u1000";		  
Possible variable u1001
		  	else if (curChar == '\u1001')  
	  	    curStr = "\\u1001";
		  	else if (curChar == '\u1001')  
	  	    curStr = "\\u1001";
Possible variable u1002
        else if (curChar == '\u1002')  
	  	    curStr = "\\u1002";
        else if (curChar == '\u1002')  
	  	    curStr = "\\u1002";
Possible variable u1003
        else if (curChar == '\u1003')  
	  	    curStr = "\\u1003";
        else if (curChar == '\u1003')  
	  	    curStr = "\\u1003";
Possible variable u1004
        else if (curChar == '\u1004')  
	  	    curStr = "\\u1004";
        else if (curChar == '\u1004')  
	  	    curStr = "\\u1004";
Possible variable u1005
        else if (curChar == '\u1005')  
	  	    curStr = "\\u1005";
        else if (curChar == '\u1005')  
	  	    curStr = "\\u1005";
Possible variable u1006
        else if (curChar == '\u1006')  
	  	    curStr = "\\u1006";
        else if (curChar == '\u1006')  
	  	    curStr = "\\u1006";
Possible variable u1007
        else if (curChar == '\u1007')  
	  	    curStr = "\\u1007";
        else if (curChar == '\u1007')  
	  	    curStr = "\\u1007";
Possible variable u1008
        else if (curChar == '\u1008')  
	  	    curStr = "\\u1008";
        else if (curChar == '\u1008')  
	  	    curStr = "\\u1008";
Possible variable u1009
        else if (curChar == '\u1009')  
	  	    curStr = "\\u1009";
        else if (curChar == '\u1009')  
	  	    curStr = "\\u1009";
Possible variable u100a
        else if (curChar == '\u100a')  
	  	    curStr = "\\u100a";
        else if (curChar == '\u100a')  
	  	    curStr = "\\u100a";
Possible variable u100b
        else if (curChar == '\u100b')  
	  	    curStr = "\\u100b";
        else if (curChar == '\u100b')  
	  	    curStr = "\\u100b";
Possible variable u100c
        else if (curChar == '\u100c')  
	  	    curStr = "\\u100c";
        else if (curChar == '\u100c')  
	  	    curStr = "\\u100c";
Possible variable u100d
        else if (curChar == '\u100d')  
	  	    curStr = "\\u100d";
        else if (curChar == '\u100d')  
	  	    curStr = "\\u100d";
Possible variable u100e
        else if (curChar == '\u100e')  
	  	    curStr = "\\u100e";
        else if (curChar == '\u100e')  
	  	    curStr = "\\u100e";
Possible variable u100f
        else if (curChar == '\u100f')  
	  	    curStr = "\\u100f";
        else if (curChar == '\u100f')  
	  	    curStr = "\\u100f";
Possible variable u1010
        else if (curChar == '\u1010')  
	  	    curStr = "\\u1010";
        else if (curChar == '\u1010')  
	  	    curStr = "\\u1010";
Possible variable u1011
        else if (curChar == '\u1011')  
	  	    curStr = "\\u1011";
        else if (curChar == '\u1011')  
	  	    curStr = "\\u1011";
Possible variable u1012
        else if (curChar == '\u1012')  
	  	    curStr = "\\u1012";
        else if (curChar == '\u1012')  
	  	    curStr = "\\u1012";
Possible variable u1013
        else if (curChar == '\u1013')  
	  	    curStr = "\\u1013";
        else if (curChar == '\u1013')  
	  	    curStr = "\\u1013";
Possible variable u1014
        else if (curChar == '\u1014')  
	  	    curStr = "\\u1014";
        else if (curChar == '\u1014')  
	  	    curStr = "\\u1014";
Possible variable u1015
        else if (curChar == '\u1015')  
	  	    curStr = "\\u1015";
        else if (curChar == '\u1015')  
	  	    curStr = "\\u1015";
Possible variable u1016
        else if (curChar == '\u1016')  
	  	    curStr = "\\u1016";
        else if (curChar == '\u1016')  
	  	    curStr = "\\u1016";
Possible variable u1017
        else if (curChar == '\u1017')  
	  	    curStr = "\\u1017";
        else if (curChar == '\u1017')  
	  	    curStr = "\\u1017";
Possible variable u1018
        else if (curChar == '\u1018')  
	  	    curStr = "\\u1018";
        else if (curChar == '\u1018')  
	  	    curStr = "\\u1018";
Possible variable u1019
        else if (curChar == '\u1019')  
	  	    curStr = "\\u1019";
        else if (curChar == '\u1019')  
	  	    curStr = "\\u1019";
Possible variable u101a
        else if (curChar == '\u101a')  
	  	    curStr = "\\u101a";
        else if (curChar == '\u101a')  
	  	    curStr = "\\u101a";
Possible variable u101b
        else if (curChar == '\u101b')  
	  	    curStr = "\\u101b";
        else if (curChar == '\u101b')  
	  	    curStr = "\\u101b";
Possible variable u101c
        else if (curChar == '\u101c')  
	  	    curStr = "\\u101c";
        else if (curChar == '\u101c')  
	  	    curStr = "\\u101c";
Possible variable u101d
        else if (curChar == '\u101d')  
	  	    curStr = "\\u101d";
        else if (curChar == '\u101d')  
	  	    curStr = "\\u101d";
Possible variable u101e
        else if (curChar == '\u101e')  
	  	    curStr = "\\u101e";
        else if (curChar == '\u101e')  
	  	    curStr = "\\u101e";
Possible variable u101f
        else if (curChar == '\u101f')  
	  	    curStr = "\\u101f";
        else if (curChar == '\u101f')  
	  	    curStr = "\\u101f";
Possible variable u1020
        else if (curChar == '\u1020')  
	  	    curStr = "\\u1020";
        else if (curChar == '\u1020')  
	  	    curStr = "\\u1020";
Possible variable u1021
        else if (curChar == '\u1021')  
	  	    curStr = "\\u1021";
        else if (curChar == '\u1021')  
	  	    curStr = "\\u1021";
Possible variable u1022
        else if (curChar == '\u1022')  
	  	    curStr = "\\u1022";
        else if (curChar == '\u1022')  
	  	    curStr = "\\u1022";
Possible variable u1023
        else if (curChar == '\u1023')  
	  	    curStr = "\\u1023";
        else if (curChar == '\u1023')  
	  	    curStr = "\\u1023";
Possible variable u1024
        else if (curChar == '\u1024')  
	  	    curStr = "\\u1024";
        else if (curChar == '\u1024')  
	  	    curStr = "\\u1024";
Possible variable u1025
        else if (curChar == '\u1025')  
	  	    curStr = "\\u1025";
        else if (curChar == '\u1025')  
	  	    curStr = "\\u1025";
Possible variable u1026
        else if (curChar == '\u1026')  
	  	    curStr = "\\u1026";
        else if (curChar == '\u1026')  
	  	    curStr = "\\u1026";
Possible variable u1027
        else if (curChar == '\u1027')  
	  	    curStr = "\\u1027";
        else if (curChar == '\u1027')  
	  	    curStr = "\\u1027";
Possible variable u1028
        else if (curChar == '\u1028')  
	  	    curStr = "\\u1028";
        else if (curChar == '\u1028')  
	  	    curStr = "\\u1028";
Possible variable u1029
        else if (curChar == '\u1029')  
	  	    curStr = "\\u1029";
        else if (curChar == '\u1029')  
	  	    curStr = "\\u1029";
Possible variable u102a
        else if (curChar == '\u102a')  
	  	    curStr = "\\u102a";
        else if (curChar == '\u102a')  
	  	    curStr = "\\u102a";
Possible variable u102b
        else if (curChar == '\u102b')  
	  	    curStr = "\\u102b";
        else if (curChar == '\u102b')  
	  	    curStr = "\\u102b";
Possible variable u102c
        else if (curChar == '\u102c')  
	  	    curStr = "\\u102c";
        else if (curChar == '\u102c')  
	  	    curStr = "\\u102c";
Possible variable u102d
        else if (curChar == '\u102d')  
	  	    curStr = "\\u102d";
        else if (curChar == '\u102d')  
	  	    curStr = "\\u102d";
Possible variable u102e
        else if (curChar == '\u102e')  
	  	    curStr = "\\u102e";
        else if (curChar == '\u102e')  
	  	    curStr = "\\u102e";
Possible variable u102f
        else if (curChar == '\u102f')  
	  	    curStr = "\\u102f";
        else if (curChar == '\u102f')  
	  	    curStr = "\\u102f";
Possible variable u1030
        else if (curChar == '\u1030')  
	  	    curStr = "\\u1030";
        else if (curChar == '\u1030')  
	  	    curStr = "\\u1030";
Possible variable u1031
        else if (curChar == '\u1031')  
	  	    curStr = "\\u1031";
        else if (curChar == '\u1031')  
	  	    curStr = "\\u1031";
Possible variable u1032
        else if (curChar == '\u1032')  
	  	    curStr = "\\u1032";
        else if (curChar == '\u1032')  
	  	    curStr = "\\u1032";
Possible variable u1033
        else if (curChar == '\u1033')  
	  	    curStr = "\\u1033";
        else if (curChar == '\u1033')  
	  	    curStr = "\\u1033";
Possible variable u1034
        else if (curChar == '\u1034')  
	  	    curStr = "\\u1034";
        else if (curChar == '\u1034')  
	  	    curStr = "\\u1034";
Possible variable u1035
        else if (curChar == '\u1035')  
	  	    curStr = "\\u1035";
        else if (curChar == '\u1035')  
	  	    curStr = "\\u1035";
Possible variable u1036
        else if (curChar == '\u1036')  
	  	    curStr = "\\u1036";
        else if (curChar == '\u1036')  
	  	    curStr = "\\u1036";
Possible variable u1037
        else if (curChar == '\u1037')  
	  	    curStr = "\\u1037";
        else if (curChar == '\u1037')  
	  	    curStr = "\\u1037";
Possible variable u1038
        else if (curChar == '\u1038')  
	  	    curStr = "\\u1038";
        else if (curChar == '\u1038')  
	  	    curStr = "\\u1038";
Possible variable u1039
        else if (curChar == '\u1039')  
	  	    curStr = "\\u1039";       
        else if (curChar == '\u1039')  
	  	    curStr = "\\u1039";       
Possible variable unchanged
    builder.addLine("      if (styleValue == 'unchanged' ||");
    builder.addLine("      if (styleValue == 'unchanged' ||");
Possible variable undefined
    builder.addLine("      if (typeof(tempLookupIndex) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("    if (arrayType == 'undefined') {");
    builder.addLine("      rv = 'undefined';");
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (typeof nodeParentAttributes == 'undefined' ||");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (typeof grandParentElement == 'undefined' ||");
    builder.addLine("        if (typeof nodeGrandParentAttributes == 'undefined' ||");
    builder.addLine("        if ((typeof nodeInnerText) == 'undefined')");
    builder.addLine("    if ((typeof visitText) != 'undefined' &&");
    builder.addLine("      if (typeof(tempLookupIndex) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("            if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("                if ((typeof curModExtra) != 'undefined' &&");
    builder.addLine("    if (arrayType == 'undefined') {");
    builder.addLine("      rv = 'undefined';");
    builder.addLine("    return firstStr.localeCompare(secondStr, undefined, { sensitivity: 'accent' }) === 0;");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (typeof nodeParentAttributes == 'undefined' ||");
    builder.addLine("        if (typeof parentElement == 'undefined' ||");
    builder.addLine("        if (typeof grandParentElement == 'undefined' ||");
    builder.addLine("        if (typeof nodeGrandParentAttributes == 'undefined' ||");
    builder.addLine("        if ((typeof nodeInnerText) == 'undefined')");
    builder.addLine("    if ((typeof visitText) != 'undefined' &&");
Possible variable unknown
    builder.addLine("  const readyState = 'unknown';");
    builder.addLine("  const readyState = 'unknown';");
Possible variable unused
  @SuppressWarnings("unused")
  @SuppressWarnings("unused")
Possible variable updates
    builder.addLine("    if (!savedUpdates.hasOwnProperty('updates'))");
    builder.addLine("    if (!savedUpdates.hasOwnProperty('updates'))");
Possible variable url
    builder.addLine("                if (newData.startsWith('url')) {");
    builder.addLine("                  newData = 'url(' + newData + ')';");
    builder.addLine("                  newData = 'url(' + newData + ')';");
    builder.addLine("                    newData = 'url(https:' + newData + ')';");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('url(\"http');");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
    builder.addLine("                if (newData.startsWith('url')) {");
    builder.addLine("                  newData = 'url(' + newData + ')';");
    builder.addLine("                  newData = 'url(' + newData + ')';");
    builder.addLine("                    newData = 'url(https:' + newData + ')';");
    builder.addLine("          nodeActualIndex = nodeActualValue.indexOf('url(\"http');");
    builder.addLine("      if (backStr == null || backStr == 'none' || backType != 'string' || backStr.indexOf('url(') < 0) {");
Possible variable urlencoded
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
Possible variable use
    builder.addLine("  \"use strict\";");
    builder.addLine("  \"use strict\";");
Possible variable useCreateFixedJS
    boolean         useCreateFixedJS = false;
    if (useCreateFixedJS) {
		if (useCreateFixedJS) {
    boolean         useCreateFixedJS = false;
    if (useCreateFixedJS) {
		if (useCreateFixedJS) {
Possible variable value
    builder.addLine("        matchError = 'Path value mismatch';");
    builder.addLine("            matchError = 'Null lookup value';");
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("      errorText += \" value (\";");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
	    String  value = entry.getValue();
        newLine += value;
    builder.addLine("        matchError = 'Path value mismatch';");
    builder.addLine("            matchError = 'Null lookup value';");
    builder.addLine("          let errorText = \"Invalid modification type value - \" + curType;");
    builder.addLine("      errorText += \" value (\";");
    builder.addLine("        let errorText = \"Invalid node identifier type value - \" + nodeType;");
    builder.addLine("        let   errorText = `Node identifier - current match value (${currentMatchValue}) for element (${currentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - parent match value (${parentMatchValue}) for element (${parentElement})`;");
    builder.addLine("          let   errorText = `Node identifier - grandparent match value (${grandParentMatchValue}) for element (${grandParentElement})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("              errorText = `Node identifier - key (perceptual hash) comparison value (${nodeAttributesPHashSimilarity})`;");
    builder.addLine("              errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
    builder.addLine("            errorText = `Node identifier - key (${nodeAttributeKey}) comparison value (${traceValue})`;");
      			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
        			HDLmAssert.HDLmAssertAction(false, "JSON element is not a JSON primitive value");
	    String  value = entry.getValue();
        newLine += value;
Possible variable valueCount
        int   valueCount = mod.getValues().size();
        for (int i = 0; i < valueCount; i++) {
        int   valueCount = mod.getValues().size();
        for (int i = 0; i < valueCount; i++) {
Possible variable var
    builder.addLine("    var styleTitle = 'HDLmSessionClasses';");
    builder.addLine("    var styleVar = document.createElement('style');");
    builder.addLine("    var disabledStatus = sessionStorage.getItem(styleTitle + 'Disabled');");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("    var disabledStatus;");
    builder.addLine("    var titleValue = 'HDLmSessionClasses';");
    builder.addLine("  var HDLmCheckVariable = true;");
    builder.addLine("    var styleTitle = 'HDLmSessionClasses';");
    builder.addLine("    var styleVar = document.createElement('style');");
    builder.addLine("    var disabledStatus = sessionStorage.getItem(styleTitle + 'Disabled');");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("    var styleSheetList = document.styleSheets;");
    builder.addLine("      var styleSheet = styleSheetList[i];");
    builder.addLine("    var disabledStatus;");
    builder.addLine("    var titleValue = 'HDLmSessionClasses';");
    builder.addLine("  var HDLmCheckVariable = true;");
Possible variable visit
    builder.addLine("      if (nodeListLength == 0 && curType != 'visit') {");
    builder.addLine("        case 'visit': {");
    builder.addLine("        case 'visit': {");
    builder.addLine("    postTrace.matcherror = 'visit';");
    builder.addLine("      if (nodeListLength == 0 && curType != 'visit') {");
    builder.addLine("        case 'visit': {");
    builder.addLine("        case 'visit': {");
    builder.addLine("    postTrace.matcherror = 'visit';");
Possible variable website
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
        "    \"website\":" +
    	String  jsonHostName = HDLmJson.getJsonString(indexJsonElement, "website");
        "    \"website\":" +
Possible variable weight
    builder.addLine("                          'fontweight':'font-weight'");
    builder.addLine("                          'fontweight':'font-weight'");
Possible variable while
    builder.addLine("    while (true) {");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("      while (thisNode) {");
    builder.addLine("      while (true) {");
    builder.addLine("      while (true) {");
    builder.addLine("        while (true) {");
    builder.addLine("        while (true) {");
    builder.addLine("    while (obj) {");
    builder.addLine("    while (domElement != null) {");
    builder.addLine("    while (xorValue > 0) {");
    builder.addLine("    while (firstVal.length > 0) {");
    builder.addLine("    while (true) {");
    builder.addLine("    let tempIntArray = (function(a, b) {while(a--) b[a] = a; return b})(totalLength, []);");
    builder.addLine("      while (thisNode) {");
    builder.addLine("      while (true) {");
    builder.addLine("      while (true) {");
    builder.addLine("        while (true) {");
    builder.addLine("        while (true) {");
    builder.addLine("    while (obj) {");
    builder.addLine("    while (domElement != null) {");
    builder.addLine("    while (xorValue > 0) {");
    builder.addLine("    while (firstVal.length > 0) {");
Possible variable width
    builder.addLine("        case 'width': {");
    builder.addLine("                     curType == 'width') {");
    builder.addLine("                     curType == 'width') {");
    builder.addLine("        case 'width': {");
    builder.addLine("                     curType == 'width') {");
    builder.addLine("                     curType == 'width') {");
Possible variable window
    builder.addLine("                window[functionStr]();");
    builder.addLine("      let computedStyle = window.getComputedStyle(domElement);");
    builder.addLine("    if (isNaN(window[updateName]))");
    builder.addLine("      window[updateName] = 0;");
    builder.addLine("      if (window[updateName] > 0)");
    builder.addLine("    window[updateName] += 1;");
    builder.addLine("    Object.keys(window).forEach(key => {"); 
    builder.addLine("        window.addEventListener(key.slice(2), event => {");  
    builder.addLine("                window[functionStr]();");
    builder.addLine("      let computedStyle = window.getComputedStyle(domElement);");
    builder.addLine("    if (isNaN(window[updateName]))");
    builder.addLine("      window[updateName] = 0;");
    builder.addLine("      if (window[updateName] > 0)");
    builder.addLine("    window[updateName] += 1;");
    builder.addLine("    Object.keys(window).forEach(key => {"); 
    builder.addLine("        window.addEventListener(key.slice(2), event => {");  
Possible variable www
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("    if (document.location.hostname == 'www.themarvelouslandofoz.com' &&");
        "      \"www.yogadirect.com\"," +
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("    if (document.location.hostname == 'www.themarvelouslandofoz.com' &&");
        "      \"www.yogadirect.com\"," +
Possible variable x
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
    builder.addLine("    if (event.key == 'x' && event.ctrlKey == true)");
    builder.addLine("    httpReq.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');");
Possible variable yellow
                                      "'background-color: yellow');");
                                      "'background-color: yellow');");
Possible variable yes
    builder.addLine("              if (HDLmCompareCaseInsensitive(newText, 'yes'))");
    builder.addLine("              if (HDLmCompareCaseInsensitive(newText, 'yes'))");